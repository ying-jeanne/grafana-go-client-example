/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * API version: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package goclient

// https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11 NOTE -- in javascript this can accept any `[key: string]: any;` however this interface only exposes the values we want to be exposed
type FrameMetaModel struct {
	// Channel is the path to a stream in grafana live that has real-time updates for this data.
	Channel string `json:"channel,omitempty"`
	// Custom datasource specific values.
	Custom interface{} `json:"custom,omitempty"`
	// ExecutedQueryString is the raw query sent to the underlying system. All macros and templating have been applied.  When metadata contains this value, it will be shown in the query inspector.
	ExecutedQueryString string `json:"executedQueryString,omitempty"`
	// Notices provide additional information about the data in the Frame that Grafana can display to the user in the user interface.
	Notices []NoticeModel `json:"notices,omitempty"`
	// Path is a browsable path on the datasource.
	Path string `json:"path,omitempty"`
	// PathSeparator defines the separator pattern to decode a hierarchy. The default separator is '/'.
	PathSeparator              string        `json:"pathSeparator,omitempty"`
	PreferredVisualisationType *VisTypeModel `json:"preferredVisualisationType,omitempty"`
	// Stats is an array of query result statistics.
	Stats []QueryStatModel `json:"stats,omitempty"`
	Type_ *FrameTypeModel  `json:"type,omitempty"`
}
