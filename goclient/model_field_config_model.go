/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * API version: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package goclient

type FieldConfigModel struct {
	// Map values to a display color NOTE: this interface is under development in the frontend... so simple map for now
	Color map[string]interface{} `json:"color,omitempty"`
	// Panel Specific Values
	Custom   map[string]interface{} `json:"custom,omitempty"`
	Decimals int32                  `json:"decimals,omitempty"`
	// Description is human readable field metadata
	Description string `json:"description,omitempty"`
	// DisplayName overrides Grafana default naming, should not be used from a data source
	DisplayName string `json:"displayName,omitempty"`
	// DisplayNameFromDS overrides Grafana default naming in a better way that allows users to override it easily.
	DisplayNameFromDS string `json:"displayNameFromDS,omitempty"`
	// Filterable indicates if the Field's data can be filtered by additional calls.
	Filterable bool `json:"filterable,omitempty"`
	// Interval indicates the expected regular step between values in the series. When an interval exists, consumers can identify \"missing\" values when the expected value is not present. The grafana timeseries visualization will render disconnected values when missing values are found it the time field. The interval uses the same units as the values.  For time.Time, this is defined in milliseconds.
	Interval float64 `json:"interval,omitempty"`
	// The behavior when clicking on a result
	Links    []DataLinkModel     `json:"links,omitempty"`
	Mappings *ValueMappingsModel `json:"mappings,omitempty"`
	Max      *ConfFloat64Model   `json:"max,omitempty"`
	Min      *ConfFloat64Model   `json:"min,omitempty"`
	// Alternative to empty string
	NoValue string `json:"noValue,omitempty"`
	// Path is an explicit path to the field in the datasource. When the frame meta includes a path, this will default to `${frame.meta.path}/${field.name}  When defined, this value can be used as an identifier within the datasource scope, and may be used as an identifier to update values in a subsequent request
	Path       string                 `json:"path,omitempty"`
	Thresholds *ThresholdsConfigModel `json:"thresholds,omitempty"`
	// Numeric Options
	Unit string `json:"unit,omitempty"`
	// Writeable indicates that the datasource knows how to update this value
	Writeable bool `json:"writeable,omitempty"`
}
