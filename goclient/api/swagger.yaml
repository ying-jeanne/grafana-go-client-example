---
swagger: "2.0"
info:
  description: "The Grafana backend exposes an HTTP API, the same API is used by the\
    \ frontend to do\neverything from saving dashboards, creating users and updating\
    \ data sources."
  version: "0.0.1"
  title: "Grafana HTTP API."
  contact:
    name: "Grafana Labs"
    url: "https://grafana.com"
    email: "hello@grafana.com"
  license:
    name: "GNU Affero General Public License v3.0"
    url: "https://www.gnu.org/licenses/agpl-3.0.en.html"
basePath: "/api"
tags:
- name: "datasources"
  description: "If you are running Grafana Enterprise and have Fine-grained access\
    \ control enabled, for some endpoints you would need to have relevant permissions.\
    \ Refer to specific resources to understand what permissions are required."
- name: "folders"
  description: "Folders are identified by the identifier (id) and the unique identifier\
    \ (uid).\nThe identifier (id) of a folder is an auto-incrementing numeric value\
    \ and is only unique per Grafana install.\nThe unique identifier (uid) of a folder\
    \ can be used for uniquely identify folders between multiple Grafana installs.\
    \ It’s automatically generated if not provided when creating a folder. The uid\
    \ allows having consistent URLs for accessing folders and when syncing folders\
    \ between multiple Grafana installs. This means that changing the title of a folder\
    \ will not break any bookmarked links to that folder.\nThe uid can have a maximum\
    \ length of 40 characters.\n\nThe General folder (id=0) is special and is not\
    \ part of the Folder API which means that you cannot use this API for retrieving\
    \ information about the General folder."
- name: "folder_permissions"
  description: "Permissions with `folderId=-1` are the default permissions for users\
    \ with the Viewer and Editor roles. Permissions can be set for a user, a team\
    \ or a role (Viewer or Editor). Permissions cannot be set for Admins - they always\
    \ have access to everything."
- name: "admin"
  description: "The Admin HTTP API does not currently work with an API Token. API\
    \ Tokens are currently only linked to an organization and an organization role.\
    \ They cannot be given the permission of server admin, only users can be given\
    \ that permission. So in order to use these API calls you will have to use Basic\
    \ Auth and the Grafana user must have the Grafana Admin permission. (The default\
    \ admin user is called admin and has permission to use this API.)"
- name: "legacy_alerts"
  description: "You can use the Alerting API to get information about legacy dashboard\
    \ alerts and their states but this API cannot be used to modify the alert. To\
    \ create new alerts or modify them you need to update the dashboard JSON that\
    \ contains the alerts.\nThis topic is relevant for the legacy dashboard alerts\
    \ only.\nYou can find Grafana 8 alerts API specification details [here](https://editor.swagger.io/?url=https://raw.githubusercontent.com/grafana/grafana/main/pkg/services/ngalert/api/tooling/post.json)."
- name: "legacy_alerts_notification_channels"
  description: "The identifier (id) of a notification channel is an auto-incrementing\
    \ numeric value and is only unique per Grafana install.\nThe unique identifier\
    \ (uid) of a notification channel can be used for uniquely identify a notification\
    \ channel between multiple Grafana installs. It’s automatically generated if not\
    \ provided when creating a notification channel. The uid allows having consistent\
    \ URLs for accessing notification channels and when syncing notification channels\
    \ between multiple Grafana installations, refer to alert notification channel\
    \ provisioning.\nThe uid can have a maximum length of 40 characters."
- name: "annotations"
  description: "Grafana Annotations feature released in Grafana 4.6. Annotations are\
    \ saved in the Grafana database (sqlite, mysql or postgres). Annotations can be\
    \ organization annotations that can be shown on any dashboard by configuring an\
    \ annotation data source - they are filtered by tags. Or they can be tied to a\
    \ panel on a dashboard and are then only shown on that panel."
- name: "library_elements"
  description: "The identifier (ID) of a library element is an auto-incrementing numeric\
    \ value that is unique per Grafana install.\nThe unique identifier (UID) of a\
    \ library element uniquely identifies library elements between multiple Grafana\
    \ installs. It’s automatically generated unless you specify it during library\
    \ element creation. The UID provides consistent URLs for accessing library elements\
    \ and when syncing library elements between multiple Grafana installs.\nThe maximum\
    \ length of a UID is 40 characters."
- name: "query_history"
  description: "The identifier (ID) of a query in query history is an auto-incrementing\
    \ numeric value that is unique per Grafana install.\nThe unique identifier (UID)\
    \ of a query history uniquely identifies queries in query history between multiple\
    \ Grafana installs. It’s automatically generated. The UID provides consistent\
    \ URLs for accessing queries in query history."
- name: "orgs"
  description: "The Admin Organizations HTTP API does not currently work with an API\
    \ Token. API Tokens are currently only linked to an organization and an organization\
    \ role. They cannot be given the permission of server admin, only users can be\
    \ given that permission. So in order to use these API calls you will have to use\
    \ Basic Auth and the Grafana user must have the Grafana Admin permission (The\
    \ default admin user is called `admin` and has permission to use this API)."
- name: "current_org_details"
  description: "If you are running Grafana Enterprise and have Fine-grained access\
    \ control enabled, for some endpoints you would need to have relevant permissions.\
    \ Refer to specific resources to understand what permissions are required."
- name: "teams"
  description: "This API can be used to create/update/delete Teams and to add/remove\
    \ users to Teams. All actions require that the user has the Admin role for the\
    \ organization."
- name: "datasource_permissions"
  description: "This API can be used to enable, disable, list, add and remove permissions\
    \ for a data source.\nPermissions can be set for a user or a team. Permissions\
    \ cannot be set for Admins - they always have access to everything.\nThis is only\
    \ available in Grafana Enterprise\nIf you are running Grafana Enterprise and have\
    \ Fine-grained access control enabled, for some endpoints you would need to have\
    \ relevant permissions. Refer to specific resources to understand what permissions\
    \ are required."
- name: "enterprise"
  description: "These are only available in Grafana Enterprise"
- name: "access_control"
  description: "The API can be used to create, update, get and list roles, and create\
    \ or remove built-in role assignments. To use the API, you would need to enable\
    \ fine-grained access control.\nThis only available in Grafana Enterprise.\nThe\
    \ API does not currently work with an API Token. So in order to use these API\
    \ endpoints you will have to use Basic auth."
- name: "licensing"
  description: "Licensing is only available in Grafana Enterprise. Read more about\
    \ Grafana Enterprise.\nIf you are running Grafana Enterprise and have Fine-grained\
    \ access control enabled, for some endpoints you would need to have relevant permissions.\
    \ Refer to specific resources to understand what permissions are required."
- name: "reports"
  description: "This API allows you to interact programmatically with the Reporting\
    \ feature.\nReporting is only available in Grafana Enterprise. Read more about\
    \ Grafana Enterprise.\nIf you have Fine-grained access Control enabled, for some\
    \ endpoints you would need to have relevant permissions. Refer to specific resources\
    \ to understand what permissions are required."
- name: "alertmanager"
  description: "Grafana Alerting Alertmanager-compatible endpoints"
- name: "ruler"
  description: "Grafana Alerting endpoints for managing rules"
- name: "testing"
  description: "Grafana Alerting testing endpoints"
- name: "prometheus"
  description: "Grafana Alerting Prometheus-compatible endpoints"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- basic: []
- api_key: []
paths:
  /access-control/builtin-roles:
    get:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Get all built-in role assignments."
      description: "You need to have a permission with action `roles.builtin:list`\
        \ with scope `roles:*`."
      operationId: "listBuiltinRoles"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "object"
            additionalProperties:
              type: "array"
              items:
                $ref: "#/definitions/RoleDTO"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Create a built-in role assignment."
      description: "You need to have a permission with action `roles.builtin:add`\
        \ and scope `permissions:type:delegate`. `permissions:type:delegate` scope\
        \ ensures that users can only create built-in role assignments with the roles\
        \ which have same, or a subset of permissions which the user has. For example,\
        \ if a user does not have required permissions for creating users, they won’\
        t be able to create a built-in role assignment which will allow to do that.\
        \ This is done to prevent escalation of privileges."
      operationId: "addBuiltinRole"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddBuiltInRoleCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /access-control/builtin-roles/{builtinRole}/roles/{roleUID}:
    delete:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Remove a built-in role assignment."
      description: "Deletes a built-in role assignment (for one of Viewer, Editor,\
        \ Admin, or Grafana Admin) to the role with the provided UID.\n\nYou need\
        \ to have a permission with action `roles.builtin:remove` and scope `permissions:type:delegate`.\
        \ `permissions:type:delegate` scope ensures that users can only remove built-in\
        \ role assignments with the roles which have same, or a subset of permissions\
        \ which the user has. For example, if a user does not have required permissions\
        \ for creating users, they won’t be able to remove a built-in role assignment\
        \ which allows to do that."
      operationId: "removeBuiltinRole"
      parameters:
      - name: "builtinRole"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "BuiltinRole"
      - name: "global"
        in: "query"
        description: "A flag indicating if the assignment is global or not. If set\
          \ to false, the default org ID of the authenticated user will be used from\
          \ the request to remove assignment."
        required: false
        type: "boolean"
        x-exportParamName: "Global"
        x-optionalDataType: "Bool"
      - name: "roleUID"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RoleUID"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /access-control/roles:
    get:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Get all roles."
      description: "Gets all existing roles. The response contains all global and\
        \ organization local roles, for the organization which user is signed in.\n\
        \nYou need to have a permission with action `roles:list` and scope `roles:*`."
      operationId: "getAllRoles"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RoleDTO"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Create a new custom role."
      description: "Creates a new custom role and maps given permissions to that role.\
        \ Note that roles with the same prefix as Fixed Roles can’t be created.\n\n\
        You need to have a permission with action `roles:write` and scope `permissions:type:delegate`.\
        \ `permissions:type:delegate`` scope ensures that users can only create custom\
        \ roles with the same, or a subset of permissions which the user has.\nFor\
        \ example, if a user does not have required permissions for creating users,\
        \ they won’t be able to create a custom role which allows to do that. This\
        \ is done to prevent escalation of privileges."
      operationId: "createRoleWithPermissions"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateRoleWithPermissionsCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/RoleDTO"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /access-control/roles/{roleUID}:
    get:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Get a role."
      description: "Get a role for the given UID.\n\nYou need to have a permission\
        \ with action `roles:read` and scope `roles:*`."
      operationId: "getRole"
      parameters:
      - name: "roleUID"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RoleUID"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/RoleDTO"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Update a custom role."
      description: "You need to have a permission with action `roles:write` and scope\
        \ `permissions:type:delegate`. `permissions:type:delegate`` scope ensures\
        \ that users can only create custom roles with the same, or a subset of permissions\
        \ which the user has."
      operationId: "updateRoleWithPermissions"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateRoleCommand"
        x-exportParamName: "Body"
      - name: "roleUID"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RoleUID"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/RoleDTO"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Delete a custom role."
      description: "Delete a role with the given UID, and it’s permissions. If the\
        \ role is assigned to a built-in role, the deletion operation will fail, unless\
        \ force query param is set to true, and in that case all assignments will\
        \ also be deleted.\n\nYou need to have a permission with action `roles:delete`\
        \ and scope `permissions:type:delegate`. `permissions:type:delegate` scope\
        \ ensures that users can only delete a custom role with the same, or a subset\
        \ of permissions which the user has. For example, if a user does not have\
        \ required permissions for creating users, they won’t be able to delete a\
        \ custom role which allows to do that."
      operationId: "deleteCustomRole"
      parameters:
      - name: "roleUID"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RoleUID"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /access-control/status:
    get:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Get status."
      description: "Returns an indicator to check if fine-grained access control is\
        \ enabled or not.\n\nYou need to have a permission with action `status:accesscontrol`\
        \ and scope `services:accesscontrol`."
      operationId: "getAccessControlStatus"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Status"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /access-control/teams/{teamId}/roles:
    get:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Get team roles."
      description: "You need to have a permission with action `teams.roles:list` and\
        \ scope `teams:id:<team ID>`."
      operationId: "listTeamRoles"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Add team role."
      description: "You need to have a permission with action `teams.roles:add` and\
        \ scope `permissions:type:delegate`."
      operationId: "addTeamRole"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddTeamRoleCommand"
        x-exportParamName: "Body"
      - name: "teamId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Update team role."
      description: "You need to have a permission with action `teams.roles:add` and\
        \ `teams.roles:remove` and scope `permissions:type:delegate` for each."
      operationId: "setTeamRoles"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /access-control/teams/{teamId}/roles/{roleUID}:
    delete:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Remove team role."
      description: "You need to have a permission with action `teams.roles:remove`\
        \ and scope `permissions:type:delegate`."
      operationId: "removeTeamRole"
      parameters:
      - name: "roleUID"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RoleUID"
      - name: "teamId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /access-control/users/{userId}/roles:
    get:
      tags:
      - "access_control"
      - "enterprise"
      summary: "List roles assigned to a user."
      description: "Lists the roles that have been directly assigned to a given user.\
        \ The list does not include built-in roles (Viewer, Editor, Admin or Grafana\
        \ Admin), and it does not include roles that have been inherited from a team.\n\
        \nYou need to have a permission with action `users.roles:list` and scope `users:id:<user\
        \ ID>`."
      operationId: "listUserRoles"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RoleDTO"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Add a user role assignment."
      description: "Assign a role to a specific user. For bulk updates consider Set\
        \ user role assignments.\n\nYou need to have a permission with action `users.roles:add`\
        \ and scope `permissions:type:delegate`. `permissions:type:delegate` scope\
        \ ensures that users can only assign roles which have same, or a subset of\
        \ permissions which the user has. For example, if a user does not have required\
        \ permissions for creating users, they won’t be able to assign a role which\
        \ will allow to do that. This is done to prevent escalation of privileges."
      operationId: "addUserRole"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddUserRoleCommand"
        x-exportParamName: "Body"
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Set user role assignments."
      description: "Update the user’s role assignments to match the provided set of\
        \ UIDs. This will remove any assigned roles that aren’t in the request and\
        \ add roles that are in the set but are not already assigned to the user.\n\
        If you want to add or remove a single role, consider using Add a user role\
        \ assignment or Remove a user role assignment instead.\n\nYou need to have\
        \ a permission with action `users.roles:add` and `users.roles:remove` and\
        \ scope `permissions:type:delegate` for each. `permissions:type:delegate`\
        \  scope ensures that users can only assign or unassign roles which have same,\
        \ or a subset of permissions which the user has. For example, if a user does\
        \ not have required permissions for creating users, they won’t be able to\
        \ assign or unassign a role which will allow to do that. This is done to prevent\
        \ escalation of privileges."
      operationId: "setUserRoles"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SetUserRolesCommand"
        x-exportParamName: "Body"
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /access-control/users/{userId}/roles/{roleUID}:
    delete:
      tags:
      - "access_control"
      - "enterprise"
      summary: "Remove a user role assignment."
      description: "Revoke a role from a user. For bulk updates consider Set user\
        \ role assignments.\n\nYou need to have a permission with action `users.roles:remove`\
        \ and scope `permissions:type:delegate`. `permissions:type:delegate` scope\
        \ ensures that users can only unassign roles which have same, or a subset\
        \ of permissions which the user has. For example, if a user does not have\
        \ required permissions for creating users, they won’t be able to unassign\
        \ a role which will allow to do that. This is done to prevent escalation of\
        \ privileges."
      operationId: "removeUserRole"
      parameters:
      - name: "global"
        in: "query"
        description: "A flag indicating if the assignment is global or not. If set\
          \ to false, the default org ID of the authenticated user will be used from\
          \ the request to remove assignment."
        required: false
        type: "boolean"
        x-exportParamName: "Global"
        x-optionalDataType: "Bool"
      - name: "roleUID"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RoleUID"
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/ldap-sync-status:
    get:
      tags:
      - "ldap_debug"
      summary: "Available to grafana admins."
      description: "You need to have a permission with action `ldap.status:read`."
      operationId: "getLDAPSyncStatus"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/ActiveSyncStatusDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/ldap/reload:
    post:
      tags:
      - "admin_ldap"
      summary: "Reloads the LDAP configuration."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `ldap.config:reload`."
      operationId: "reloadLDAP"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/ldap/status:
    get:
      tags:
      - "admin_ldap"
      summary: "Attempts to connect to all the configured LDAP servers and returns\
        \ information on whenever they're available or not."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `ldap.status:read`."
      operationId: "getLDAPStatus"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/ldap/sync/{user_id}:
    post:
      tags:
      - "admin_ldap"
      summary: "Enables a single Grafana user to be synchronized against LDAP."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `ldap.user:sync`."
      operationId: "syncLDAPUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/ldap/{user_name}:
    get:
      tags:
      - "admin_ldap"
      summary: "Finds an user based on a username in LDAP. This helps illustrate how\
        \ would the particular user be mapped in Grafana when synced."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `ldap.user:read`."
      operationId: "getLDAPUser"
      parameters:
      - name: "user_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "UserName"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/pause-all-alerts:
    post:
      tags:
      - "admin"
      summary: "Pause/unpause all (legacy) alerts."
      operationId: "pauseAllAlerts"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PauseAllAlertsCommand"
        x-exportParamName: "Body"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/access-control/reload:
    post:
      tags:
      - "access_control_provisioning"
      - "enterprise"
      summary: "You need to have a permission with action `provisioning:reload` with\
        \ scope `provisioners:accesscontrol`."
      operationId: "adminProvisioningReloadAccessControl"
      parameters: []
      responses:
        "202":
          description: "AcceptedResponse"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/accesscontrol/reload:
    post:
      tags:
      - "admin_provisioning"
      summary: "Reload access control provisioning configurations."
      description: "Reloads the provisioning config files for access control again.\
        \ It won’t return until the new provisioned entities are already stored in\
        \ the database. In case of dashboards, it will stop polling for changes in\
        \ dashboard files and then restart it with new configurations after returning.\n\
        If you are running Grafana Enterprise and have Fine-grained access control\
        \ enabled, you need to have a permission with action `provisioning:reload`\
        \ and scope `provisioners:accesscontrol`."
      operationId: "reloadProvisionedAccessControl"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/dashboards/reload:
    post:
      tags:
      - "admin_provisioning"
      summary: "Reload dashboard provisioning configurations."
      description: "Reloads the provisioning config files for dashboards again. It\
        \ won’t return until the new provisioned entities are already stored in the\
        \ database. In case of dashboards, it will stop polling for changes in dashboard\
        \ files and then restart it with new configurations after returning.\nIf you\
        \ are running Grafana Enterprise and have Fine-grained access control enabled,\
        \ you need to have a permission with action `provisioning:reload` and scope\
        \ `provisioners:dashboards`."
      operationId: "reloadProvisionedDashboards"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/datasources/reload:
    post:
      tags:
      - "admin_provisioning"
      summary: "Reload datasource provisioning configurations."
      description: "Reloads the provisioning config files for datasources again. It\
        \ won’t return until the new provisioned entities are already stored in the\
        \ database. In case of dashboards, it will stop polling for changes in dashboard\
        \ files and then restart it with new configurations after returning.\nIf you\
        \ are running Grafana Enterprise and have Fine-grained access control enabled,\
        \ you need to have a permission with action `provisioning:reload` and scope\
        \ `provisioners:datasources`."
      operationId: "reloadProvisionedDatasources"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/notifications/reload:
    post:
      tags:
      - "admin_provisioning"
      summary: "Reload legacy alert notifier provisioning configurations."
      description: "Reloads the provisioning config files for legacy alert notifiers\
        \ again. It won’t return until the new provisioned entities are already stored\
        \ in the database. In case of dashboards, it will stop polling for changes\
        \ in dashboard files and then restart it with new configurations after returning.\n\
        If you are running Grafana Enterprise and have Fine-grained access control\
        \ enabled, you need to have a permission with action `provisioning:reload`\
        \ and scope `provisioners:notifications`."
      operationId: "reloadProvisionedAlertNotifiers"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/plugins/reload:
    post:
      tags:
      - "admin_provisioning"
      summary: "Reload plugin provisioning configurations."
      description: "Reloads the provisioning config files for plugins again. It won’\
        t return until the new provisioned entities are already stored in the database.\
        \ In case of dashboards, it will stop polling for changes in dashboard files\
        \ and then restart it with new configurations after returning.\nIf you are\
        \ running Grafana Enterprise and have Fine-grained access control enabled,\
        \ you need to have a permission with action `provisioning:reload` and scope\
        \ `provisioners:plugin`."
      operationId: "reloadProvisionedPlugins"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/settings:
    get:
      tags:
      - "admin"
      summary: "Fetch settings."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `settings:read`\
        \ and scopes: `settings:*`, `settings:auth.saml:` and `settings:auth.saml:enabled`\
        \ (property level)."
      operationId: "getSettings"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SettingsBag"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/stats:
    get:
      tags:
      - "admin"
      summary: "Fetch Grafana Stats."
      description: "Only works with Basic Authentication (username and password).\
        \ See introduction for an explanation.\nIf you are running Grafana Enterprise\
        \ and have Fine-grained access control enabled, you need to have a permission\
        \ with action `server:stats:read`."
      operationId: "getStats"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AdminStats"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users:
    post:
      tags:
      - "admin_users"
      summary: "Create new user."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users:create`.\n\
        Note that OrgId is an optional parameter that can be used to assign a new\
        \ user to a different organization when `auto_assign_org` is set to `true`."
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AdminCreateUserForm"
        x-exportParamName: "Body"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserIdDTO"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: "PreconditionFailedError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}:
    delete:
      tags:
      - "admin_users"
      summary: "Delete global User."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users:delete`\
        \ and scope `global.users:*`."
      operationId: "deleteUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/auth-tokens:
    get:
      tags:
      - "admin_users"
      summary: "Return a list of all auth tokens (devices) that the user currently\
        \ have logged in from."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users.authtoken:list`\
        \ and scope `global.users:*`."
      operationId: "getAuthTokens"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserToken"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/disable:
    post:
      tags:
      - "admin_users"
      summary: "Disable user."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users:disable`\
        \ and scope `global.users:1` (userIDScope)."
      operationId: "disableUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/enable:
    post:
      tags:
      - "admin_users"
      summary: "Enable user."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users:enable`\
        \ and scope `global.users:1` (userIDScope)."
      operationId: "enableUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/logout:
    post:
      tags:
      - "admin_users"
      summary: "Logout user revokes all auth tokens (devices) for the user. User of\
        \ issued auth tokens (devices) will no longer be logged in and will be required\
        \ to authenticate again upon next activity."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users.logout`\
        \ and scope `global.users:*`."
      operationId: "logoutUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/password:
    put:
      tags:
      - "admin_users"
      summary: "Set password for user."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users.password:update`\
        \ and scope `global.users:*`."
      operationId: "setPassword"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AdminUpdateUserPasswordForm"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/permissions:
    put:
      tags:
      - "admin_users"
      summary: "Set permissions for user."
      description: "Only works with Basic Authentication (username and password).\
        \ See introduction for an explanation.\nIf you are running Grafana Enterprise\
        \ and have Fine-grained access control enabled, you need to have a permission\
        \ with action `users.permissions:update` and scope `global.users:*`."
      operationId: "setPermissions"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AdminUpdateUserPermissionsForm"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/quotas:
    get:
      tags:
      - "admin_users"
      summary: "Fetch user quota."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users.quotas:list`\
        \ and scope `global.users:1` (userIDScope)."
      operationId: "getUserQuota"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserQuotaDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/quotas/{quota_target}:
    put:
      tags:
      - "admin_users"
      summary: "Update user quota."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users.quotas:update`\
        \ and scope `global.users:1` (userIDScope)."
      operationId: "updateUserQuota"
      parameters:
      - name: "quota_target"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "QuotaTarget"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateUserQuotaCmd"
        x-exportParamName: "Body"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/revoke-auth-token:
    post:
      tags:
      - "admin_users"
      summary: "Revoke auth token for user."
      description: "Revokes the given auth token (device) for the user. User of issued\
        \ auth token (device) will no longer be logged in and will be required to\
        \ authenticate again upon next activity.\nIf you are running Grafana Enterprise\
        \ and have Fine-grained access control enabled, you need to have a permission\
        \ with action `users.authtoken:update` and scope `global.users:*`."
      operationId: "revokeAuthToken"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RevokeAuthTokenCmd"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alert-notifications:
    get:
      tags:
      - "legacy_alerts_notification_channels"
      summary: "Get all notification channels."
      description: "Returns all notification channels that the authenticated user\
        \ has permission to view."
      operationId: "getAlertNotificationChannels"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "legacy_alerts_notification_channels"
      summary: "Create notification channel."
      description: "You can find the full list of [supported notifiers](https://grafana.com/docs/grafana/latest/alerting/old-alerting/notifications/#list-of-supported-notifiers)\
        \ on the alert notifiers page."
      operationId: "createAlertNotificationChannel"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateAlertNotificationCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alert-notifications/lookup:
    get:
      tags:
      - "legacy_alerts_notification_channels"
      summary: "Get all notification channels (lookup)"
      description: "Returns all notification channels, but with less detailed information.\
        \ Accessible by any authenticated user and is mainly used by providing alert\
        \ notification channels in Grafana UI when configuring alert rule."
      operationId: "lookupAlertNotificationChannels"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AlertNotificationLookup"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alert-notifications/test:
    post:
      tags:
      - "legacy_alerts_notification_channels"
      summary: "Test notification channel."
      description: "Sends a test notification to the channel."
      operationId: "notificationChannelTest"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NotificationTestCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: ""
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alert-notifications/uid/{notification_channel_uid}:
    get:
      tags:
      - "legacy_alerts_notification_channels"
      summary: "Get notification channel by UID"
      description: "Returns the notification channel given the notification channel\
        \ UID."
      operationId: "getAlertNotificationChannelByUID"
      parameters:
      - name: "notification_channel_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NotificationChannelUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "legacy_alerts_notification_channels"
      summary: "Update notification channel by UID."
      description: "Updates an existing notification channel identified by uid."
      operationId: "updateAlertNotificationChannelByUID"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateAlertNotificationWithUidCommand"
        x-exportParamName: "Body"
      - name: "notification_channel_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NotificationChannelUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "legacy_alerts_notification_channels"
      summary: "Delete alert notification by UID."
      description: "Deletes an existing notification channel identified by UID."
      operationId: "deleteAlertNotificationChannelByUID"
      parameters:
      - name: "notification_channel_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NotificationChannelUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alert-notifications/{notification_channel_id}:
    get:
      tags:
      - "legacy_alerts_notification_channels"
      summary: "Get notification channel by ID."
      description: "Returns the notification channel given the notification channel\
        \ ID."
      operationId: "getAlertNotificationChannelByID"
      parameters:
      - name: "notification_channel_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "NotificationChannelId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "legacy_alerts_notification_channels"
      summary: "Update notification channel by ID."
      description: "Updates an existing notification channel identified by ID."
      operationId: "updateAlertNotificationChannel"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateAlertNotificationCommand"
        x-exportParamName: "Body"
      - name: "notification_channel_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "NotificationChannelId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "legacy_alerts_notification_channels"
      summary: "Delete alert notification by ID."
      description: "Deletes an existing notification channel identified by ID."
      operationId: "deleteAlertNotificationChannel"
      parameters:
      - name: "notification_channel_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "NotificationChannelId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alerts:
    get:
      tags:
      - "legacy_alerts"
      summary: "Get legacy alerts."
      operationId: "getAlerts"
      parameters:
      - name: "dashboardId"
        in: "query"
        description: "Limit response to alerts in specified dashboard(s). You can\
          \ specify multiple dashboards."
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "DashboardId"
      - name: "panelId"
        in: "query"
        description: "Limit response to alert for a specified panel on a dashboard."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "PanelId"
        x-optionalDataType: "Int64"
      - name: "query"
        in: "query"
        description: "Limit response to alerts having a name like this value."
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "state"
        in: "query"
        description: "Return alerts with one or more of the following alert states"
        required: false
        type: "string"
        enum:
        - "all"
        - "no_data"
        - "paused"
        - "alerting"
        - "ok"
        - "pending"
        - "unknown"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limit response to X number of alerts."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "folderId"
        in: "query"
        description: "Limit response to alerts of dashboards in specified folder(s).\
          \ You can specify multiple folders"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "FolderId"
      - name: "dashboardQuery"
        in: "query"
        description: "Limit response to alerts having a dashboard name like this value./\
          \ Limit response to alerts having a dashboard name like this value."
        required: false
        type: "string"
        x-exportParamName: "DashboardQuery"
        x-optionalDataType: "String"
      - name: "dashboardTag"
        in: "query"
        description: "Limit response to alerts of dashboards with specified tags.\
          \ To do an “AND” filtering with multiple tags, specify the tags parameter\
          \ multiple times"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "DashboardTag"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AlertListItemDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alerts/states-for-dashboard:
    get:
      tags:
      - "legacy_alerts"
      summary: "Get alert states for a dashboard."
      operationId: "getDashboardStates"
      parameters:
      - name: "dashboardId"
        in: "query"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AlertStateInfoDTO"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alerts/test:
    post:
      tags:
      - "legacy_alerts"
      summary: "Test alert."
      operationId: "testAlert"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AlertTestCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertTestResult"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alerts/{alert_id}:
    get:
      tags:
      - "legacy_alerts"
      summary: "Get alert by ID."
      description: "“evalMatches” data in the response is cached in the db when and\
        \ only when the state of the alert changes (e.g. transitioning from “ok” to\
        \ “alerting” state).\nIf data from one server triggers the alert first and,\
        \ before that server is seen leaving alerting state, a second server also\
        \ enters a state that would trigger the alert, the second server will not\
        \ be visible in “evalMatches” data."
      operationId: "getAlertByID"
      parameters:
      - name: "alert_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AlertId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Alert"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alerts/{alert_id}/pause:
    post:
      tags:
      - "legacy_alerts"
      summary: "Pause/unpause alert by id."
      operationId: "pauseAlert"
      parameters:
      - name: "alert_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AlertId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PauseAlertCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /annotations:
    get:
      tags:
      - "annotations"
      summary: "Find Annotations."
      description: "Starting in Grafana v6.4 regions annotations are now returned\
        \ in one entity that now includes the timeEnd property."
      operationId: "getAnnotations"
      parameters:
      - name: "from"
        in: "query"
        description: "Find annotations created after specific epoch datetime in milliseconds."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "From"
        x-optionalDataType: "Int64"
      - name: "to"
        in: "query"
        description: "Find annotations created before specific epoch datetime in milliseconds."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "To"
        x-optionalDataType: "Int64"
      - name: "userId"
        in: "query"
        description: "Limit response to annotations created by specific user."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
        x-optionalDataType: "Int64"
      - name: "alertId"
        in: "query"
        description: "Find annotations for a specified alert."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "AlertId"
        x-optionalDataType: "Int64"
      - name: "dashboardId"
        in: "query"
        description: "Find annotations that are scoped to a specific dashboard"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardId"
        x-optionalDataType: "Int64"
      - name: "panelId"
        in: "query"
        description: "Find annotations that are scoped to a specific panel"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "PanelId"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "Max limit for results returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "tags"
        in: "query"
        description: "Use this to filter organization annotations. Organization annotations\
          \ are annotations from an annotation data source that are not connected\
          \ specifically to a dashboard or panel. You can filter by multiple tags."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Tags"
      - name: "type"
        in: "query"
        description: "Return alerts or user created annotations"
        required: false
        type: "string"
        enum:
        - "alert"
        - "annotation"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "matchAny"
        in: "query"
        description: "Match any or all tags"
        required: false
        type: "boolean"
        x-exportParamName: "MatchAny"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ItemDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "annotations"
      summary: "Create Annotation."
      description: "Creates an annotation in the Grafana database. The dashboardId\
        \ and panelId fields are optional. If they are not specified then an organization\
        \ annotation is created and can be queried in any dashboard that adds the\
        \ Grafana annotations data source. When creating a region annotation include\
        \ the timeEnd property.\nThe format for `time` and `timeEnd` should be epoch\
        \ numbers in millisecond resolution.\nThe response for this HTTP request is\
        \ slightly different in versions prior to v6.4. In prior versions you would\
        \ also get an endId if you where creating a region. But in 6.4 regions are\
        \ represented using a single event with time and timeEnd properties."
      operationId: "createAnnotation"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PostAnnotationsCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_3"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /annotations/graphite:
    post:
      tags:
      - "annotations"
      summary: "Create Annotation in Graphite format."
      description: "Creates an annotation by using Graphite-compatible event format.\
        \ The `when` and `data` fields are optional. If `when` is not specified then\
        \ the current time will be used as annotation’s timestamp. The `tags` field\
        \ can also be in prior to Graphite `0.10.0` format (string with multiple tags\
        \ being separated by a space)."
      operationId: "createGraphiteAnnotation"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PostGraphiteAnnotationsCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_3"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /annotations/mass-delete:
    post:
      tags:
      - "annotations"
      summary: "Delete multiple annotations."
      operationId: "massDeleteAnnotations"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MassDeleteAnnotationsCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /annotations/tags:
    get:
      tags:
      - "annotations"
      summary: "Find Annotations Tags."
      description: "Find all the event tags created in the annotations."
      operationId: "getAnnotationTags"
      parameters:
      - name: "tag"
        in: "query"
        description: "Tag is a string that you can use to filter tags."
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Max limit for results returned."
        required: false
        type: "string"
        default: "100"
        x-exportParamName: "Limit"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/GetAnnotationTagsResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /annotations/{annotation_id}:
    get:
      tags:
      - "annotations"
      summary: "Get Annotation by Id."
      operationId: "getAnnotation"
      parameters:
      - name: "annotation_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AnnotationId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/ItemDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "annotations"
      summary: "Update Annotation."
      description: "Updates all properties of an annotation that matches the specified\
        \ id. To only update certain property, consider using the Patch Annotation\
        \ operation."
      operationId: "updateAnnotation"
      parameters:
      - name: "annotation_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AnnotationId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateAnnotationsCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "annotations"
      summary: "Delete Annotation By ID."
      description: "Deletes the annotation that matches the specified ID."
      operationId: "deleteAnnotation"
      parameters:
      - name: "annotation_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AnnotationId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "annotations"
      summary: "Patch Annotation"
      description: "Updates one or more properties of an annotation that matches the\
        \ specified ID.\nThis operation currently supports updating of the `text`,\
        \ `tags`, `time` and `timeEnd` properties.\nThis is available in Grafana 6.0.0-beta2\
        \ and above."
      operationId: "patchAnnotation"
      parameters:
      - name: "annotation_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AnnotationId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PatchAnnotationsCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /auth/keys:
    get:
      tags:
      - "api_keys"
      summary: "Get auth keys."
      description: "Will return auth keys."
      operationId: "getAPIkeys"
      parameters:
      - name: "includeExpired"
        in: "query"
        description: "Show expired keys"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IncludeExpired"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ApiKeyDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "api_keys"
      summary: "Creates an API key."
      description: "Will return details of the created API key"
      operationId: "addAPIkey"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/AddApiKeyCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/NewApiKeyResult"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /auth/keys/{id}:
    delete:
      tags:
      - "api_keys"
      summary: "Delete API key."
      operationId: "deleteAPIkey"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboard/snapshots:
    get:
      tags:
      - "snapshots"
      summary: "List snapshots."
      operationId: "getSnapshots"
      parameters:
      - name: "query"
        in: "query"
        description: "Search Query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned results"
        required: false
        type: "integer"
        default: 1000
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardSnapshotDTO"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/calculate-diff:
    post:
      tags:
      - "dashboards"
      summary: "Perform diff on two dashboards."
      operationId: "calcDashboardDiff"
      produces:
      - "application/json"
      - "text/html"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Calculate dashboard diff response."
          schema:
            type: "array"
            items:
              type: "integer"
              format: "uint8"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/db:
    post:
      tags:
      - "dashboards"
      summary: "Create / Update dashboard"
      description: "Creates a new dashboard or updates an existing dashboard."
      operationId: "postDashboard"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SaveDashboardCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Create/update dashboard response."
          schema:
            $ref: "#/definitions/inline_response_200_4"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: "PreconditionFailedError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/home:
    get:
      tags:
      - "dashboards"
      summary: "Get home dashboard."
      operationId: "getHomeDashboard"
      parameters: []
      responses:
        "200":
          description: "Home dashboard response."
          schema:
            $ref: "#/definitions/GetHomeDashboardResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/id/{DashboardID}/permissions:
    get:
      tags:
      - "dashboard_permissions"
      summary: "Gets all existing permissions for the given dashboard."
      description: "Please refer to [updated API](#/dashboard_permissions/getDashboardPermissionsWithUid)\
        \ instead"
      operationId: "getDashboardPermissions"
      parameters:
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      deprecated: true
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardAclInfoDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "dashboard_permissions"
      summary: "Updates permissions for a dashboard."
      description: "Please refer to [updated API](#/dashboard_permissions/postDashboardPermissionsWithUid)\
        \ instead\n\nThis operation will remove existing permissions if they’re not\
        \ included in the request."
      operationId: "postDashboardPermissions"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UpdateDashboardAclCommand"
        x-exportParamName: "Body"
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      deprecated: true
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/id/{DashboardID}/restore:
    post:
      tags:
      - "dashboard_versions"
      summary: "Restore a dashboard to a given dashboard version."
      description: "Please refer to [updated API](#/dashboard_versions/restoreDashboardVersionByUID)\
        \ instead"
      operationId: "restoreDashboardVersion"
      parameters:
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/RestoreDashboardVersionCommand"
        x-exportParamName: "Body"
      deprecated: true
      responses:
        "200":
          description: "Create/update dashboard response."
          schema:
            $ref: "#/definitions/inline_response_200_4"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/id/{DashboardID}/versions:
    get:
      tags:
      - "dashboard_versions"
      summary: "Gets all existing versions for the dashboard."
      description: "Please refer to [updated API](#/dashboard_versions/getDashboardVersionsByUID)\
        \ instead"
      operationId: "getDashboardVersions"
      parameters:
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      - name: "limit"
        in: "query"
        description: "Maximum number of results to return"
        required: false
        type: "integer"
        default: 0
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "start"
        in: "query"
        description: "Version to start from when returning queries"
        required: false
        type: "integer"
        default: 0
        format: "int64"
        x-exportParamName: "Start"
        x-optionalDataType: "Int64"
      deprecated: true
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardVersionDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/id/{DashboardID}/versions/{DashboardVersionID}:
    get:
      tags:
      - "dashboard_versions"
      summary: "Get a specific dashboard version."
      description: "Please refer to [updated API](#/dashboard_versions/getDashboardVersionByUID)\
        \ instead"
      operationId: "getDashboardVersion"
      parameters:
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      - name: "DashboardVersionID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardVersionID"
      deprecated: true
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DashboardVersionMeta"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/import:
    post:
      tags:
      - "dashboards"
      summary: "Import dashboard."
      operationId: "importDashboard"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/ImportDashboardRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/ImportDashboardResponse"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: "PreconditionFailedError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/tags:
    get:
      tags:
      - "dashboards"
      summary: "Get all dashboards tags of an organisation."
      operationId: "getDashboardTags"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardTagCloudItem"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/trim:
    post:
      tags:
      - "dashboards"
      summary: "Trim defaults from dashboard."
      operationId: "trimDashboard"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/TrimDashboardCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Trimmed dashboard response."
          schema:
            $ref: "#/definitions/TrimDashboardFullWithMeta"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/uid/{uid}:
    get:
      tags:
      - "dashboards"
      summary: "Get dashboard by uid."
      description: "Will return the dashboard given the dashboard unique identifier\
        \ (uid)."
      operationId: "getDashboardByUID"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DashboardFullWithMeta"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "dashboards"
      summary: "Delete dashboard by uid."
      description: "Will delete the dashboard given the specified unique identifier\
        \ (uid)."
      operationId: "deleteDashboardByUID"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_5"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/uid/{uid}/permissions:
    get:
      tags:
      - "dashboard_permissions"
      summary: "Gets all existing permissions for the given dashboard."
      operationId: "getDashboardPermissionsWithUid"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardAclInfoDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "dashboard_permissions"
      summary: "Updates permissions for a dashboard."
      description: "This operation will remove existing permissions if they’re not\
        \ included in the request."
      operationId: "postDashboardPermissionsWithUid"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UpdateDashboardAclCommand"
        x-exportParamName: "Body"
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/uid/{uid}/restore:
    post:
      tags:
      - "dashboard_versions"
      summary: "Restore a dashboard to a given dashboard version using UID."
      operationId: "restoreDashboardVersionByUID"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/RestoreDashboardVersionCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Create/update dashboard response."
          schema:
            $ref: "#/definitions/inline_response_200_4"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/uid/{uid}/versions:
    get:
      tags:
      - "dashboard_versions"
      summary: "Gets all existing versions for the dashboard using UID."
      operationId: "getDashboardVersionsByUID"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      - name: "limit"
        in: "query"
        description: "Maximum number of results to return"
        required: false
        type: "integer"
        default: 0
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "start"
        in: "query"
        description: "Version to start from when returning queries"
        required: false
        type: "integer"
        default: 0
        format: "int64"
        x-exportParamName: "Start"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardVersionDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/uid/{uid}/versions/{DashboardVersionID}:
    get:
      tags:
      - "dashboard_versions"
      summary: "Get a specific dashboard version using UID."
      operationId: "getDashboardVersionByUID"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      - name: "DashboardVersionID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardVersionID"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DashboardVersionMeta"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources:
    get:
      tags:
      - "datasources"
      summary: "Get all data sources."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:read`\
        \ and scope: `datasources:*`."
      operationId: "getDatasources"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DataSourceList"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "datasources"
      summary: "Create a data source."
      description: "By defining `password` and `basicAuthPassword` under secureJsonData\
        \ property\nGrafana encrypts them securely as an encrypted blob in the database.\n\
        The response then lists the encrypted fields under secureJsonFields.\n\nIf\
        \ you are running Grafana Enterprise and have Fine-grained access control\
        \ enabled\nyou need to have a permission with action: `datasources:create`"
      operationId: "addDatasource"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/AddDataSourceCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_6"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/id/{name}:
    get:
      tags:
      - "datasources"
      summary: "Get data source Id by Name."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:read`\
        \ and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource`\
        \ (single data source)."
      operationId: "getDatasourceIdByName"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_7"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/name/{name}:
    get:
      tags:
      - "datasources"
      summary: "Get a single data source by Name."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:read`\
        \ and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource`\
        \ (single data source)."
      operationId: "getDatasourceByName"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DataSource"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "datasources"
      summary: "Delete an existing data source by name."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:delete`\
        \ and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource`\
        \ (single data source)."
      operationId: "deleteDatasourceByName"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_8"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/proxy/uid/{uid}/{datasource_proxy_route}:
    get:
      tags:
      - "datasources"
      summary: "Data source proxy GET calls."
      description: "Proxies all calls to the actual data source."
      operationId: "datasourceProxyGETByUIDcalls"
      parameters:
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceProxyRoute"
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: ""
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "datasources"
      summary: "Data source proxy POST calls."
      description: "Proxies all calls to the actual data source. The data source should\
        \ support POST methods for the specific path and role as defined"
      operationId: "datasourceProxyPOSTByUIDcalls"
      parameters:
      - in: "body"
        name: "DatasourceProxyParam"
        required: true
        schema:
          type: "object"
        x-exportParamName: "DatasourceProxyParam"
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceProxyRoute"
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      responses:
        "201":
          description: ""
        "202":
          description: ""
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "datasources"
      summary: "Data source proxy DELETE calls."
      description: "Proxies all calls to the actual data source."
      operationId: "datasourceProxyDELETEByUIDcalls"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceProxyRoute"
      responses:
        "202":
          description: ""
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/proxy/{id}/{datasource_proxy_route}:
    get:
      tags:
      - "datasources"
      summary: "Data source proxy GET calls."
      description: "Proxies all calls to the actual data source.\n\nPlease refer to\
        \ [updated API](#/datasources/datasourceProxyGETByUIDcalls) instead"
      operationId: "datasourceProxyGETcalls"
      parameters:
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceProxyRoute"
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: true
      responses:
        "200":
          description: ""
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "datasources"
      summary: "Data source proxy POST calls."
      description: "Proxies all calls to the actual data source. The data source should\
        \ support POST methods for the specific path and role as defined\n\nPlease\
        \ refer to [updated API](#/datasources/datasourceProxyPOSTByUIDcalls) instead"
      operationId: "datasourceProxyPOSTcalls"
      parameters:
      - in: "body"
        name: "DatasourceProxyParam"
        required: true
        schema:
          type: "object"
        x-exportParamName: "DatasourceProxyParam"
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceProxyRoute"
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: true
      responses:
        "201":
          description: ""
        "202":
          description: ""
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "datasources"
      summary: "Data source proxy DELETE calls."
      description: "Proxies all calls to the actual data source.\n\nPlease refer to\
        \ [updated API](#/datasources/datasourceProxyDELETEByUIDcalls) instead"
      operationId: "datasourceProxyDELETEcalls"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceProxyRoute"
      deprecated: true
      responses:
        "202":
          description: ""
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/uid/{uid}:
    get:
      tags:
      - "datasources"
      summary: "Get a single data source by UID."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:read`\
        \ and scopes: `datasources:*`, `datasources:uid:*` and `datasources:uid:kLtEtcRGk`\
        \ (single data source)."
      operationId: "getDatasourceByUID"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DataSource"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "datasources"
      summary: "Update an existing data source."
      description: "Similar to creating a data source, `password` and `basicAuthPassword`\
        \ should be defined under\nsecureJsonData in order to be stored securely as\
        \ an encrypted blob in the database. Then, the\nencrypted fields are listed\
        \ under secureJsonFields section in the response.\n\nIf you are running Grafana\
        \ Enterprise and have Fine-grained access control enabled\nyou need to have\
        \ a permission with action: `datasources:write` and scopes: `datasources:*`,\
        \ `datasources:uid:*` and `datasources:uid:1` (single data source)."
      operationId: "updateDatasourceByUID"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UpdateDataSourceCommand"
        x-exportParamName: "Body"
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_6"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "datasources"
      summary: "Delete an existing data source by UID."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:delete`\
        \ and scopes: `datasources:*`, `datasources:uid:*` and `datasources:uid:kLtEtcRGk`\
        \ (single data source)."
      operationId: "deleteDatasourceByUID"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/uid/{uid}/health:
    get:
      tags:
      - "datasources"
      summary: "Check data source health by Id."
      operationId: "checkDatasourceHealth"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/uid/{uid}/resources/{datasource_proxy_route}:
    get:
      tags:
      - "datasources"
      summary: "Fetch data source resources."
      operationId: "fetchDatasourceResources"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceProxyRoute"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/{datasourceId}/disable-permissions:
    post:
      tags:
      - "datasource_permissions"
      - "enterprise"
      summary: "Disable permissions for a data source."
      description: "Disables permissions for the data source with the given id. All\
        \ existing permissions will be removed and anyone will be able to query the\
        \ data source.\n\nYou need to have a permission with action `datasources.permissions:toggle`\
        \ and scopes `datasources:*`, `datasources:id:*`, `datasources:id:1` (single\
        \ data source)."
      operationId: "disablePermissions"
      parameters:
      - name: "datasourceId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_6"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/{datasourceId}/enable-permissions:
    post:
      tags:
      - "datasource_permissions"
      - "enterprise"
      summary: "Enable permissions for a data source."
      description: "Enables permissions for the data source with the given id.\nNo\
        \ one except Org Admins will be able to query the data source until permissions\
        \ have been added\nwhich permit certain users or teams to query the data source.\n\
        \nYou need to have a permission with action `datasources.permissions:toggle`\
        \ and scopes `datasources:*`, `datasources:id:*`, `datasources:id:1` (single\
        \ data source)."
      operationId: "enablePermissions"
      parameters:
      - name: "datasourceId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_6"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/{datasourceId}/permissions:
    get:
      tags:
      - "datasource_permissions"
      - "enterprise"
      summary: "Get permissions for a data source."
      description: "Gets all existing permissions for the data source with the given\
        \ id.\n\nYou need to have a permission with action `datasources.permissions:read`\
        \ and scopes `datasources:*`, `datasources:id:*`, `datasources:id:1` (single\
        \ data source)."
      operationId: "getPermissions"
      parameters:
      - name: "datasourceId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AddPermissionDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/{datasourceId}/permissions/{permissionId}:
    delete:
      tags:
      - "datasource_permissions"
      - "enterprise"
      summary: "Remove permission for a data source."
      description: "Removes the permission with the given permissionId for the data\
        \ source with the given id.\n\nYou need to have a permission with action `datasources.permissions:delete`\
        \ and scopes `datasources:*`, `datasources:id:*`, `datasources:id:1` (single\
        \ data source)."
      operationId: "deletePermissions"
      parameters:
      - name: "datasourceId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceId"
      - name: "permissionId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PermissionId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/{id}:
    get:
      tags:
      - "datasources"
      summary: "Get a single data source by Id."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:read`\
        \ and scopes: `datasources:*`, `datasources:id:*` and `datasources:id:1` (single\
        \ data source).\n\nPlease refer to [updated API](#/datasources/getDatasourceByUID)\
        \ instead"
      operationId: "getDatasourceByID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: true
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DataSource"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "datasources"
      summary: "Update an existing data source by its sequential ID."
      description: "Similar to creating a data source, `password` and `basicAuthPassword`\
        \ should be defined under\nsecureJsonData in order to be stored securely as\
        \ an encrypted blob in the database. Then, the\nencrypted fields are listed\
        \ under secureJsonFields section in the response.\n\nIf you are running Grafana\
        \ Enterprise and have Fine-grained access control enabled\nyou need to have\
        \ a permission with action: `datasources:write` and scopes: `datasources:*`,\
        \ `datasources:id:*` and `datasources:id:1` (single data source).\n\nPlease\
        \ refer to [updated API](#/datasources/updateDatasourceByUID) instead"
      operationId: "updateDatasourceByID"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UpdateDataSourceCommand"
        x-exportParamName: "Body"
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: true
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_6"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "datasources"
      summary: "Delete an existing data source by id."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:delete`\
        \ and scopes: `datasources:*`, `datasources:id:*` and `datasources:id:1` (single\
        \ data source).\n\nPlease refer to [updated API](#/datasources/deleteDatasourceByUID)\
        \ instead"
      operationId: "deleteDatasourceByID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: true
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/{id}/health:
    get:
      tags:
      - "datasources"
      summary: "Check data source health by Id."
      description: "Please refer to [updated API](#/datasources/checkDatasourceHealth)\
        \ instead"
      operationId: "checkDatasourceHealthByID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: true
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/{id}/resources/{datasource_proxy_route}:
    get:
      tags:
      - "datasources"
      summary: "Fetch data source resources by Id."
      description: "Please refer to [updated API](#/datasources/fetchDatasourceResources)\
        \ instead"
      operationId: "fetchDatasourceResourcesByID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DatasourceProxyRoute"
      deprecated: true
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /ds/query:
    post:
      tags:
      - "ds"
      summary: "Query metrics with expressions"
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:query`."
      operationId: "queryMetricsWithExpressions"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MetricRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/QueryDataResponse"
        "207":
          description: ""
          schema:
            $ref: "#/definitions/QueryDataResponse"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /folders:
    get:
      tags:
      - "folders"
      summary: "Get all folders."
      description: "Returns all folders that the authenticated user has permission\
        \ to view."
      operationId: "getFolders"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the maximum number of folders to return"
        required: false
        type: "integer"
        default: 1000
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "Page index for starting fetching folders"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FolderSearchHit"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "folders"
      summary: "Create folder."
      operationId: "createFolder"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateFolderCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Folder"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /folders/id/{folder_id}:
    get:
      tags:
      - "folders"
      summary: "Get folder by id."
      description: "Returns the folder identified by id."
      operationId: "getFolderByID"
      parameters:
      - name: "folder_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "FolderId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Folder"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /folders/{folder_uid}:
    get:
      tags:
      - "folders"
      summary: "Get folder by uid."
      operationId: "getFolderByUID"
      parameters:
      - name: "folder_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FolderUid"
      responses:
        "200":
          description: ""
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "folders"
      summary: "Update folder."
      operationId: "updateFolder"
      parameters:
      - name: "folder_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FolderUid"
      - in: "body"
        name: "body"
        description: "To change the unique identifier (uid), provide another one.\n\
          To overwrite an existing folder with newer version, set `overwrite` to `true`.\n\
          Provide the current version to safelly update the folder: if the provided\
          \ version differs from the stored one the request will fail, unless `overwrite`\
          \ is `true`."
        required: true
        schema:
          $ref: "#/definitions/UpdateFolderCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Folder"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "folders"
      summary: "Delete folder."
      description: "Deletes an existing folder identified by UID along with all dashboards\
        \ (and their alerts) stored in the folder. This operation cannot be reverted."
      operationId: "deleteFolder"
      parameters:
      - name: "folder_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FolderUid"
      - name: "forceDeleteRules"
        in: "query"
        description: "If `true` any Grafana 8 Alerts under this folder will be deleted.\n\
          Set to `false` so that the request will fail if the folder contains any\
          \ Grafana 8 Alerts."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceDeleteRules"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_9"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /folders/{folder_uid}/permissions:
    get:
      tags:
      - "folder_permissions"
      summary: "Gets all existing permissions for the folder with the given `uid`."
      operationId: "getFolderPermissions"
      parameters:
      - name: "folder_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FolderUid"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardAclInfoDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "folder_permissions"
      summary: "Updates permissions for a folder. This operation will remove existing\
        \ permissions if they’re not included in the request."
      operationId: "updateFolderPermissions"
      parameters:
      - name: "folder_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FolderUid"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UpdateDashboardAclCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /library-elements:
    get:
      tags:
      - "library_elements"
      summary: "Get all library elements."
      description: "Returns a list of all library elements the authenticated user\
        \ has permission to view.\nUse the `perPage` query parameter to control the\
        \ maximum number of library elements returned; the default limit is `100`.\n\
        You can also use the `page` query parameter to fetch library elements from\
        \ any page other than the first one."
      operationId: "getLibraryElements"
      parameters:
      - name: "searchString"
        in: "query"
        description: "Part of the name or description searched for."
        required: false
        type: "string"
        x-exportParamName: "SearchString"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        description: "Kind of element to search for."
        required: false
        type: "integer"
        format: "int64"
        enum:
        - 1
        - 2
        x-exportParamName: "Kind"
        x-optionalDataType: "Int64"
      - name: "sortDirection"
        in: "query"
        description: "Sort order of elements."
        required: false
        type: "string"
        enum:
        - "alpha-asc"
        - "alpha-desc"
        x-exportParamName: "SortDirection"
        x-optionalDataType: "String"
      - name: "typeFilter"
        in: "query"
        description: "A comma separated list of types to filter the elements by"
        required: false
        type: "string"
        x-exportParamName: "TypeFilter"
        x-optionalDataType: "String"
      - name: "excludeUid"
        in: "query"
        description: "Element UID to exclude from search results."
        required: false
        type: "string"
        x-exportParamName: "ExcludeUid"
        x-optionalDataType: "String"
      - name: "folderFilter"
        in: "query"
        description: "A comma separated list of folder ID(s) to filter the elements\
          \ by."
        required: false
        type: "string"
        x-exportParamName: "FolderFilter"
        x-optionalDataType: "String"
      - name: "perPage"
        in: "query"
        description: "The number of results per page."
        required: false
        type: "integer"
        default: 100
        format: "int64"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "The page for a set of records, given that only perPage records\
          \ are returned at a time. Numbering starts at 1."
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementSearchResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "library_elements"
      summary: "Create library element."
      description: "Creates a new library element."
      operationId: "createLibraryElement"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateLibraryElementCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementResponse"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /library-elements/name/{library_element_name}:
    get:
      tags:
      - "library_elements"
      summary: "Get library element by name."
      description: "Returns a library element with the given name."
      operationId: "getLibraryElementByName"
      parameters:
      - name: "library_element_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LibraryElementName"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /library-elements/{library_element_uid}:
    get:
      tags:
      - "library_elements"
      summary: "Get library element by UID."
      description: "Returns a library element with the given UID."
      operationId: "getLibraryElementByUID"
      parameters:
      - name: "library_element_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LibraryElementUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "library_elements"
      summary: "Delete library element."
      description: "Deletes an existing library element as specified by the UID. This\
        \ operation cannot be reverted.\nYou cannot delete a library element that\
        \ is connected. This operation cannot be reverted."
      operationId: "deleteLibraryElementByUID"
      parameters:
      - name: "library_element_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LibraryElementUid"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "library_elements"
      summary: "Update library element."
      description: "Updates an existing library element identified by uid."
      operationId: "updateLibraryElement"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PatchLibraryElementCommand"
        x-exportParamName: "Body"
      - name: "library_element_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LibraryElementUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementResponse"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: "PreconditionFailedError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /library-elements/{library_element_uid}/connections/:
    get:
      tags:
      - "library_elements"
      summary: "Get library element connections."
      description: "Returns a list of connections for a library element based on the\
        \ UID specified."
      operationId: "getLibraryElementConnections"
      parameters:
      - name: "library_element_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LibraryElementUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementConnectionsResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /licensing/check:
    get:
      tags:
      - "licensing"
      - "enterprise"
      summary: "Check license availability."
      operationId: "getLicenseStatus"
      parameters: []
      responses:
        "200":
          description: ""
  /licensing/custom-permissions:
    get:
      tags:
      - "licensing"
      - "enterprise"
      summary: "Get custom permissions report."
      description: "You need to have a permission with action `licensing.reports:read`."
      operationId: "getCustomPermissionsReport"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CustomPermissionsRecordDTO"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /licensing/custom-permissions-csv:
    get:
      tags:
      - "licensing"
      - "enterprise"
      summary: "Get custom permissions report in CSV format."
      description: "You need to have a permission with action `licensing.reports:read`."
      operationId: "getCustomPermissionsCSV"
      produces:
      - "text/csv"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CustomPermissionsRecordDTO"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /licensing/refresh-stats:
    get:
      tags:
      - "licensing"
      - "enterprise"
      summary: "Refresh license stats."
      description: "You need to have a permission with action `licensing:read`."
      operationId: "refreshLicenseStats"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/ActiveUserStats"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /licensing/token:
    get:
      tags:
      - "licensing"
      - "enterprise"
      summary: "Get license token."
      description: "You need to have a permission with action `licensing:read`."
      operationId: "getLicenseToken"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Token"
    post:
      tags:
      - "licensing"
      - "enterprise"
      summary: "Create license token."
      description: "You need to have a permission with action `licensing:update`."
      operationId: "postLicenseToken"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteTokenCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Token"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "licensing"
      - "enterprise"
      summary: "Remove license from database."
      description: "Removes the license stored in the Grafana database. Available\
        \ in Grafana Enterprise v7.4+.\n\nYou need to have a permission with action\
        \ `licensing:delete`."
      operationId: "deleteLicenseToken"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteTokenCommand"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "AcceptedResponse"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /licensing/token/renew:
    post:
      tags:
      - "licensing"
      - "enterprise"
      summary: "Manually force license refresh."
      description: "Manually ask license issuer for a new token. Available in Grafana\
        \ Enterprise v7.4+.\n\nYou need to have a permission with action `licensing:update`."
      operationId: "postRenewLicenseToken"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /login/saml:
    get:
      tags:
      - "saml"
      - "enterprise"
      summary: "It initiates the login flow by redirecting the user to the IdP."
      operationId: "getSAMLLogin"
      parameters: []
      responses:
        "302":
          description: ""
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /logout/saml:
    get:
      tags:
      - "saml"
      - "enterprise"
      summary: "GetLogout initiates single logout process."
      operationId: "getSAMLLogout"
      parameters: []
      responses:
        "302":
          description: ""
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org:
    get:
      tags:
      - "current_org_details"
      description: "Get current Organization"
      operationId: "getOrg"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/OrgDetailsDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "current_org_details"
      summary: "Update current Organization."
      operationId: "updateOrg"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgForm"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/address:
    put:
      tags:
      - "current_org_details"
      summary: "Update current Organization's address."
      operationId: "updateOrgAddress"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgAddressForm"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/invites:
    get:
      tags:
      - "org_invites"
      summary: "Get pending invites."
      operationId: "getInvites"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TempUserDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "org_invites"
      summary: "Add invite."
      operationId: "addInvite"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddInviteForm"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_10"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: ""
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/preferences:
    get:
      tags:
      - "org_preferences"
      summary: "Get Current Org Prefs."
      operationId: "getOrgPreferences"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Prefs"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "org_preferences"
      summary: "Update Current Org Prefs."
      operationId: "updateOrgPreferences"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdatePrefsCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_10"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "org_preferences"
      summary: "Patch Current Org Prefs."
      operationId: "patchOrgPreferences"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PatchPrefsCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_10"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/users:
    get:
      tags:
      - "current_org_details"
      summary: "Get all users within the current organization."
      description: "Returns all org users within the current organization. Accessible\
        \ to users with org admin role.\nIf you are running Grafana Enterprise and\
        \ have Fine-grained access control enabled\nyou need to have a permission\
        \ with action: `org.users:read` with scope `users:*`."
      operationId: "getOrgUsers"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrgUserDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "current_org_details"
      summary: "Add a new user to the current organization"
      description: "Adds a global user to the current organization.\n\nIf you are\
        \ running Grafana Enterprise and have Fine-grained access control enabled\n\
        you need to have a permission with action: `org.users:add` with scope `users:*`."
      operationId: "addOrgUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddOrgUserCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/users/lookup:
    get:
      tags:
      - "current_org_details"
      summary: "Get all users within the current organization (lookup)"
      description: "Returns all org users within the current organization, but with\
        \ less detailed information.\nAccessible to users with org admin role, admin\
        \ in any folder or admin of any team.\nMainly used by Grafana UI for providing\
        \ list of users when adding team members and when editing folder/dashboard\
        \ permissions."
      operationId: "lookupOrgUsers"
      parameters:
      - name: "query"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserLookupDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/users/{user_id}:
    delete:
      tags:
      - "current_org_details"
      summary: "Delete user in current organization"
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `org.users:remove`\
        \ with scope `users:*`."
      operationId: "deleteOrgUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "current_org_details"
      summary: "Updates the given user"
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `org.users.role:update`\
        \ with scope `users:*`."
      operationId: "updateOrgUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgUserCommand"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/{invitation_code}/invites:
    delete:
      tags:
      - "org_invites"
      summary: "Revoke invite."
      operationId: "revokeInvite"
      parameters:
      - name: "invitation_code"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "InvitationCode"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs:
    get:
      tags:
      - "orgs"
      description: "Search all Organizations"
      operationId: "searchOrg"
      parameters:
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "perpage"
        in: "query"
        description: "Number of items per page\nThe totalCount field in the response\
          \ can be used for pagination list E.g. if totalCount is equal to 100 teams\
          \ and the perpage parameter is set to 10 then there are 10 pages of teams."
        required: false
        type: "integer"
        default: 1000
        format: "int64"
        x-exportParamName: "Perpage"
        x-optionalDataType: "Int64"
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "If set it will return results where the query value is contained\
          \ in the name field. Query values with spaces need to be URL encoded."
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrgDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "orgs"
      summary: "Create Organization."
      description: "Only works if [users.allow_org_create](https://grafana.com/docs/grafana/latest/administration/configuration/#allow_org_create)\
        \ is set."
      operationId: "createOrg"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateOrgCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_11"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/name/{org_name}:
    get:
      tags:
      - "orgs"
      summary: "Get Organization by ID."
      operationId: "getOrgByName"
      parameters:
      - name: "org_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "OrgName"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/OrgDetailsDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}:
    get:
      tags:
      - "orgs"
      summary: "Get Organization by ID."
      operationId: "getOrgByID"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/OrgDetailsDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "orgs"
      summary: "Update Organization."
      operationId: "adminUpdateOrg"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgForm"
        x-exportParamName: "Body"
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "orgs"
      summary: "Delete Organization."
      operationId: "adminDeleteOrg"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}/address:
    put:
      tags:
      - "orgs"
      summary: "Update Organization's address."
      operationId: "adminUpdateOrgAddress"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgAddressForm"
        x-exportParamName: "Body"
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}/quotas:
    get:
      tags:
      - "orgs"
      summary: "Fetch Organization quota."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `orgs.quotas:read`\
        \ and scope `org:id:1` (orgIDScope).\nlist"
      operationId: "getOrgQuota"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserQuotaDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}/quotas/{quota_target}:
    put:
      tags:
      - "orgs"
      summary: "Update user quota."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `orgs.quotas:write`\
        \ and scope `org:id:1` (orgIDScope)."
      operationId: "updateOrgQuota"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgQuotaCmd"
        x-exportParamName: "Body"
      - name: "quota_target"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "QuotaTarget"
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}/users:
    get:
      tags:
      - "orgs"
      summary: "Get Users in Organization."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `org.users:read`\
        \ with scope `users:*`."
      operationId: "adminGetOrgUsers"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrgUserDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "orgs"
      summary: "Add a new user to the current organization"
      description: "Adds a global user to the current organization.\n\nIf you are\
        \ running Grafana Enterprise and have Fine-grained access control enabled\n\
        you need to have a permission with action: `org.users:add` with scope `users:*`."
      operationId: "adminAddOrgUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddOrgUserCommand"
        x-exportParamName: "Body"
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}/users/{user_id}:
    delete:
      tags:
      - "orgs"
      summary: "Delete user in current organization"
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `org.users:remove`\
        \ with scope `users:*`."
      operationId: "adminDeleteOrgUser"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "orgs"
      summary: "Update Users in Organization."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `org.users.role:update`\
        \ with scope `users:*`."
      operationId: "adminUpdateOrgUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgUserCommand"
        x-exportParamName: "Body"
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /query-history:
    get:
      tags:
      - "query_history"
      summary: "Query history search."
      description: "Returns a list of queries in the query history that matches the\
        \ search criteria.\nQuery history search supports pagination. Use the `limit`\
        \ parameter to control the maximum number of queries returned; the default\
        \ limit is 100.\nYou can also use the `page` query parameter to fetch queries\
        \ from any page other than the first one."
      operationId: "searchQueries"
      parameters:
      - name: "datasourceUid"
        in: "query"
        description: "List of data source UIDs to search for"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "DatasourceUid"
      - name: "searchString"
        in: "query"
        description: "Text inside query or comments that is searched for"
        required: false
        type: "string"
        x-exportParamName: "SearchString"
        x-optionalDataType: "String"
      - name: "onlyStarred"
        in: "query"
        description: "Flag indicating if only starred queries should be returned"
        required: false
        type: "boolean"
        x-exportParamName: "OnlyStarred"
        x-optionalDataType: "Bool"
      - name: "sort"
        in: "query"
        description: "Sort method"
        required: false
        type: "string"
        default: "time-desc"
        enum:
        - "time-desc"
        - "time-asc"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "Use this parameter to access hits beyond limit. Numbering starts\
          \ at 1. limit param acts as page size."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned results"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "from"
        in: "query"
        description: "From range for the query history search"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "From"
        x-optionalDataType: "Int64"
      - name: "to"
        in: "query"
        description: "To range for the query history search"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "To"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/QueryHistorySearchResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "query_history"
      summary: "Add query to query history."
      description: "Adds new query to query history."
      operationId: "createQuery"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateQueryInQueryHistoryCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/QueryHistoryResponse"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /query-history/migrate:
    post:
      tags:
      - "query_history"
      summary: "Migrate queries to query history."
      description: "Adds multiple queries to query history."
      operationId: "migrateQueries"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MigrateQueriesToQueryHistoryCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/QueryHistoryMigrationResponse"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /query-history/star/{query_history_uid}:
    post:
      tags:
      - "query_history"
      summary: "Add star to query in query history."
      description: "Adds star to query in query history as specified by the UID."
      operationId: "starQuery"
      parameters:
      - name: "query_history_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "QueryHistoryUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/QueryHistoryResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "query_history"
      summary: "Remove star to query in query history."
      description: "Removes star from query in query history as specified by the UID."
      operationId: "unstarQuery"
      parameters:
      - name: "query_history_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "QueryHistoryUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/QueryHistoryResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /query-history/{query_history_uid}:
    delete:
      tags:
      - "query_history"
      summary: "Delete query in query history."
      description: "Deletes an existing query in query history as specified by the\
        \ UID. This operation cannot be reverted."
      operationId: "deleteQuery"
      parameters:
      - name: "query_history_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "QueryHistoryUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/QueryHistoryDeleteQueryResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "query_history"
      summary: "Update comment for query in query history."
      description: "Updates comment for query in query history as specified by the\
        \ UID."
      operationId: "patchQueryComment"
      parameters:
      - name: "query_history_uid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "QueryHistoryUid"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PatchQueryCommentInQueryHistoryCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/QueryHistoryResponse"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /recording-rules:
    get:
      tags:
      - "recording_rules"
      - "enterprise"
      summary: "Get all recording rules."
      operationId: "listRecordingRules"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RecordingRuleJSON"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "recording_rules"
      - "enterprise"
      summary: "Create a new recording rule."
      operationId: "createRecordingRule"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RecordingRuleJSON"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/RecordingRuleJSON"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "recording_rules"
      - "enterprise"
      summary: "Update a recording rule."
      operationId: "updateRecordingRule"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RecordingRuleJSON"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/RecordingRuleJSON"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /recording-rules/test:
    post:
      tags:
      - "recording_rules"
      - "enterprise"
      summary: "Test a recording rule."
      operationId: "testCreateRecordingRule"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RecordingRuleJSON"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /recording-rules/writer:
    get:
      tags:
      - "recording_rules"
      - "enterprise"
      summary: "Get the write target."
      operationId: "getRecordingRuleWriteTarget"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/PrometheusRemoteWriteTargetJSON"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "recording_rules"
      - "enterprise"
      summary: "Create a new write target."
      operationId: "createRecordingRuleWriteTarget"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PrometheusRemoteWriteTargetJSON"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/PrometheusRemoteWriteTargetJSON"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "recording_rules"
      - "enterprise"
      summary: "Delete the write target."
      operationId: "deleteRecordingRuleWriteTarget"
      parameters: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /recording-rules/{recordingRuleID}:
    delete:
      tags:
      - "recording_rules"
      - "enterprise"
      summary: "Delete a recording rule."
      operationId: "deleteRecordingRule"
      parameters:
      - name: "recordingRuleID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "RecordingRuleID"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /reports:
    get:
      tags:
      - "reports"
      - "enterprise"
      summary: "List reports."
      description: "Available to org admins only and with a valid or expired license\n\
        \nYou need to have a permission with action `reports:read` with scope `reports:*`."
      operationId: "getReports"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ConfigDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "reports"
      - "enterprise"
      summary: "Create a report."
      description: "Available to org admins only and with a valid license.\n\nYou\
        \ need to have a permission with action `reports.admin:create`."
      operationId: "createReport"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateOrUpdateConfigCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            type: "object"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /reports/email:
    post:
      tags:
      - "reports"
      - "enterprise"
      summary: "Send a report."
      description: "Generate and send a report. This API waits for the report to be\
        \ generated before returning. We recommend that you set the client’s timeout\
        \ to at least 60 seconds. Available to org admins only and with a valid license.\n\
        \nOnly available in Grafana Enterprise v7.0+.\nThis API endpoint is experimental\
        \ and may be deprecated in a future release. On deprecation, a migration strategy\
        \ will be provided and the endpoint will remain functional until the next\
        \ major release of Grafana.\n\nYou need to have a permission with action `reports:send`."
      operationId: "sendReport"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ReportEmailDTO"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /reports/render/pdf/{DashboardID}:
    get:
      tags:
      - "reports"
      - "enterprise"
      summary: "Render report for dashboard."
      description: "Please refer to [reports enterprise](#/reports/renderReportPDFs)\
        \ instead. This will be removed in Grafana 10."
      operationId: "renderReportPDF"
      produces:
      - "application/pdf"
      parameters:
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      deprecated: true
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              type: "integer"
              format: "uint8"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /reports/render/pdfs:
    get:
      tags:
      - "reports"
      - "enterprise"
      summary: "Render report for multiple dashboards."
      description: "Available to all users and with a valid license."
      operationId: "renderReportPDFs"
      produces:
      - "application/pdf"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              type: "integer"
              format: "uint8"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /reports/settings:
    get:
      tags:
      - "reports"
      - "enterprise"
      summary: "Get settings."
      description: "Available to org admins only and with a valid or expired license\n\
        \nYou need to have a permission with action `reports.settings:read`x."
      operationId: "getReportSettings"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SettingsDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "reports"
      - "enterprise"
      summary: "Save settings."
      description: "Available to org admins only and with a valid or expired license\n\
        \nYou need to have a permission with action `reports.settings:write`xx."
      operationId: "saveReportSettings"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SettingsDTO"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /reports/test-email:
    post:
      tags:
      - "reports"
      - "enterprise"
      summary: "Send test report via email."
      description: "Available to org admins only and with a valid license.\n\nYou\
        \ need to have a permission with action `reports:send`."
      operationId: "sendTestEmail"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateOrUpdateConfigCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /reports/{reportID}:
    get:
      tags:
      - "reports"
      - "enterprise"
      summary: "Get a report."
      description: "Available to org admins only and with a valid or expired license\n\
        \nYou need to have a permission with action `reports:read` with scope `reports:id:<report\
        \ ID>`."
      operationId: "getReport"
      parameters:
      - name: "reportID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ReportID"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/ConfigDTO"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "reports"
      - "enterprise"
      summary: "Update a report."
      description: "Available to org admins only and with a valid or expired license\n\
        \nYou need to have a permission with action `reports.admin:write` with scope\
        \ `reports:id:<report ID>`."
      operationId: "updateReport"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateOrUpdateConfigCmd"
        x-exportParamName: "Body"
      - name: "reportID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ReportID"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "reports"
      - "enterprise"
      summary: "Delete a report."
      description: "Available to org admins only and with a valid or expired license\n\
        \nYou need to have a permission with action `reports.delete` with scope `reports:id:<report\
        \ ID>`."
      operationId: "deleteReport"
      parameters:
      - name: "reportID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ReportID"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /saml/acs:
    post:
      tags:
      - "saml"
      - "enterprise"
      summary: "It performs assertion Consumer Service (ACS)."
      operationId: "postACS"
      parameters:
      - name: "RelayState"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "RelayState"
        x-optionalDataType: "String"
      responses:
        "302":
          description: ""
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /saml/metadata:
    get:
      tags:
      - "saml"
      - "enterprise"
      summary: "It exposes the SP (Grafana's) metadata for the IdP's consumption."
      operationId: "getSAMLMetadata"
      produces:
      - "application/xml;application/samlmetadata+xml"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              type: "integer"
              format: "uint8"
  /saml/slo:
    post:
      tags:
      - "saml"
      - "enterprise"
      summary: "It performs Single Logout (SLO) callback."
      operationId: "postSLO"
      parameters:
      - name: "SAMLRequest"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "SAMLRequest"
        x-optionalDataType: "String"
      - name: "SAMLResponse"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "SAMLResponse"
        x-optionalDataType: "String"
      responses:
        "302":
          description: ""
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /search:
    get:
      tags:
      - "search"
      operationId: "search"
      parameters:
      - name: "query"
        in: "query"
        description: "Search Query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "List of tags to search for"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Tag"
      - name: "type"
        in: "query"
        description: "Type to search for, dash-folder or dash-db"
        required: false
        type: "string"
        enum:
        - "dash-folder"
        - "dash-db"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "dashboardIds"
        in: "query"
        description: "List of dashboard id’s to search for"
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        x-exportParamName: "DashboardIds"
      - name: "folderIds"
        in: "query"
        description: "List of folder id’s to search in for dashboards"
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        x-exportParamName: "FolderIds"
      - name: "starred"
        in: "query"
        description: "Flag indicating if only starred Dashboards should be returned"
        required: false
        type: "boolean"
        x-exportParamName: "Starred"
        x-optionalDataType: "Bool"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned results (max 5000)"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "Use this parameter to access hits beyond limit. Numbering starts\
          \ at 1. limit param acts as page size. Only available in Grafana v6.2+."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "permission"
        in: "query"
        description: "Set to `Edit` to return dashboards/folders that the user can\
          \ edit"
        required: false
        type: "string"
        default: "View"
        enum:
        - "Edit"
        - "View"
        x-exportParamName: "Permission"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort method; for listing all the possible sort methods use the\
          \ search sorting endpoint."
        required: false
        type: "string"
        default: "alpha-asc"
        enum:
        - "alpha-asc"
        - "alpha-desc"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/HitList"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /search/sorting:
    get:
      tags:
      - "search"
      description: "List search sorting options"
      operationId: "searchSorting"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_12"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /snapshot/shared-options:
    get:
      tags:
      - "snapshots"
      summary: "Get snapshot sharing settings."
      operationId: "getSnapshotSharingOptions"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_13"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /snapshots:
    post:
      tags:
      - "snapshots"
      summary: "When creating a snapshot using the API, you have to provide the full\
        \ dashboard payload including the snapshot data. This endpoint is designed\
        \ for the Grafana UI."
      description: "Snapshot public mode should be enabled or authentication is required."
      operationId: "createSnapshot"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateDashboardSnapshotCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_14"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /snapshots-delete/{deleteKey}:
    get:
      tags:
      - "snapshots"
      summary: "Delete Snapshot by deleteKey."
      description: "Snapshot public mode should be enabled or authentication is required."
      operationId: "deleteSnapshotByDeleteKey"
      parameters:
      - name: "deleteKey"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DeleteKey"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /snapshots/{key}:
    get:
      tags:
      - "snapshots"
      summary: "Get Snapshot by Key."
      operationId: "getSnapshotByKey"
      parameters:
      - name: "key"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Key"
      responses:
        "200":
          description: ""
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "snapshots"
      summary: "Delete Snapshot by Key."
      operationId: "deleteSnapshotByKey"
      parameters:
      - name: "key"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Key"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams:
    post:
      tags:
      - "teams"
      summary: "Add Team."
      operationId: "createTeam"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateTeamCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_15"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/search:
    get:
      tags:
      - "teams"
      summary: "Team Search With Paging."
      operationId: "searchTeams"
      parameters:
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "perpage"
        in: "query"
        description: "Number of items per page\nThe totalCount field in the response\
          \ can be used for pagination list E.g. if totalCount is equal to 100 teams\
          \ and the perpage parameter is set to 10 then there are 10 pages of teams."
        required: false
        type: "integer"
        default: 1000
        format: "int64"
        x-exportParamName: "Perpage"
        x-optionalDataType: "Int64"
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "If set it will return results where the query value is contained\
          \ in the name field. Query values with spaces need to be URL encoded."
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SearchTeamQueryResult"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/{teamId}/groups:
    get:
      tags:
      - "sync_team_groups"
      - "enterprise"
      summary: "Get External Groups."
      operationId: "getTeamGroupsApi"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TeamGroupDTO"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "sync_team_groups"
      - "enterprise"
      summary: "Add External Group."
      operationId: "addTeamGroupApi"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TeamGroupMapping"
        x-exportParamName: "Body"
      - name: "teamId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/{teamId}/groups/{groupId}:
    delete:
      tags:
      - "sync_team_groups"
      - "enterprise"
      summary: "Remove External Group."
      operationId: "removeTeamGroupApi"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TeamId"
      - name: "groupId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "GroupId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/{team_id}:
    get:
      tags:
      - "teams"
      summary: "Get Team By ID."
      operationId: "getTeam"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/TeamDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "teams"
      summary: "Update Team."
      operationId: "updateTeam"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateTeamCommand"
        x-exportParamName: "Body"
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "teams"
      summary: "Delete Team By ID."
      operationId: "deleteTeamByID"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/{team_id}/members:
    get:
      tags:
      - "teams"
      summary: "Get Team Members."
      operationId: "getTeamMembers"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "teams"
      summary: "Add Team Member."
      operationId: "addTeamMember"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddTeamMemberCommand"
        x-exportParamName: "Body"
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/{team_id}/members/{user_id}:
    put:
      tags:
      - "teams"
      summary: "Update Team Member."
      operationId: "updateTeamMember"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateTeamMemberCommand"
        x-exportParamName: "Body"
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "teams"
      summary: "Remove Member From Team."
      operationId: "removeTeamMember"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/{team_id}/preferences:
    get:
      tags:
      - "teams"
      summary: "Get Team Preferences."
      operationId: "getTeamPreferences"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Prefs"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "teams"
      summary: "Update Team Preferences."
      operationId: "updateTeamPreferences"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TeamId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdatePrefsCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user:
    get:
      tags:
      - "signed_in_user"
      summary: "Get signed in User."
      operationId: "getSignedInUser"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "signed_in_user"
      summary: "Update signed in User."
      operationId: "updateSignedInUser"
      parameters:
      - in: "body"
        name: "body"
        description: "To change the email, name, login, theme, provide another one."
        required: true
        schema:
          $ref: "#/definitions/UpdateUserCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/auth-tokens:
    get:
      tags:
      - "signed_in_user"
      summary: "Auth tokens of the actual User."
      description: "Return a list of all auth tokens (devices) that the actual user\
        \ currently have logged in from."
      operationId: "getSignedInUserAuthTokens"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserToken"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/helpflags/clear:
    get:
      tags:
      - "signed_in_user"
      summary: "Clear user help flag."
      operationId: "clearHelpFlags"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_16"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/helpflags/{flag_id}:
    put:
      tags:
      - "signed_in_user"
      summary: "Set user help flag."
      operationId: "setHelpFlag"
      parameters:
      - name: "flag_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FlagId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_16"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/orgs:
    get:
      tags:
      - "signed_in_user"
      summary: "Organizations of the actual User."
      description: "Return a list of all organizations of the current user."
      operationId: "getSignedInUserOrgList"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserOrgDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/password:
    put:
      tags:
      - "signed_in_user"
      summary: "Change Password."
      description: "Changes the password for the user."
      operationId: "changeUserPassword"
      parameters:
      - in: "body"
        name: "body"
        description: "To change the email, name, login, theme, provide another one."
        required: true
        schema:
          $ref: "#/definitions/ChangeUserPasswordCommand"
        x-exportParamName: "Body"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/preferences:
    get:
      tags:
      - "user_preferences"
      summary: "Get user preferences."
      operationId: "getUserPreferences"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Prefs"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "user_preferences"
      summary: "Update user preferences."
      description: "Omitting a key (`theme`, `homeDashboardId`, `timezone`) will cause\
        \ the current value to be replaced with the system default value."
      operationId: "updateUserPreferences"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdatePrefsCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "user_preferences"
      summary: "Patch user preferences."
      operationId: "patchUserPreferences"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PatchPrefsCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/quotas:
    get:
      tags:
      - "signed_in_user"
      summary: "Fetch user quota."
      operationId: "getUserQuotas"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserQuotaDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/revoke-auth-token:
    post:
      tags:
      - "signed_in_user"
      summary: "Revoke an auth token of the actual User."
      description: "Revokes the given auth token (device) for the actual user. User\
        \ of issued auth token (device) will no longer be logged in and will be required\
        \ to authenticate again upon next activity."
      operationId: "revokeSignedInAuthToken"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RevokeAuthTokenCmd"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/stars/dashboard/{dashboard_id}:
    post:
      tags:
      - "signed_in_user"
      summary: "Star a dashboard."
      description: "Stars the given Dashboard for the actual user."
      operationId: "starDashboard"
      parameters:
      - name: "dashboard_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DashboardId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "signed_in_user"
      summary: "Unstar a dashboard."
      description: "Deletes the starring of the given Dashboard for the actual user."
      operationId: "unstarDashboard"
      parameters:
      - name: "dashboard_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DashboardId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/teams:
    get:
      tags:
      - "signed_in_user"
      summary: "Teams that the actual User is member of."
      description: "Return a list of all teams that the current user is member of."
      operationId: "getSignedInUserTeamList"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserOrgDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/using/{org_id}:
    post:
      tags:
      - "signed_in_user"
      summary: "Switch user context for signed in user."
      description: "Switch user context to the given organization."
      operationId: "userSetUsingOrg"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrgId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users:
    get:
      tags:
      - "users"
      summary: "Get users."
      description: "Returns all users that the authenticated user has permission to\
        \ view, admin permission required."
      operationId: "searchUsers"
      parameters:
      - name: "perpage"
        in: "query"
        description: "Limit the maximum number of users to return per page"
        required: false
        type: "integer"
        default: 1000
        format: "int64"
        x-exportParamName: "Perpage"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "Page index for starting fetching users"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SearchUserQueryResult"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users/lookup:
    get:
      tags:
      - "users"
      summary: "Get user by login or email."
      operationId: "getUserByLoginOrEmail"
      parameters:
      - name: "loginOrEmail"
        in: "query"
        description: "loginOrEmail of the user"
        required: true
        type: "string"
        x-exportParamName: "LoginOrEmail"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users/search:
    get:
      tags:
      - "users"
      summary: "Get users with paging."
      operationId: "searchUsersWithPaging"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SearchUserQueryResult"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users/{user_id}:
    get:
      tags:
      - "users"
      summary: "Get user by id."
      operationId: "getUserByID"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "users"
      summary: "Update user."
      description: "Update the user identified by id."
      operationId: "updateUser"
      parameters:
      - in: "body"
        name: "body"
        description: "To change the email, name, login, theme, provide another one."
        required: true
        schema:
          $ref: "#/definitions/UpdateUserCommand"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users/{user_id}/orgs:
    get:
      tags:
      - "users"
      summary: "Get organizations for user."
      description: "Get organizations for user identified by id."
      operationId: "getUserOrgList"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserOrgDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users/{user_id}/teams:
    get:
      tags:
      - "users"
      summary: "Get teams for user."
      description: "Get teams for user identified by id."
      operationId: "getUserTeams"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TeamDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /v1/provisioning/alert-rules:
    post:
      tags:
      - "provisioning"
      summary: "Create a new alert rule."
      operationId: "RoutePostAlertRule"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "Body"
        required: false
        schema:
          $ref: "#/definitions/AlertRule"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "AlertRule"
          schema:
            $ref: "#/definitions/AlertRule"
        "400":
          description: "ValidationError"
          schema:
            $ref: "#/definitions/ValidationError"
  /v1/provisioning/alert-rules/{UID}:
    get:
      tags:
      - "provisioning"
      summary: "Get a specific alert rule by UID."
      operationId: "RouteGetAlertRule"
      parameters:
      - name: "UID"
        in: "path"
        description: "Alert rule UID"
        required: true
        type: "string"
        x-exportParamName: "UID"
      responses:
        "200":
          description: "AlertRule"
          schema:
            $ref: "#/definitions/AlertRule"
        "404":
          description: " Not found."
    put:
      tags:
      - "provisioning"
      summary: "Update an existing alert rule."
      operationId: "RoutePutAlertRule"
      consumes:
      - "application/json"
      parameters:
      - name: "UID"
        in: "path"
        description: "Alert rule UID"
        required: true
        type: "string"
        x-exportParamName: "UID"
      - in: "body"
        name: "Body"
        required: false
        schema:
          $ref: "#/definitions/AlertRule"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "AlertRule"
          schema:
            $ref: "#/definitions/AlertRule"
        "400":
          description: "ValidationError"
          schema:
            $ref: "#/definitions/ValidationError"
    delete:
      tags:
      - "provisioning"
      summary: "Delete a specific alert rule by UID."
      operationId: "RouteDeleteAlertRule"
      parameters:
      - name: "UID"
        in: "path"
        description: "Alert rule UID"
        required: true
        type: "string"
        x-exportParamName: "UID"
      responses:
        "204":
          description: " The alert rule was deleted successfully."
  /v1/provisioning/contact-points:
    get:
      tags:
      - "provisioning"
      summary: "Get all the contact points."
      operationId: "RouteGetContactpoints"
      parameters: []
      responses:
        "200":
          description: "ContactPoints"
          schema:
            $ref: "#/definitions/ContactPoints"
    post:
      tags:
      - "provisioning"
      summary: "Create a contact point."
      operationId: "RoutePostContactpoints"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "Body"
        required: false
        schema:
          $ref: "#/definitions/EmbeddedContactPoint"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "EmbeddedContactPoint"
          schema:
            $ref: "#/definitions/EmbeddedContactPoint"
        "400":
          description: "ValidationError"
          schema:
            $ref: "#/definitions/ValidationError"
  /v1/provisioning/contact-points/{UID}:
    put:
      tags:
      - "provisioning"
      summary: "Update an existing contact point."
      operationId: "RoutePutContactpoint"
      consumes:
      - "application/json"
      parameters:
      - name: "UID"
        in: "path"
        description: "UID is the contact point unique identifier"
        required: true
        type: "string"
        x-exportParamName: "UID"
      - in: "body"
        name: "Body"
        required: false
        schema:
          $ref: "#/definitions/EmbeddedContactPoint"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Ack"
          schema:
            $ref: "#/definitions/Ack"
        "400":
          description: "ValidationError"
          schema:
            $ref: "#/definitions/ValidationError"
    delete:
      tags:
      - "provisioning"
      summary: "Delete a contact point."
      operationId: "RouteDeleteContactpoints"
      consumes:
      - "application/json"
      parameters:
      - name: "UID"
        in: "path"
        description: "UID is the contact point unique identifier"
        required: true
        type: "string"
        x-exportParamName: "UID"
      responses:
        "204":
          description: " The contact point was deleted successfully."
  /v1/provisioning/folder/{FolderUID}/rule-groups/{Group}:
    put:
      tags:
      - "provisioning"
      summary: "Update the interval of a rule group."
      operationId: "RoutePutAlertRuleGroup"
      consumes:
      - "application/json"
      parameters:
      - name: "FolderUID"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FolderUID"
      - name: "Group"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Group"
      - in: "body"
        name: "Body"
        required: false
        schema:
          $ref: "#/definitions/AlertRuleGroup"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "AlertRuleGroup"
          schema:
            $ref: "#/definitions/AlertRuleGroup"
        "400":
          description: "ValidationError"
          schema:
            $ref: "#/definitions/ValidationError"
  /v1/provisioning/mute-timings:
    get:
      tags:
      - "provisioning"
      summary: "Get all the mute timings."
      operationId: "RouteGetMuteTimings"
      parameters: []
      responses:
        "200":
          description: "MuteTimings"
          schema:
            $ref: "#/definitions/MuteTimings"
    post:
      tags:
      - "provisioning"
      summary: "Create a new mute timing."
      operationId: "RoutePostMuteTiming"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "Body"
        required: false
        schema:
          $ref: "#/definitions/MuteTimeInterval"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "MuteTimeInterval"
          schema:
            $ref: "#/definitions/MuteTimeInterval"
        "400":
          description: "ValidationError"
          schema:
            $ref: "#/definitions/ValidationError"
  /v1/provisioning/mute-timings/{name}:
    get:
      tags:
      - "provisioning"
      summary: "Get a mute timing."
      operationId: "RouteGetMuteTiming"
      parameters:
      - name: "name"
        in: "path"
        description: "Mute timing name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "MuteTimeInterval"
          schema:
            $ref: "#/definitions/MuteTimeInterval"
        "404":
          description: " Not found."
    put:
      tags:
      - "provisioning"
      summary: "Replace an existing mute timing."
      operationId: "RoutePutMuteTiming"
      consumes:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Mute timing name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - in: "body"
        name: "Body"
        required: false
        schema:
          $ref: "#/definitions/MuteTimeInterval"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "MuteTimeInterval"
          schema:
            $ref: "#/definitions/MuteTimeInterval"
        "400":
          description: "ValidationError"
          schema:
            $ref: "#/definitions/ValidationError"
    delete:
      tags:
      - "provisioning"
      summary: "Delete a mute timing."
      operationId: "RouteDeleteMuteTiming"
      parameters:
      - name: "name"
        in: "path"
        description: "Mute timing name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      responses:
        "204":
          description: " The mute timing was deleted successfully."
  /v1/provisioning/policies:
    get:
      tags:
      - "provisioning"
      summary: "Get the notification policy tree."
      operationId: "RouteGetPolicyTree"
      parameters: []
      responses:
        "200":
          description: "Route"
          schema:
            $ref: "#/definitions/Route"
    put:
      tags:
      - "provisioning"
      summary: "Sets the notification policy tree."
      operationId: "RoutePutPolicyTree"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "Body"
        description: "The new notification routing tree to use"
        required: false
        schema:
          $ref: "#/definitions/Route"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Ack"
          schema:
            $ref: "#/definitions/Ack"
        "400":
          description: "ValidationError"
          schema:
            $ref: "#/definitions/ValidationError"
  /v1/provisioning/templates:
    get:
      tags:
      - "provisioning"
      summary: "Get all message templates."
      operationId: "RouteGetTemplates"
      parameters: []
      responses:
        "200":
          description: "MessageTemplates"
          schema:
            $ref: "#/definitions/MessageTemplates"
        "404":
          description: " Not found."
  /v1/provisioning/templates/{name}:
    get:
      tags:
      - "provisioning"
      summary: "Get a message template."
      operationId: "RouteGetTemplate"
      parameters:
      - name: "name"
        in: "path"
        description: "Template Name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "MessageTemplate"
          schema:
            $ref: "#/definitions/MessageTemplate"
        "404":
          description: " Not found."
    put:
      tags:
      - "provisioning"
      summary: "Updates an existing template."
      operationId: "RoutePutTemplate"
      consumes:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Template Name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      - in: "body"
        name: "Body"
        required: false
        schema:
          $ref: "#/definitions/MessageTemplateContent"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "MessageTemplate"
          schema:
            $ref: "#/definitions/MessageTemplate"
        "400":
          description: "ValidationError"
          schema:
            $ref: "#/definitions/ValidationError"
    delete:
      tags:
      - "provisioning"
      summary: "Delete a template."
      operationId: "RouteDeleteTemplate"
      parameters:
      - name: "name"
        in: "path"
        description: "Template Name"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
      responses:
        "204":
          description: " The template was deleted successfully."
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "Authorization"
    in: "header"
  basic:
    type: "basic"
definitions:
  Ack:
    type: "object"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  ActiveSyncStatusDTO:
    type: "object"
    properties:
      enabled:
        type: "boolean"
      nextSync:
        type: "string"
        format: "date-time"
      prevSync:
        $ref: "#/definitions/SyncResult"
      schedule:
        type: "string"
    description: "ActiveSyncStatusDTO holds the information for LDAP background Sync"
    example:
      schedule: "schedule"
      prevSync:
        UpdatedUserIds:
        - 6
        - 6
        FailedUsers:
        - Error: "Error"
          Login: "Login"
        - Error: "Error"
          Login: "Login"
        Started: "2000-01-23T04:56:07.000+00:00"
        MissingUserIds:
        - 0
        - 0
        Elapsed: {}
      nextSync: "2000-01-23T04:56:07.000+00:00"
      enabled: true
  ActiveUserStats:
    type: "object"
    properties:
      active_admins_and_editors:
        type: "integer"
        format: "int64"
      active_users:
        type: "integer"
        format: "int64"
      active_viewers:
        type: "integer"
        format: "int64"
    example:
      active_users: 6
      active_admins_and_editors: 0
      active_viewers: 1
  AddApiKeyCommand:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
      role:
        type: "string"
        enum:
        - "Viewer"
        - "Editor"
        - "Admin"
        x-go-enum-desc: "Viewer ROLE_VIEWER\nEditor ROLE_EDITOR\nAdmin ROLE_ADMIN"
        x-go-name: "Role"
      secondsToLive:
        type: "integer"
        format: "int64"
        x-go-name: "SecondsToLive"
    description: "COMMANDS"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  AddBuiltInRoleCommand:
    type: "object"
    properties:
      builtInRole:
        type: "string"
        enum:
        - "Viewer"
        - " Editor"
        - " Admin"
        - " Grafana Admin"
      global:
        type: "boolean"
        description: "A flag indicating if the assignment is global or not. If set\
          \ to false, the default org ID of the authenticated user will be used from\
          \ the request to create organization local assignment. Refer to the Built-in\
          \ role assignments for more information."
      roleUid:
        type: "string"
  AddDataSourceCommand:
    type: "object"
    properties:
      access:
        $ref: "#/definitions/DsAccess"
      basicAuth:
        type: "boolean"
      basicAuthUser:
        type: "string"
      database:
        type: "string"
      isDefault:
        type: "boolean"
      jsonData:
        $ref: "#/definitions/Json"
      name:
        type: "string"
      secureJsonData:
        type: "object"
        additionalProperties:
          type: "string"
      type:
        type: "string"
      uid:
        type: "string"
      url:
        type: "string"
      user:
        type: "string"
      withCredentials:
        type: "boolean"
    description: "Also acts as api DTO"
  AddInviteForm:
    type: "object"
    properties:
      loginOrEmail:
        type: "string"
      name:
        type: "string"
      role:
        type: "string"
        enum:
        - "Viewer"
        - "Editor"
        - "Admin"
      sendEmail:
        type: "boolean"
  AddOrgUserCommand:
    type: "object"
    properties:
      loginOrEmail:
        type: "string"
      role:
        type: "string"
        enum:
        - "Viewer"
        - "Editor"
        - "Admin"
  AddPermissionDTO:
    type: "object"
    properties:
      builtinRole:
        type: "string"
      permission:
        $ref: "#/definitions/DsPermissionType"
      teamId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
    example:
      teamId: 0
      permission: {}
      builtinRole: "builtinRole"
      userId: 6
  AddTeamMemberCommand:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
  AddTeamRoleCommand:
    type: "object"
    properties:
      roleUid:
        type: "string"
  AddUserRoleCommand:
    type: "object"
    properties:
      global:
        type: "boolean"
      roleUid:
        type: "string"
  Address:
    type: "object"
    properties:
      address1:
        type: "string"
      address2:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
      state:
        type: "string"
      zipCode:
        type: "string"
    example:
      country: "country"
      zipCode: "zipCode"
      address2: "address2"
      city: "city"
      address1: "address1"
      state: "state"
  AdminCreateUserForm:
    type: "object"
    properties:
      email:
        type: "string"
      login:
        type: "string"
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      password:
        type: "string"
  AdminStats:
    type: "object"
    properties:
      activeAdmins:
        type: "integer"
        format: "int64"
      activeEditors:
        type: "integer"
        format: "int64"
      activeSessions:
        type: "integer"
        format: "int64"
      activeUsers:
        type: "integer"
        format: "int64"
      activeViewers:
        type: "integer"
        format: "int64"
      admins:
        type: "integer"
        format: "int64"
      alerts:
        type: "integer"
        format: "int64"
      dailyActiveAdmins:
        type: "integer"
        format: "int64"
      dailyActiveEditors:
        type: "integer"
        format: "int64"
      dailyActiveSessions:
        type: "integer"
        format: "int64"
      dailyActiveUsers:
        type: "integer"
        format: "int64"
      dailyActiveViewers:
        type: "integer"
        format: "int64"
      dashboards:
        type: "integer"
        format: "int64"
      datasources:
        type: "integer"
        format: "int64"
      editors:
        type: "integer"
        format: "int64"
      monthlyActiveUsers:
        type: "integer"
        format: "int64"
      orgs:
        type: "integer"
        format: "int64"
      playlists:
        type: "integer"
        format: "int64"
      snapshots:
        type: "integer"
        format: "int64"
      stars:
        type: "integer"
        format: "int64"
      tags:
        type: "integer"
        format: "int64"
      users:
        type: "integer"
        format: "int64"
      viewers:
        type: "integer"
        format: "int64"
    example:
      dailyActiveAdmins: 9
      dailyActiveSessions: 2
      playlists: 1
      activeUsers: 5
      activeEditors: 6
      stars: 5
      dailyActiveUsers: 4
      dashboards: 1
      users: 9
      tags: 9
      alerts: 7
      snapshots: 4
      activeAdmins: 0
      viewers: 6
      datasources: 1
      activeSessions: 1
      dailyActiveEditors: 3
      dailyActiveViewers: 7
      orgs: 7
      activeViewers: 5
      monthlyActiveUsers: 6
      admins: 2
      editors: 1
  AdminUpdateUserPasswordForm:
    type: "object"
    properties:
      password:
        type: "string"
  AdminUpdateUserPermissionsForm:
    type: "object"
    properties:
      isGrafanaAdmin:
        type: "boolean"
  Alert:
    type: "object"
    required:
    - "annotations"
    - "labels"
    - "state"
    - "value"
    properties:
      activeAt:
        type: "string"
        format: "date-time"
        x-go-name: "ActiveAt"
      annotations:
        $ref: "#/definitions/overrideLabels"
      labels:
        $ref: "#/definitions/overrideLabels"
      state:
        type: "string"
        x-go-name: "State"
      value:
        type: "string"
        x-go-name: "Value"
    title: "Alert has info for an alert."
    example:
      activeAt: "2000-01-23T04:56:07.000+00:00"
      annotations: {}
      state: "state"
      value: "value"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  AlertDiscovery:
    type: "object"
    required:
    - "alerts"
    properties:
      alerts:
        type: "array"
        items:
          $ref: "#/definitions/Alert"
        x-go-name: "Alerts"
    title: "AlertDiscovery has info for all active alerts."
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  AlertInstancesResponse:
    type: "object"
    properties:
      instances:
        type: "array"
        description: "Instances is an array of arrow encoded dataframes\neach frame\
          \ has a single row, and a column for each instance (alert identified by\
          \ unique labels) with a boolean value (firing/not firing)"
        items:
          type: "array"
          items:
            type: "integer"
            format: "uint8"
        x-go-name: "Instances"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  AlertListItemDTO:
    type: "object"
    properties:
      dashboardId:
        type: "integer"
        format: "int64"
      dashboardSlug:
        type: "string"
      dashboardUid:
        type: "string"
      evalData:
        $ref: "#/definitions/Json"
      evalDate:
        type: "string"
        format: "date-time"
      executionError:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      newStateDate:
        type: "string"
        format: "date-time"
      panelId:
        type: "integer"
        format: "int64"
      state:
        $ref: "#/definitions/AlertStateType"
      url:
        type: "string"
    example:
      panelId: 1
      evalDate: "2000-01-23T04:56:07.000+00:00"
      dashboardId: 0
      dashboardUid: "dashboardUid"
      newStateDate: "2000-01-23T04:56:07.000+00:00"
      evalData: {}
      name: "name"
      id: 6
      state: {}
      executionError: "executionError"
      dashboardSlug: "dashboardSlug"
      url: "url"
  AlertManager:
    type: "object"
    properties:
      url:
        type: "string"
        x-go-name: "URL"
    title: "AlertManager models a configured Alert Manager."
    x-go-package: "github.com/prometheus/client_golang/api/prometheus/v1"
  AlertManagerNotFound:
    type: "object"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  AlertManagerNotReady:
    type: "object"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  AlertManagersResult:
    type: "object"
    properties:
      activeAlertManagers:
        type: "array"
        items:
          $ref: "#/definitions/AlertManager"
        x-go-name: "Active"
      droppedAlertManagers:
        type: "array"
        items:
          $ref: "#/definitions/AlertManager"
        x-go-name: "Dropped"
    title: "AlertManagersResult contains the result from querying the alertmanagers\
      \ endpoint."
    x-go-package: "github.com/prometheus/client_golang/api/prometheus/v1"
  AlertNotification:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
      disableResolveMessage:
        type: "boolean"
      frequency:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      isDefault:
        type: "boolean"
      name:
        type: "string"
      secureFields:
        type: "object"
        additionalProperties:
          type: "boolean"
      sendReminder:
        type: "boolean"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
      uid:
        type: "string"
      updated:
        type: "string"
        format: "date-time"
    example:
      settings: {}
      uid: "uid"
      isDefault: true
      disableResolveMessage: true
      created: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      sendReminder: true
      id: 0
      secureFields:
        key: true
      type: "type"
      updated: "2000-01-23T04:56:07.000+00:00"
      frequency: "frequency"
  AlertNotificationLookup:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      isDefault:
        type: "boolean"
      name:
        type: "string"
      type:
        type: "string"
      uid:
        type: "string"
    example:
      uid: "uid"
      isDefault: true
      name: "name"
      id: 0
      type: "type"
  AlertQuery:
    type: "object"
    properties:
      datasourceUid:
        type: "string"
        description: "Grafana data source unique identifier; it should be '-100' for\
          \ a Server Side Expression operation."
        x-go-name: "DatasourceUID"
      model:
        type: "object"
        description: "JSON is the raw JSON query and includes the above properties\
          \ as well as custom properties."
        properties: {}
        x-go-name: "Model"
      queryType:
        type: "string"
        description: "QueryType is an optional identifier for the type of query.\n\
          It can be used to distinguish different types of queries."
        x-go-name: "QueryType"
      refId:
        type: "string"
        description: "RefID is the unique identifier of the query, set by the frontend\
          \ call."
        x-go-name: "RefID"
      relativeTimeRange:
        $ref: "#/definitions/RelativeTimeRange"
    title: "AlertQuery represents a single query associated with an alert definition."
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/models"
  AlertResponse:
    type: "object"
    required:
    - "status"
    properties:
      data:
        $ref: "#/definitions/AlertDiscovery"
      error:
        type: "string"
        x-go-name: "Error"
      errorType:
        $ref: "#/definitions/ErrorType"
      status:
        type: "string"
        x-go-name: "Status"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  AlertRule:
    type: "object"
    required:
    - "condition"
    - "data"
    - "execErrState"
    - "folderUID"
    - "for"
    - "noDataState"
    - "orgID"
    - "ruleGroup"
    - "title"
    properties:
      annotations:
        type: "object"
        example:
          runbook_url: "https://supercoolrunbook.com/page/13"
        additionalProperties:
          type: "string"
        x-go-name: "Annotations"
      condition:
        type: "string"
        example: "A"
        x-go-name: "Condition"
      data:
        type: "array"
        example:
        - datasourceUid: "-100"
          model:
            conditions:
            - evaluator:
                params:
                - 0
                - 0
                type: "gt"
              operator:
                type: "and"
              query:
                params: null
              reducer:
                params: null
                type: "avg"
              type: "query"
            datasource:
              type: "__expr__"
              uid: "__expr__"
            expression: "1 == 1"
            hide: false
            intervalMs: 1000
            maxDataPoints: 43200
            refId: "A"
            type: "math"
          queryType: ""
          refId: "A"
          relativeTimeRange:
            from: 0
            to: 0
        items:
          $ref: "#/definitions/AlertQuery"
        x-go-name: "Data"
      execErrState:
        type: "string"
        description: "\nAlerting AlertingErrState\nError ErrorErrState\nOK OkErrState"
        enum:
        - "Alerting"
        - "Error"
        - "OK"
        x-go-enum-desc: "Alerting AlertingErrState\nError ErrorErrState\nOK OkErrState"
        x-go-name: "ExecErrState"
      folderUID:
        type: "string"
        example: "project_x"
        x-go-name: "FolderUID"
      for:
        $ref: "#/definitions/Duration"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "ID"
      labels:
        type: "object"
        example:
          team: "sre-team-1"
        additionalProperties:
          type: "string"
        x-go-name: "Labels"
      noDataState:
        type: "string"
        description: "\nAlerting Alerting\nNoData NoData\nOK OK"
        enum:
        - "Alerting"
        - "NoData"
        - "OK"
        x-go-enum-desc: "Alerting Alerting\nNoData NoData\nOK OK"
        x-go-name: "NoDataState"
      orgID:
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
      provenance:
        $ref: "#/definitions/Provenance"
      ruleGroup:
        type: "string"
        example: "eval_group_1"
        minLength: 1
        maxLength: 190
        x-go-name: "RuleGroup"
      title:
        type: "string"
        example: "Always firing"
        minLength: 1
        maxLength: 190
        x-go-name: "Title"
      uid:
        type: "string"
        x-go-name: "UID"
      updated:
        type: "string"
        format: "date-time"
        readOnly: true
        x-go-name: "Updated"
    example:
      data:
      - datasourceUid: "-100"
        model:
          conditions:
          - evaluator:
              params:
              - 0
              - 0
              type: "gt"
            operator:
              type: "and"
            query:
              params: null
            reducer:
              params: null
              type: "avg"
            type: "query"
          datasource:
            type: "__expr__"
            uid: "__expr__"
          expression: "1 == 1"
          hide: false
          intervalMs: 1000
          maxDataPoints: 43200
          refId: "A"
          type: "math"
        queryType: ""
        refId: "A"
        relativeTimeRange:
          from: 0
          to: 0
      for: {}
      annotations:
        runbook_url: "https://supercoolrunbook.com/page/13"
      title: "Always firing"
      orgID: 6
      labels:
        team: "sre-team-1"
      uid: "uid"
      condition: "A"
      folderUID: "project_x"
      provenance: {}
      ruleGroup: "eval_group_1"
      id: 0
      noDataState: "Alerting"
      updated: "2000-01-23T04:56:07.000+00:00"
      execErrState: "Alerting"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  AlertRuleGroup:
    type: "object"
    properties:
      interval:
        type: "integer"
        format: "int64"
        x-go-name: "Interval"
    example:
      interval: 0
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  AlertStateInfoDTO:
    type: "object"
    properties:
      dashboardId:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      newStateDate:
        type: "string"
        format: "date-time"
      panelId:
        type: "integer"
        format: "int64"
      state:
        $ref: "#/definitions/AlertStateType"
    example:
      panelId: 1
      dashboardId: 0
      newStateDate: "2000-01-23T04:56:07.000+00:00"
      id: 6
      state: {}
  AlertStateType:
    type: "string"
  AlertTestCommand:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/Json"
      panelId:
        type: "integer"
        format: "int64"
  AlertTestResult:
    type: "object"
    properties:
      conditionEvals:
        type: "string"
      error:
        type: "string"
      firing:
        type: "boolean"
      logs:
        type: "array"
        items:
          $ref: "#/definitions/AlertTestResultLog"
      matches:
        type: "array"
        items:
          $ref: "#/definitions/EvalMatch"
      state:
        $ref: "#/definitions/AlertStateType"
      timeMs:
        type: "string"
    example:
      conditionEvals: "conditionEvals"
      firing: true
      state: {}
      error: "error"
      logs:
      - data: "{}"
        message: "message"
      - data: "{}"
        message: "message"
      matches:
      - metric: "metric"
        value:
          Float64: 0.8008281904610115
          Valid: true
        tags:
          key: "tags"
      - metric: "metric"
        value:
          Float64: 0.8008281904610115
          Valid: true
        tags:
          key: "tags"
      timeMs: "timeMs"
  AlertTestResultLog:
    type: "object"
    properties:
      data:
        type: "object"
        properties: {}
      message:
        type: "string"
    example:
      data: "{}"
      message: "message"
  AlertingRule:
    type: "object"
    required:
    - "alerts"
    - "annotations"
    - "health"
    - "name"
    - "query"
    - "state"
    - "type"
    properties:
      alerts:
        type: "array"
        items:
          $ref: "#/definitions/Alert"
        x-go-name: "Alerts"
      annotations:
        $ref: "#/definitions/overrideLabels"
      duration:
        type: "number"
        format: "double"
        x-go-name: "Duration"
      evaluationTime:
        type: "number"
        format: "double"
        x-go-name: "EvaluationTime"
      health:
        type: "string"
        x-go-name: "Health"
      labels:
        $ref: "#/definitions/overrideLabels"
      lastError:
        type: "string"
        x-go-name: "LastError"
      lastEvaluation:
        type: "string"
        format: "date-time"
        x-go-name: "LastEvaluation"
      name:
        type: "string"
        x-go-name: "Name"
      query:
        type: "string"
        x-go-name: "Query"
      state:
        type: "string"
        description: "State can be \"pending\", \"firing\", \"inactive\"."
        x-go-name: "State"
      type:
        $ref: "#/definitions/RuleType"
    description: "adapted from cortex"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  AnnotationActions:
    type: "object"
    properties:
      canAdd:
        type: "boolean"
      canDelete:
        type: "boolean"
      canEdit:
        type: "boolean"
    example:
      canEdit: true
      canAdd: true
      canDelete: true
  AnnotationPermission:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/AnnotationActions"
      organization:
        $ref: "#/definitions/AnnotationActions"
    example:
      organization:
        canEdit: true
        canAdd: true
        canDelete: true
      dashboard:
        canEdit: true
        canAdd: true
        canDelete: true
  ApiKeyDTO:
    type: "object"
    properties:
      accessControl:
        $ref: "#/definitions/Metadata"
      expiration:
        type: "string"
        format: "date-time"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      role:
        type: "string"
        enum:
        - "Viewer"
        - "Editor"
        - "Admin"
    example:
      accessControl: {}
      role: "Viewer"
      name: "name"
      expiration: "2000-01-23T04:56:07.000+00:00"
      id: 0
  ApiRuleNode:
    type: "object"
    properties:
      alert:
        type: "string"
        x-go-name: "Alert"
      annotations:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Annotations"
      expr:
        type: "string"
        x-go-name: "Expr"
      for:
        $ref: "#/definitions/Duration"
      labels:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Labels"
      record:
        type: "string"
        x-go-name: "Record"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  Authorization:
    type: "object"
    properties:
      credentials:
        $ref: "#/definitions/Secret"
      credentials_file:
        type: "string"
        x-go-name: "CredentialsFile"
      type:
        type: "string"
        x-go-name: "Type"
    title: "Authorization contains HTTP authorization credentials."
    x-go-package: "github.com/prometheus/common/config"
  BasicAuth:
    type: "object"
    properties:
      password:
        $ref: "#/definitions/Secret"
      password_file:
        type: "string"
        x-go-name: "PasswordFile"
      username:
        type: "string"
        x-go-name: "Username"
    title: "BasicAuth contains basic HTTP authentication credentials."
    x-go-package: "github.com/prometheus/common/config"
  BrandingOptionsDTO:
    type: "object"
    properties:
      emailFooterLink:
        type: "string"
      emailFooterMode:
        type: "string"
      emailFooterText:
        type: "string"
      emailLogoUrl:
        type: "string"
      reportLogoUrl:
        type: "string"
    example:
      emailFooterMode: "emailFooterMode"
      emailLogoUrl: "emailLogoUrl"
      emailFooterLink: "emailFooterLink"
      reportLogoUrl: "reportLogoUrl"
      emailFooterText: "emailFooterText"
  CalculateDiffTarget:
    type: "object"
    properties:
      dashboardId:
        type: "integer"
        format: "int64"
      unsavedDashboard:
        $ref: "#/definitions/Json"
      version:
        type: "integer"
        format: "int64"
  ChangeUserPasswordCommand:
    type: "object"
    properties:
      newPassword:
        type: "string"
      oldPassword:
        type: "string"
  ConfFloat64:
    type: "number"
    format: "double"
    description: "ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf\n\
      to null."
  Config:
    type: "object"
    properties:
      global:
        $ref: "#/definitions/GlobalConfig"
      inhibit_rules:
        type: "array"
        items:
          $ref: "#/definitions/InhibitRule"
        x-go-name: "InhibitRules"
      mute_time_intervals:
        type: "array"
        items:
          $ref: "#/definitions/MuteTimeInterval"
        x-go-name: "MuteTimeIntervals"
      route:
        $ref: "#/definitions/Route"
      templates:
        type: "array"
        items:
          type: "string"
        x-go-name: "Templates"
    title: "Config is the top-level configuration for Alertmanager's config files."
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  ConfigDTO:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
      dashboardId:
        type: "integer"
        format: "int64"
      dashboardName:
        type: "string"
      dashboardUid:
        type: "string"
      dashboards:
        type: "array"
        items:
          $ref: "#/definitions/DashboardDTO"
      enableCsv:
        type: "boolean"
      enableDashboardUrl:
        type: "boolean"
      formats:
        type: "array"
        items:
          $ref: "#/definitions/Type"
      id:
        type: "integer"
        format: "int64"
      message:
        type: "string"
      name:
        type: "string"
      options:
        $ref: "#/definitions/ReportOptionsDTO"
      orgId:
        type: "integer"
        format: "int64"
      recipients:
        type: "string"
      replyTo:
        type: "string"
      schedule:
        $ref: "#/definitions/ScheduleDTO"
      state:
        type: "string"
      templateVars:
        type: "object"
        properties: {}
      updated:
        type: "string"
        format: "date-time"
      userId:
        type: "integer"
        format: "int64"
    description: "ConfigDTO is model representation in transfer"
    example:
      formats:
      - {}
      - {}
      dashboardUid: "dashboardUid"
      created: "2000-01-23T04:56:07.000+00:00"
      enableDashboardUrl: true
      message: "message"
      dashboards:
      - reportVariables: "{}"
        dashboard:
          uid: "uid"
          name: "name"
          id: 6
        timeRange:
          from: "from"
          to: "to"
      - reportVariables: "{}"
        dashboard:
          uid: "uid"
          name: "name"
          id: 6
        timeRange:
          from: "from"
          to: "to"
      userId: 9
      orgId: 5
      dashboardName: "dashboardName"
      schedule:
        intervalAmount: 2
        hour: 5
        dayOfMonth: "dayOfMonth"
        endDate: "2000-01-23T04:56:07.000+00:00"
        workdaysOnly: true
        timeZone: "timeZone"
        day: "day"
        intervalFrequency: "intervalFrequency"
        startDate: "2000-01-23T04:56:07.000+00:00"
        frequency: "frequency"
        minute: 7
      templateVars: "{}"
      dashboardId: 0
      recipients: "recipients"
      name: "name"
      options:
        layout: "layout"
        orientation: "orientation"
        timeRange:
          from: "from"
          to: "to"
      replyTo: "replyTo"
      enableCsv: true
      id: 1
      state: "state"
      updated: "2000-01-23T04:56:07.000+00:00"
  ContactPoints:
    type: "array"
    items:
      $ref: "#/definitions/EmbeddedContactPoint"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  CreateAlertNotificationCommand:
    type: "object"
    properties:
      disableResolveMessage:
        type: "boolean"
      frequency:
        type: "string"
      isDefault:
        type: "boolean"
      name:
        type: "string"
      secureSettings:
        type: "object"
        additionalProperties:
          type: "string"
      sendReminder:
        type: "boolean"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
      uid:
        type: "string"
  CreateDashboardSnapshotCommand:
    type: "object"
    required:
    - "dashboard"
    properties:
      Result:
        $ref: "#/definitions/DashboardSnapshot"
      dashboard:
        $ref: "#/definitions/Json"
      deleteKey:
        type: "string"
        description: "Unique key used to delete the snapshot. It is different from\
          \ the `key` so that only the creator can delete the snapshot. Required if\
          \ `external` is `true`."
        x-go-name: "DeleteKey"
      expires:
        type: "integer"
        format: "int64"
        description: "When the snapshot should expire in seconds in seconds. Default\
          \ is never to expire."
        default: 0
        x-go-name: "Expires"
      external:
        type: "boolean"
        description: "these are passed when storing an external snapshot ref\nSave\
          \ the snapshot on an external server rather than locally."
        default: false
        x-go-name: "External"
      key:
        type: "string"
        description: "Define the unique key. Required if `external` is `true`."
        x-go-name: "Key"
      name:
        type: "string"
        description: "Snapshot name"
        x-go-name: "Name"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  CreateFolderCommand:
    type: "object"
    properties:
      title:
        type: "string"
      uid:
        type: "string"
  CreateLibraryElementCommand:
    type: "object"
    properties:
      folderId:
        type: "integer"
        format: "int64"
        description: "ID of the folder where the library element is stored."
      folderUid:
        type: "string"
        description: "UID of the folder where the library element is stored."
      kind:
        type: "integer"
        format: "int64"
        description: "Kind of element to create, Use 1 for library panels or 2 for\
          \ c.\nDescription:\n1 - library panels\n2 - library variables"
        enum:
        - 1
        - 2
      model:
        type: "object"
        description: "The JSON model for the library element."
        properties: {}
      name:
        type: "string"
        description: "Name of the library element."
      uid:
        type: "string"
    description: "CreateLibraryElementCommand is the command for adding a LibraryElement"
  CreateOrUpdateConfigCmd:
    type: "object"
    properties:
      dashboardId:
        type: "integer"
        format: "int64"
      dashboardUid:
        type: "string"
      dashboards:
        type: "array"
        items:
          $ref: "#/definitions/DashboardDTO"
      enableCsv:
        type: "boolean"
      enableDashboardUrl:
        type: "boolean"
      formats:
        type: "array"
        items:
          $ref: "#/definitions/Type"
      message:
        type: "string"
      name:
        type: "string"
      options:
        $ref: "#/definitions/ReportOptionsDTO"
      recipients:
        type: "string"
      replyTo:
        type: "string"
      schedule:
        $ref: "#/definitions/ScheduleDTO"
      state:
        type: "string"
      templateVars:
        type: "object"
        properties: {}
  CreateOrgCommand:
    type: "object"
    properties:
      name:
        type: "string"
  CreateQueryInQueryHistoryCommand:
    type: "object"
    required:
    - "queries"
    properties:
      datasourceUid:
        type: "string"
        example: "PE1C5CBDA0504A6A3"
        description: "UID of the data source for which are queries stored."
      queries:
        $ref: "#/definitions/Json"
    description: "CreateQueryInQueryHistoryCommand is the command for adding query\
      \ history"
  CreateRoleWithPermissionsCommand:
    type: "object"
    properties:
      description:
        type: "string"
      displayName:
        type: "string"
      group:
        type: "string"
      hidden:
        type: "boolean"
      name:
        type: "string"
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/Permission"
      uid:
        type: "string"
      version:
        type: "integer"
        format: "int64"
  CreateTeamCommand:
    type: "object"
    properties:
      email:
        type: "string"
      name:
        type: "string"
  CustomPermissionsRecordDTO:
    type: "object"
    properties:
      customPermissions:
        type: "string"
      granteeName:
        type: "string"
      granteeType:
        type: "string"
      granteeUrl:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      isFolder:
        type: "boolean"
      orgId:
        type: "integer"
        format: "int64"
      orgRole:
        type: "string"
      slug:
        type: "string"
      title:
        type: "string"
      uid:
        type: "string"
      url:
        type: "string"
      usersCount:
        type: "integer"
        format: "int64"
    example:
      granteeUrl: "granteeUrl"
      customPermissions: "customPermissions"
      usersCount: 1
      title: "title"
      orgId: 6
      url: "url"
      granteeName: "granteeName"
      uid: "uid"
      isFolder: true
      orgRole: "orgRole"
      id: 0
      granteeType: "granteeType"
      slug: "slug"
  DashboardAclInfoDTO:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
      dashboardId:
        type: "integer"
        format: "int64"
      folderId:
        type: "integer"
        format: "int64"
      inherited:
        type: "boolean"
      isFolder:
        type: "boolean"
      permission:
        $ref: "#/definitions/PermissionType"
      permissionName:
        type: "string"
      role:
        type: "string"
        enum:
        - "Viewer"
        - "Editor"
        - "Admin"
      slug:
        type: "string"
      team:
        type: "string"
      teamAvatarUrl:
        type: "string"
      teamEmail:
        type: "string"
      teamId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      uid:
        type: "string"
      updated:
        type: "string"
        format: "date-time"
      url:
        type: "string"
      userAvatarUrl:
        type: "string"
      userEmail:
        type: "string"
      userId:
        type: "integer"
        format: "int64"
      userLogin:
        type: "string"
    example:
      role: "Viewer"
      created: "2000-01-23T04:56:07.000+00:00"
      userAvatarUrl: "userAvatarUrl"
      permission: {}
      teamEmail: "teamEmail"
      team: "team"
      title: "title"
      userId: 5
      folderId: 6
      url: "url"
      userLogin: "userLogin"
      uid: "uid"
      isFolder: true
      dashboardId: 0
      inherited: true
      teamId: 1
      userEmail: "userEmail"
      updated: "2000-01-23T04:56:07.000+00:00"
      slug: "slug"
      teamAvatarUrl: "teamAvatarUrl"
      permissionName: "permissionName"
  DashboardAclUpdateItem:
    type: "object"
    properties:
      permission:
        $ref: "#/definitions/PermissionType"
      role:
        type: "string"
        enum:
        - "Viewer"
        - "Editor"
        - "Admin"
      teamId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
  DashboardDTO:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/DashboardReportDTO"
      reportVariables:
        type: "object"
        properties: {}
      timeRange:
        $ref: "#/definitions/TimeRangeDTO"
    example:
      reportVariables: "{}"
      dashboard:
        uid: "uid"
        name: "name"
        id: 6
      timeRange:
        from: "from"
        to: "to"
  DashboardFullWithMeta:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/Json"
      meta:
        $ref: "#/definitions/DashboardMeta"
    example:
      meta:
        publicDashboardUid: "publicDashboardUid"
        expires: "2000-01-23T04:56:07.000+00:00"
        canStar: true
        canEdit: true
        isHome: true
        type: "type"
        folderUrl: "folderUrl"
        hasAcl: true
        provisioned: true
        canAdmin: true
        isPublic: true
        canDelete: true
        slug: "slug"
        annotationsPermissions:
          organization:
            canEdit: true
            canAdd: true
            canDelete: true
          dashboard:
            canEdit: true
            canAdd: true
            canDelete: true
        updatedBy: "updatedBy"
        created: "2000-01-23T04:56:07.000+00:00"
        canSave: true
        isStarred: true
        provisionedExternalId: "provisionedExternalId"
        version: 6
        folderId: 0
        url: "url"
        folderTitle: "folderTitle"
        folderUid: "folderUid"
        isFolder: true
        createdBy: "createdBy"
        isSnapshot: true
        updated: "2000-01-23T04:56:07.000+00:00"
      dashboard: {}
  DashboardMeta:
    type: "object"
    properties:
      annotationsPermissions:
        $ref: "#/definitions/AnnotationPermission"
      canAdmin:
        type: "boolean"
      canDelete:
        type: "boolean"
      canEdit:
        type: "boolean"
      canSave:
        type: "boolean"
      canStar:
        type: "boolean"
      created:
        type: "string"
        format: "date-time"
      createdBy:
        type: "string"
      expires:
        type: "string"
        format: "date-time"
      folderId:
        type: "integer"
        format: "int64"
      folderTitle:
        type: "string"
      folderUid:
        type: "string"
      folderUrl:
        type: "string"
      hasAcl:
        type: "boolean"
      isFolder:
        type: "boolean"
      isHome:
        type: "boolean"
      isPublic:
        type: "boolean"
      isSnapshot:
        type: "boolean"
      isStarred:
        type: "boolean"
      provisioned:
        type: "boolean"
      provisionedExternalId:
        type: "string"
      publicDashboardUid:
        type: "string"
      slug:
        type: "string"
      type:
        type: "string"
      updated:
        type: "string"
        format: "date-time"
      updatedBy:
        type: "string"
      url:
        type: "string"
      version:
        type: "integer"
        format: "int64"
    example:
      publicDashboardUid: "publicDashboardUid"
      expires: "2000-01-23T04:56:07.000+00:00"
      canStar: true
      canEdit: true
      isHome: true
      type: "type"
      folderUrl: "folderUrl"
      hasAcl: true
      provisioned: true
      canAdmin: true
      isPublic: true
      canDelete: true
      slug: "slug"
      annotationsPermissions:
        organization:
          canEdit: true
          canAdd: true
          canDelete: true
        dashboard:
          canEdit: true
          canAdd: true
          canDelete: true
      updatedBy: "updatedBy"
      created: "2000-01-23T04:56:07.000+00:00"
      canSave: true
      isStarred: true
      provisionedExternalId: "provisionedExternalId"
      version: 6
      folderId: 0
      url: "url"
      folderTitle: "folderTitle"
      folderUid: "folderUid"
      isFolder: true
      createdBy: "createdBy"
      isSnapshot: true
      updated: "2000-01-23T04:56:07.000+00:00"
  DashboardRedirect:
    type: "object"
    properties:
      redirectUri:
        type: "string"
  DashboardReportDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      uid:
        type: "string"
    example:
      uid: "uid"
      name: "name"
      id: 6
  DashboardSnapshot:
    type: "object"
    properties:
      Created:
        type: "string"
        format: "date-time"
      Dashboard:
        $ref: "#/definitions/Json"
      DashboardEncrypted:
        type: "array"
        items:
          type: "integer"
          format: "uint8"
      DeleteKey:
        type: "string"
      Expires:
        type: "string"
        format: "date-time"
      External:
        type: "boolean"
      ExternalDeleteUrl:
        type: "string"
      ExternalUrl:
        type: "string"
      Id:
        type: "integer"
        format: "int64"
      Key:
        type: "string"
      Name:
        type: "string"
      OrgId:
        type: "integer"
        format: "int64"
      Updated:
        type: "string"
        format: "date-time"
      UserId:
        type: "integer"
        format: "int64"
    description: "DashboardSnapshot model"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  DashboardSnapshotDTO:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
      expires:
        type: "string"
        format: "date-time"
      external:
        type: "boolean"
      externalUrl:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      key:
        type: "string"
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      updated:
        type: "string"
        format: "date-time"
      userId:
        type: "integer"
        format: "int64"
    description: "DashboardSnapshotDTO without dashboard map"
    example:
      externalUrl: "externalUrl"
      expires: "2000-01-23T04:56:07.000+00:00"
      external: true
      created: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: 0
      updated: "2000-01-23T04:56:07.000+00:00"
      userId: 1
      key: "key"
      orgId: 6
  DashboardTagCloudItem:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int64"
      term:
        type: "string"
    example:
      count: 0
      term: "term"
  DashboardVersionDTO:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
      createdBy:
        type: "string"
      dashboardId:
        type: "integer"
        format: "int64"
      dashboardUid:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      message:
        type: "string"
      parentVersion:
        type: "integer"
        format: "int64"
      restoredFrom:
        type: "integer"
        format: "int64"
      version:
        type: "integer"
        format: "int64"
    example:
      createdBy: "createdBy"
      dashboardId: 0
      dashboardUid: "dashboardUid"
      created: "2000-01-23T04:56:07.000+00:00"
      id: 6
      restoredFrom: 5
      message: "message"
      version: 5
      parentVersion: 1
  DashboardVersionMeta:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
      createdBy:
        type: "string"
      dashboardId:
        type: "integer"
        format: "int64"
      data:
        $ref: "#/definitions/Json"
      id:
        type: "integer"
        format: "int64"
      message:
        type: "string"
      parentVersion:
        type: "integer"
        format: "int64"
      restoredFrom:
        type: "integer"
        format: "int64"
      uid:
        type: "string"
      version:
        type: "integer"
        format: "int64"
    description: "DashboardVersionMeta extends the dashboard version model with the\
      \ names\nassociated with the UserIds, overriding the field with the same name\
      \ from\nthe DashboardVersion model."
    example:
      uid: "uid"
      data: {}
      createdBy: "createdBy"
      dashboardId: 0
      created: "2000-01-23T04:56:07.000+00:00"
      id: 6
      restoredFrom: 5
      message: "message"
      version: 5
      parentVersion: 1
  DataLink:
    type: "object"
    properties:
      targetBlank:
        type: "boolean"
      title:
        type: "string"
      url:
        type: "string"
    description: "DataLink define what"
  DataResponse:
    type: "object"
    properties:
      Error:
        type: "string"
        description: "Error is a property to be set if the the corresponding DataQuery\
          \ has an error."
      Frames:
        $ref: "#/definitions/Frames"
    title: "DataResponse contains the results from a DataQuery."
    description: "A map of RefIDs (unique query identifiers) to this type makes up\
      \ the Responses property of a QueryDataResponse.\nThe Error property is used\
      \ to allow for partial success responses from the containing QueryDataResponse."
  DataSource:
    type: "object"
    properties:
      access:
        $ref: "#/definitions/DsAccess"
      accessControl:
        $ref: "#/definitions/Metadata"
      basicAuth:
        type: "boolean"
      basicAuthUser:
        type: "string"
      database:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      isDefault:
        type: "boolean"
      jsonData:
        $ref: "#/definitions/Json"
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      readOnly:
        type: "boolean"
      secureJsonFields:
        type: "object"
        additionalProperties:
          type: "boolean"
      type:
        type: "string"
      typeLogoUrl:
        type: "string"
      uid:
        type: "string"
      url:
        type: "string"
      user:
        type: "string"
      version:
        type: "integer"
        format: "int64"
      withCredentials:
        type: "boolean"
    example:
      accessControl: {}
      access: {}
      basicAuthUser: "basicAuthUser"
      basicAuth: true
      readOnly: true
      typeLogoUrl: "typeLogoUrl"
      type: "type"
      version: 1
      orgId: 6
      url: "url"
      uid: "uid"
      database: "database"
      isDefault: true
      jsonData: {}
      withCredentials: true
      name: "name"
      id: 0
      user: "user"
      secureJsonFields:
        key: true
  DataSourceList:
    type: "array"
    items:
      $ref: "#/definitions/DataSourceListItemDTO"
  DataSourceListItemDTO:
    type: "object"
    properties:
      access:
        $ref: "#/definitions/DsAccess"
      basicAuth:
        type: "boolean"
      database:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      isDefault:
        type: "boolean"
      jsonData:
        $ref: "#/definitions/Json"
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      readOnly:
        type: "boolean"
      type:
        type: "string"
      typeLogoUrl:
        type: "string"
      typeName:
        type: "string"
      uid:
        type: "string"
      url:
        type: "string"
      user:
        type: "string"
  DateTime:
    type: "string"
    format: "date-time"
    description: "DateTime is a time but it serializes to ISO8601 format with millis\n\
      It knows how to read 3 different variations of a RFC3339 date time.\nMost APIs\
      \ we encounter want either millisecond or second precision times.\nThis just\
      \ tries to make it worry-free."
    x-go-package: "github.com/go-openapi/strfmt"
  DayOfMonthRange:
    type: "object"
    properties:
      Begin:
        type: "integer"
        format: "int64"
      End:
        type: "integer"
        format: "int64"
    title: "A DayOfMonthRange is an inclusive range that may have negative Beginning/End\
      \ values that represent distance from the End of the month Beginning at -1."
    example:
      Begin: 0
      End: 6
    x-go-package: "github.com/prometheus/alertmanager/timeinterval"
  DeleteTokenCommand:
    type: "object"
    properties:
      instance:
        type: "string"
  DiscoveryBase:
    type: "object"
    required:
    - "status"
    properties:
      error:
        type: "string"
        x-go-name: "Error"
      errorType:
        $ref: "#/definitions/ErrorType"
      status:
        type: "string"
        x-go-name: "Status"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  DsAccess:
    type: "string"
  DsPermissionType:
    type: "integer"
    format: "int64"
    description: "Datasource permission\nDescription:\n`0` - No Access\n`1` - Query\n\
      Enum: 0,1"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  Duration:
    type: "integer"
    title: "Duration is a type used for marshalling durations."
    format: "int64"
  EmailConfig:
    type: "object"
    properties:
      auth_identity:
        type: "string"
        x-go-name: "AuthIdentity"
      auth_password:
        $ref: "#/definitions/Secret"
      auth_secret:
        $ref: "#/definitions/Secret"
      auth_username:
        type: "string"
        x-go-name: "AuthUsername"
      from:
        type: "string"
        x-go-name: "From"
      headers:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Headers"
      hello:
        type: "string"
        x-go-name: "Hello"
      html:
        type: "string"
        x-go-name: "HTML"
      require_tls:
        type: "boolean"
        x-go-name: "RequireTLS"
      send_resolved:
        type: "boolean"
        x-go-name: "VSendResolved"
      smarthost:
        $ref: "#/definitions/HostPort"
      text:
        type: "string"
        x-go-name: "Text"
      tls_config:
        $ref: "#/definitions/TLSConfig"
      to:
        type: "string"
        description: "Email address to notify."
        x-go-name: "To"
    title: "EmailConfig configures notifications via mail."
    x-go-package: "github.com/prometheus/alertmanager/config"
  EmbeddedContactPoint:
    type: "object"
    required:
    - "settings"
    - "type"
    properties:
      disableResolveMessage:
        type: "boolean"
        example: false
        x-go-name: "DisableResolveMessage"
      name:
        type: "string"
        example: "webhook_1"
        description: "Name is used as grouping key in the UI. Contact points with\
          \ the\nsame name will be grouped in the UI."
        x-go-name: "Name"
      provenance:
        type: "string"
        readOnly: true
        x-go-name: "Provenance"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
        example: "webhook"
        enum:
        - "alertmanager"
        - " dingding"
        - " discord"
        - " email"
        - " googlechat"
        - " kafka"
        - " line"
        - " opsgenie"
        - " pagerduty"
        - " pushover"
        - " sensugo"
        - " slack"
        - " teams"
        - " telegram"
        - " threema"
        - " victorops"
        - " webhook"
        - " wecom"
        x-go-name: "Type"
      uid:
        type: "string"
        example: "my_external_reference"
        description: "UID is the unique identifier of the contact point. The UID can\
          \ be\nset by the user."
        x-go-name: "UID"
    description: "EmbeddedContactPoint is the contact point type that is used\nby\
      \ grafanas embedded alertmanager implementation."
    example:
      settings: {}
      uid: "my_external_reference"
      provenance: "provenance"
      disableResolveMessage: false
      name: "webhook_1"
      type: "webhook"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  ErrorResponseBody:
    type: "object"
    required:
    - "message"
    properties:
      error:
        type: "string"
        description: "Error An optional detailed description of the actual error.\
          \ Only included if running in developer mode."
      message:
        type: "string"
        description: "a human readable version of the error"
      status:
        type: "string"
        description: "Status An optional status to denote the cause of the error.\n\
          \nFor example, a 412 Precondition Failed error may include additional information\
          \ of why that error happened."
    example:
      error: "error"
      message: "message"
      status: "status"
  ErrorType:
    type: "string"
    title: "ErrorType models the different API error types."
    x-go-package: "github.com/prometheus/client_golang/api/prometheus/v1"
  EvalAlertConditionCommand:
    type: "object"
    properties:
      condition:
        type: "string"
        x-go-name: "Condition"
      data:
        type: "array"
        items:
          $ref: "#/definitions/AlertQuery"
        x-go-name: "Data"
      now:
        type: "string"
        format: "date-time"
        x-go-name: "Now"
    description: "EvalAlertConditionCommand is the command for evaluating a condition"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/models"
  EvalMatch:
    type: "object"
    properties:
      metric:
        type: "string"
      tags:
        type: "object"
        additionalProperties:
          type: "string"
      value:
        $ref: "#/definitions/Float"
    example:
      metric: "metric"
      value:
        Float64: 0.8008281904610115
        Valid: true
      tags:
        key: "tags"
  EvalQueriesPayload:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/AlertQuery"
        x-go-name: "Data"
      now:
        type: "string"
        format: "date-time"
        x-go-name: "Now"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  EvalQueriesResponse: {}
  ExtendedReceiver:
    type: "object"
    properties:
      email_configs:
        $ref: "#/definitions/EmailConfig"
      grafana_managed_receiver:
        $ref: "#/definitions/PostableGrafanaReceiver"
      opsgenie_configs:
        $ref: "#/definitions/OpsGenieConfig"
      pagerduty_configs:
        $ref: "#/definitions/PagerdutyConfig"
      pushover_configs:
        $ref: "#/definitions/PushoverConfig"
      slack_configs:
        $ref: "#/definitions/SlackConfig"
      victorops_configs:
        $ref: "#/definitions/VictorOpsConfig"
      webhook_configs:
        $ref: "#/definitions/WebhookConfig"
      wechat_configs:
        $ref: "#/definitions/WechatConfig"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  FailedUser:
    type: "object"
    properties:
      Error:
        type: "string"
      Login:
        type: "string"
    description: "FailedUser holds the information of an user that failed"
    example:
      Error: "Error"
      Login: "Login"
  Failure:
    $ref: "#/definitions/ResponseDetails"
  Field:
    type: "object"
    properties:
      config:
        $ref: "#/definitions/FieldConfig"
      labels:
        $ref: "#/definitions/Labels"
      name:
        type: "string"
        description: "Name is default identifier of the field. The name does not have\
          \ to be unique, but the combination\nof name and Labels should be unique\
          \ for proper behavior in all situations."
    title: "Field represents a typed column of data within a Frame."
    description: "A Field is essentially a slice of various types with extra properties\
      \ and methods.\nSee NewField() for supported types.\n\nThe slice data in the\
      \ Field is a not exported, so methods on the Field are used to to manipulate\
      \ its data."
  FieldConfig:
    type: "object"
    properties:
      color:
        type: "object"
        description: "Map values to a display color\nNOTE: this interface is under\
          \ development in the frontend... so simple map for now"
        additionalProperties:
          type: "object"
          properties: {}
      custom:
        type: "object"
        description: "Panel Specific Values"
        additionalProperties:
          type: "object"
          properties: {}
      decimals:
        type: "integer"
        format: "uint16"
      description:
        type: "string"
        description: "Description is human readable field metadata"
      displayName:
        type: "string"
        description: "DisplayName overrides Grafana default naming, should not be\
          \ used from a data source"
      displayNameFromDS:
        type: "string"
        description: "DisplayNameFromDS overrides Grafana default naming in a better\
          \ way that allows users to override it easily."
      filterable:
        type: "boolean"
        description: "Filterable indicates if the Field's data can be filtered by\
          \ additional calls."
      interval:
        type: "number"
        format: "double"
        description: "Interval indicates the expected regular step between values\
          \ in the series.\nWhen an interval exists, consumers can identify \"missing\"\
          \ values when the expected value is not present.\nThe grafana timeseries\
          \ visualization will render disconnected values when missing values are\
          \ found it the time field.\nThe interval uses the same units as the values.\
          \  For time.Time, this is defined in milliseconds."
      links:
        type: "array"
        description: "The behavior when clicking on a result"
        items:
          $ref: "#/definitions/DataLink"
      mappings:
        $ref: "#/definitions/ValueMappings"
      max:
        $ref: "#/definitions/ConfFloat64"
      min:
        $ref: "#/definitions/ConfFloat64"
      noValue:
        type: "string"
        description: "Alternative to empty string"
      path:
        type: "string"
        description: "Path is an explicit path to the field in the datasource. When\
          \ the frame meta includes a path,\nthis will default to `${frame.meta.path}/${field.name}\n\
          \nWhen defined, this value can be used as an identifier within the datasource\
          \ scope, and\nmay be used as an identifier to update values in a subsequent\
          \ request"
      thresholds:
        $ref: "#/definitions/ThresholdsConfig"
      unit:
        type: "string"
        description: "Numeric Options"
      writeable:
        type: "boolean"
        description: "Writeable indicates that the datasource knows how to update\
          \ this value"
    title: "FieldConfig represents the display properties for a Field."
  FindTagsResult:
    type: "object"
    properties:
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagsDTO"
    title: "FindTagsResult is the result of a tags search."
    example:
      tags:
      - count: 0
        tag: "tag"
      - count: 0
        tag: "tag"
  Float:
    type: "object"
    properties:
      Float64:
        type: "number"
        format: "double"
      Valid:
        type: "boolean"
    title: "Float is a nullable float64."
    description: "It does not consider zero values to be null.\nIt will decode to\
      \ null, not zero, if null."
    example:
      Float64: 0.8008281904610115
      Valid: true
  Folder:
    type: "object"
    properties:
      canAdmin:
        type: "boolean"
      canDelete:
        type: "boolean"
      canEdit:
        type: "boolean"
      canSave:
        type: "boolean"
      created:
        type: "string"
        format: "date-time"
      createdBy:
        type: "string"
      hasAcl:
        type: "boolean"
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      uid:
        type: "string"
      updated:
        type: "string"
        format: "date-time"
      updatedBy:
        type: "string"
      url:
        type: "string"
      version:
        type: "integer"
        format: "int64"
    example:
      updatedBy: "updatedBy"
      created: "2000-01-23T04:56:07.000+00:00"
      canEdit: true
      canSave: true
      title: "title"
      version: 6
      url: "url"
      uid: "uid"
      hasAcl: true
      createdBy: "createdBy"
      canAdmin: true
      canDelete: true
      id: 0
      updated: "2000-01-23T04:56:07.000+00:00"
  FolderSearchHit:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      uid:
        type: "string"
    example:
      uid: "uid"
      id: 0
      title: "title"
  Frame:
    type: "object"
    properties:
      Fields:
        type: "array"
        description: "Fields are the columns of a frame.\nAll Fields must be of the\
          \ same the length when marshalling the Frame for transmission."
        items:
          $ref: "#/definitions/Field"
      Meta:
        $ref: "#/definitions/FrameMeta"
      Name:
        type: "string"
        description: "Name is used in some Grafana visualizations."
      RefID:
        type: "string"
        description: "RefID is a property that can be set to match a Frame to its\
          \ originating query."
    title: "Frame is a columnar data structure where each column is a Field."
    description: "Each Field is well typed by its FieldType and supports optional\
      \ Labels.\n\nA Frame is a general data container for Grafana. A Frame can be\
      \ table data\nor time series data depending on its content and field types."
  FrameMeta:
    type: "object"
    properties:
      channel:
        type: "string"
        description: "Channel is the path to a stream in grafana live that has real-time\
          \ updates for this data."
      custom:
        type: "object"
        description: "Custom datasource specific values."
        properties: {}
      executedQueryString:
        type: "string"
        description: "ExecutedQueryString is the raw query sent to the underlying\
          \ system. All macros and templating\nhave been applied.  When metadata contains\
          \ this value, it will be shown in the query inspector."
      notices:
        type: "array"
        description: "Notices provide additional information about the data in the\
          \ Frame that\nGrafana can display to the user in the user interface."
        items:
          $ref: "#/definitions/Notice"
      path:
        type: "string"
        description: "Path is a browsable path on the datasource."
      pathSeparator:
        type: "string"
        description: "PathSeparator defines the separator pattern to decode a hierarchy.\
          \ The default separator is '/'."
      preferredVisualisationType:
        $ref: "#/definitions/VisType"
      stats:
        type: "array"
        description: "Stats is an array of query result statistics."
        items:
          $ref: "#/definitions/QueryStat"
      type:
        $ref: "#/definitions/FrameType"
    title: "FrameMeta matches:"
    description: "https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11\n\
      NOTE -- in javascript this can accept any `[key: string]: any;` however\nthis\
      \ interface only exposes the values we want to be exposed"
  FrameType:
    type: "string"
    description: "A FrameType string, when present in a frame's metadata, asserts\
      \ that the\nframe's structure conforms to the FrameType's specification.\nThis\
      \ property is currently optional, so FrameType may be FrameTypeUnknown even\
      \ if the properties of\nthe Frame correspond to a defined FrameType."
  Frames:
    title: "Frames is a slice of Frame pointers."
    type: "array"
    description: "It is the main data container within a backend.DataResponse."
    items:
      $ref: "#/definitions/Frame"
  GetAnnotationTagsResponse:
    type: "object"
    properties:
      result:
        $ref: "#/definitions/FindTagsResult"
    title: "GetAnnotationTagsResponse is a response struct for FindTagsResult."
    example:
      result:
        tags:
        - count: 0
          tag: "tag"
        - count: 0
          tag: "tag"
  GetHomeDashboardResponse:
    title: "Get home dashboard response."
    allOf:
    - type: "object"
      properties:
        dashboard:
          $ref: "#/definitions/Json"
        meta:
          $ref: "#/definitions/DashboardMeta"
    - type: "object"
      properties:
        redirectUri:
          type: "string"
  GettableAlertmanagers:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/AlertManagersResult"
      status:
        type: "string"
        x-go-name: "Status"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GettableApiAlertingConfig:
    type: "object"
    properties:
      global:
        $ref: "#/definitions/GlobalConfig"
      inhibit_rules:
        type: "array"
        items:
          $ref: "#/definitions/InhibitRule"
        x-go-name: "InhibitRules"
      muteTimeProvenances:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/Provenance"
        x-go-name: "MuteTimeProvenances"
      mute_time_intervals:
        type: "array"
        items:
          $ref: "#/definitions/MuteTimeInterval"
        x-go-name: "MuteTimeIntervals"
      receivers:
        type: "array"
        description: "Override with our superset receiver type"
        items:
          $ref: "#/definitions/GettableApiReceiver"
        x-go-name: "Receivers"
      route:
        $ref: "#/definitions/Route"
      templates:
        type: "array"
        items:
          type: "string"
        x-go-name: "Templates"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GettableApiReceiver:
    type: "object"
    properties:
      email_configs:
        type: "array"
        items:
          $ref: "#/definitions/EmailConfig"
        x-go-name: "EmailConfigs"
      grafana_managed_receiver_configs:
        type: "array"
        items:
          $ref: "#/definitions/GettableGrafanaReceiver"
        x-go-name: "GrafanaManagedReceivers"
      name:
        type: "string"
        description: "A unique identifier for this receiver."
        x-go-name: "Name"
      opsgenie_configs:
        type: "array"
        items:
          $ref: "#/definitions/OpsGenieConfig"
        x-go-name: "OpsGenieConfigs"
      pagerduty_configs:
        type: "array"
        items:
          $ref: "#/definitions/PagerdutyConfig"
        x-go-name: "PagerdutyConfigs"
      pushover_configs:
        type: "array"
        items:
          $ref: "#/definitions/PushoverConfig"
        x-go-name: "PushoverConfigs"
      slack_configs:
        type: "array"
        items:
          $ref: "#/definitions/SlackConfig"
        x-go-name: "SlackConfigs"
      sns_configs:
        type: "array"
        items:
          $ref: "#/definitions/SNSConfig"
        x-go-name: "SNSConfigs"
      victorops_configs:
        type: "array"
        items:
          $ref: "#/definitions/VictorOpsConfig"
        x-go-name: "VictorOpsConfigs"
      webhook_configs:
        type: "array"
        items:
          $ref: "#/definitions/WebhookConfig"
        x-go-name: "WebhookConfigs"
      wechat_configs:
        type: "array"
        items:
          $ref: "#/definitions/WechatConfig"
        x-go-name: "WechatConfigs"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GettableExtendedRuleNode:
    type: "object"
    properties:
      alert:
        type: "string"
        x-go-name: "Alert"
      annotations:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Annotations"
      expr:
        type: "string"
        x-go-name: "Expr"
      for:
        $ref: "#/definitions/Duration"
      grafana_alert:
        $ref: "#/definitions/GettableGrafanaRule"
      labels:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Labels"
      record:
        type: "string"
        x-go-name: "Record"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GettableGrafanaReceiver:
    type: "object"
    properties:
      disableResolveMessage:
        type: "boolean"
        x-go-name: "DisableResolveMessage"
      name:
        type: "string"
        x-go-name: "Name"
      provenance:
        $ref: "#/definitions/Provenance"
      secureFields:
        type: "object"
        additionalProperties:
          type: "boolean"
        x-go-name: "SecureFields"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
        x-go-name: "Type"
      uid:
        type: "string"
        x-go-name: "UID"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GettableGrafanaReceivers:
    type: "object"
    properties:
      grafana_managed_receiver_configs:
        type: "array"
        items:
          $ref: "#/definitions/GettableGrafanaReceiver"
        x-go-name: "GrafanaManagedReceivers"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GettableGrafanaRule:
    type: "object"
    properties:
      condition:
        type: "string"
        x-go-name: "Condition"
      data:
        type: "array"
        items:
          $ref: "#/definitions/AlertQuery"
        x-go-name: "Data"
      exec_err_state:
        type: "string"
        enum:
        - "OK"
        - "Alerting"
        - "Error"
        x-go-enum-desc: "OK OkErrState\nAlerting AlertingErrState\nError ErrorErrState"
        x-go-name: "ExecErrState"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "ID"
      intervalSeconds:
        type: "integer"
        format: "int64"
        x-go-name: "IntervalSeconds"
      namespace_id:
        type: "integer"
        format: "int64"
        x-go-name: "NamespaceID"
      namespace_uid:
        type: "string"
        x-go-name: "NamespaceUID"
      no_data_state:
        type: "string"
        enum:
        - "Alerting"
        - "NoData"
        - "OK"
        x-go-enum-desc: "Alerting Alerting\nNoData NoData\nOK OK"
        x-go-name: "NoDataState"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
      provenance:
        $ref: "#/definitions/Provenance"
      rule_group:
        type: "string"
        x-go-name: "RuleGroup"
      title:
        type: "string"
        x-go-name: "Title"
      uid:
        type: "string"
        x-go-name: "UID"
      updated:
        type: "string"
        format: "date-time"
        x-go-name: "Updated"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GettableNGalertConfig:
    type: "object"
    properties:
      alertmanagers:
        type: "array"
        items:
          type: "string"
        x-go-name: "Alertmanagers"
      alertmanagersChoice:
        type: "string"
        enum:
        - "all"
        - "internal"
        - "external"
        x-go-enum-desc: "all AllAlertmanagers\ninternal InternalAlertmanager\nexternal\
          \ ExternalAlertmanagers"
        x-go-name: "AlertmanagersChoice"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GettableRuleGroupConfig:
    type: "object"
    properties:
      interval:
        $ref: "#/definitions/Duration"
      name:
        type: "string"
        x-go-name: "Name"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/GettableExtendedRuleNode"
        x-go-name: "Rules"
      source_tenants:
        type: "array"
        items:
          type: "string"
        x-go-name: "SourceTenants"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GettableStatus:
    type: "object"
    required:
    - "cluster"
    - "config"
    - "uptime"
    - "versionInfo"
    properties:
      cluster:
        $ref: "#/definitions/clusterStatus"
      config:
        $ref: "#/definitions/PostableApiAlertingConfig"
      uptime:
        type: "string"
        format: "date-time"
        description: "uptime"
        x-go-name: "Uptime"
      versionInfo:
        $ref: "#/definitions/versionInfo"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GettableUserConfig:
    type: "object"
    properties:
      alertmanager_config:
        $ref: "#/definitions/GettableApiAlertingConfig"
      template_file_provenances:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/Provenance"
        x-go-name: "TemplateFileProvenances"
      template_files:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "TemplateFiles"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  GlobalConfig:
    type: "object"
    properties:
      http_config:
        $ref: "#/definitions/HTTPClientConfig"
      opsgenie_api_key:
        $ref: "#/definitions/Secret"
      opsgenie_api_key_file:
        type: "string"
        x-go-name: "OpsGenieAPIKeyFile"
      opsgenie_api_url:
        $ref: "#/definitions/URL"
      pagerduty_url:
        $ref: "#/definitions/URL"
      resolve_timeout:
        $ref: "#/definitions/Duration"
      slack_api_url:
        $ref: "#/definitions/SecretURL"
      slack_api_url_file:
        type: "string"
        x-go-name: "SlackAPIURLFile"
      smtp_auth_identity:
        type: "string"
        x-go-name: "SMTPAuthIdentity"
      smtp_auth_password:
        $ref: "#/definitions/Secret"
      smtp_auth_secret:
        $ref: "#/definitions/Secret"
      smtp_auth_username:
        type: "string"
        x-go-name: "SMTPAuthUsername"
      smtp_from:
        type: "string"
        x-go-name: "SMTPFrom"
      smtp_hello:
        type: "string"
        x-go-name: "SMTPHello"
      smtp_require_tls:
        type: "boolean"
        x-go-name: "SMTPRequireTLS"
      smtp_smarthost:
        $ref: "#/definitions/HostPort"
      victorops_api_key:
        $ref: "#/definitions/Secret"
      victorops_api_url:
        $ref: "#/definitions/URL"
      wechat_api_corp_id:
        type: "string"
        x-go-name: "WeChatAPICorpID"
      wechat_api_secret:
        $ref: "#/definitions/Secret"
      wechat_api_url:
        $ref: "#/definitions/URL"
    description: "GlobalConfig defines configuration parameters that are valid globally\n\
      unless overwritten."
    x-go-package: "github.com/prometheus/alertmanager/config"
  HTTPClientConfig:
    type: "object"
    properties:
      authorization:
        $ref: "#/definitions/Authorization"
      basic_auth:
        $ref: "#/definitions/BasicAuth"
      bearer_token:
        $ref: "#/definitions/Secret"
      bearer_token_file:
        type: "string"
        description: "The bearer token file for the targets. Deprecated in favour\
          \ of\nAuthorization.CredentialsFile."
        x-go-name: "BearerTokenFile"
      follow_redirects:
        type: "boolean"
        description: "FollowRedirects specifies whether the client should follow HTTP\
          \ 3xx redirects.\nThe omitempty flag is not set, because it would be hidden\
          \ from the\nmarshalled configuration when set to false."
        x-go-name: "FollowRedirects"
      oauth2:
        $ref: "#/definitions/OAuth2"
      proxy_url:
        $ref: "#/definitions/URL"
      tls_config:
        $ref: "#/definitions/TLSConfig"
    title: "HTTPClientConfig configures an HTTP client."
    x-go-package: "github.com/prometheus/common/config"
  Hit:
    type: "object"
    properties:
      folderId:
        type: "integer"
        format: "int64"
      folderTitle:
        type: "string"
      folderUid:
        type: "string"
      folderUrl:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      isStarred:
        type: "boolean"
      slug:
        type: "string"
      sortMeta:
        type: "integer"
        format: "int64"
      sortMetaName:
        type: "string"
      tags:
        type: "array"
        items:
          type: "string"
      title:
        type: "string"
      type:
        $ref: "#/definitions/HitType"
      uid:
        type: "string"
      uri:
        type: "string"
      url:
        type: "string"
  HitList:
    type: "array"
    items:
      $ref: "#/definitions/Hit"
  HitType:
    type: "string"
  HostPort:
    type: "object"
    properties:
      Host:
        type: "string"
      Port:
        type: "string"
    title: "HostPort represents a \"host:port\" network address."
    x-go-package: "github.com/prometheus/alertmanager/config"
  ImportDashboardInput:
    type: "object"
    properties:
      name:
        type: "string"
      pluginId:
        type: "string"
      type:
        type: "string"
      value:
        type: "string"
    title: "ImportDashboardInput definition of input parameters when importing a dashboard."
  ImportDashboardRequest:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/Json"
      folderId:
        type: "integer"
        format: "int64"
      folderUid:
        type: "string"
      inputs:
        type: "array"
        items:
          $ref: "#/definitions/ImportDashboardInput"
      overwrite:
        type: "boolean"
      path:
        type: "string"
      pluginId:
        type: "string"
    title: "ImportDashboardRequest request object for importing a dashboard."
  ImportDashboardResponse:
    type: "object"
    properties:
      dashboardId:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      folderId:
        type: "integer"
        format: "int64"
      imported:
        type: "boolean"
      importedRevision:
        type: "integer"
        format: "int64"
      importedUri:
        type: "string"
      importedUrl:
        type: "string"
      path:
        type: "string"
      pluginId:
        type: "string"
      removed:
        type: "boolean"
      revision:
        type: "integer"
        format: "int64"
      slug:
        type: "string"
      title:
        type: "string"
      uid:
        type: "string"
    title: "ImportDashboardResponse response object returned when importing a dashboard."
    example:
      importedRevision: 1
      pluginId: "pluginId"
      description: "description"
      title: "title"
      folderId: 6
      revision: 5
      path: "path"
      uid: "uid"
      importedUri: "importedUri"
      removed: true
      dashboardId: 0
      imported: true
      importedUrl: "importedUrl"
      slug: "slug"
  InclusiveRange:
    type: "object"
    properties:
      Begin:
        type: "integer"
        format: "int64"
      End:
        type: "integer"
        format: "int64"
    title: "InclusiveRange is used to hold the Beginning and End values of many time\
      \ interval components."
    x-go-package: "github.com/prometheus/alertmanager/timeinterval"
  InhibitRule:
    type: "object"
    properties:
      equal:
        $ref: "#/definitions/LabelNames"
      source_match:
        type: "object"
        description: "SourceMatch defines a set of labels that have to equal the given\n\
          value for source alerts. Deprecated. Remove before v1.0 release."
        additionalProperties:
          type: "string"
        x-go-name: "SourceMatch"
      source_match_re:
        $ref: "#/definitions/MatchRegexps"
      source_matchers:
        $ref: "#/definitions/Matchers"
      target_match:
        type: "object"
        description: "TargetMatch defines a set of labels that have to equal the given\n\
          value for target alerts. Deprecated. Remove before v1.0 release."
        additionalProperties:
          type: "string"
        x-go-name: "TargetMatch"
      target_match_re:
        $ref: "#/definitions/MatchRegexps"
      target_matchers:
        $ref: "#/definitions/Matchers"
    description: "InhibitRule defines an inhibition rule that mutes alerts that match\
      \ the\ntarget labels if an alert matching the source labels exists.\nBoth alerts\
      \ have to have a set of labels being equal."
    x-go-package: "github.com/prometheus/alertmanager/config"
  InspectType:
    type: "integer"
    title: "InspectType is a type for the Inspect property of a Notice."
    format: "int64"
  ItemDTO:
    type: "object"
    properties:
      alertId:
        type: "integer"
        format: "int64"
      alertName:
        type: "string"
      avatarUrl:
        type: "string"
      created:
        type: "integer"
        format: "int64"
      dashboardId:
        type: "integer"
        format: "int64"
      dashboardUID:
        type: "string"
      data:
        $ref: "#/definitions/Json"
      email:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      login:
        type: "string"
      newState:
        type: "string"
      panelId:
        type: "integer"
        format: "int64"
      prevState:
        type: "string"
      tags:
        type: "array"
        items:
          type: "string"
      text:
        type: "string"
      time:
        type: "integer"
        format: "int64"
      timeEnd:
        type: "integer"
        format: "int64"
      updated:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
    example:
      timeEnd: 7
      panelId: 5
      data: {}
      avatarUrl: "avatarUrl"
      dashboardUID: "dashboardUID"
      created: 6
      login: "login"
      userId: 3
      tags:
      - "tags"
      - "tags"
      prevState: "prevState"
      alertName: "alertName"
      dashboardId: 1
      alertId: 0
      id: 5
      text: "text"
      time: 2
      updated: 9
      email: "email"
      newState: "newState"
  Json:
    type: "object"
    x-go-package: "github.com/grafana/grafana/pkg/components/simplejson"
  Label:
    type: "object"
    properties:
      Name:
        type: "string"
        x-go-name: "Value"
    title: "Label is a key/value pair of strings."
    x-go-package: "github.com/prometheus/prometheus/pkg/labels"
  LabelName:
    type: "string"
    description: "A LabelName is a key for a LabelSet or Metric.  It has a value associated\n\
      therewith."
    x-go-package: "github.com/prometheus/common/model"
  LabelNames:
    title: "LabelNames is a sortable LabelName slice. In implements sort.Interface."
    type: "array"
    items:
      $ref: "#/definitions/LabelName"
    x-go-package: "github.com/prometheus/common/model"
  LabelSet:
    type: "object"
    description: "A LabelSet is a collection of LabelName and LabelValue pairs.  The\
      \ LabelSet\nmay be fully-qualified down to the point where it may resolve to\
      \ a single\nMetric in the data store or not.  All operations that occur within\
      \ the realm\nof a LabelSet can emit a vector of Metric entities to which the\
      \ LabelSet may\nmatch."
    additionalProperties:
      $ref: "#/definitions/LabelValue"
    x-go-package: "github.com/prometheus/common/model"
  LabelValue:
    type: "string"
    title: "A LabelValue is an associated value for a LabelName."
    x-go-package: "github.com/prometheus/common/model"
  Labels:
    type: "array"
    description: "Labels is a sorted set of labels. Order has to be guaranteed upon\n\
      instantiation."
    items:
      $ref: "#/definitions/Label"
    x-go-package: "github.com/prometheus/prometheus/pkg/labels"
  LibraryElementConnectionDTO:
    type: "object"
    properties:
      connectionId:
        type: "integer"
        format: "int64"
      created:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/LibraryElementDTOMetaUser"
      elementId:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      kind:
        type: "integer"
        format: "int64"
    title: "LibraryElementConnectionDTO is the frontend DTO for element connections."
    example:
      elementId: 6
      createdBy:
        avatarUrl: "avatarUrl"
        name: "name"
        id: 5
      created: "2000-01-23T04:56:07.000+00:00"
      kind: 5
      connectionId: 0
      id: 1
  LibraryElementConnectionsResponse:
    type: "object"
    properties:
      result:
        type: "array"
        items:
          $ref: "#/definitions/LibraryElementConnectionDTO"
    title: "LibraryElementConnectionsResponse is a response struct for an array of\
      \ LibraryElementConnectionDTO."
    example:
      result:
      - elementId: 6
        createdBy:
          avatarUrl: "avatarUrl"
          name: "name"
          id: 5
        created: "2000-01-23T04:56:07.000+00:00"
        kind: 5
        connectionId: 0
        id: 1
      - elementId: 6
        createdBy:
          avatarUrl: "avatarUrl"
          name: "name"
          id: 5
        created: "2000-01-23T04:56:07.000+00:00"
        kind: 5
        connectionId: 0
        id: 1
  LibraryElementDTO:
    type: "object"
    properties:
      description:
        type: "string"
      folderId:
        type: "integer"
        format: "int64"
      folderUid:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      kind:
        type: "integer"
        format: "int64"
      meta:
        $ref: "#/definitions/LibraryElementDTOMeta"
      model:
        type: "object"
        properties: {}
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      type:
        type: "string"
      uid:
        type: "string"
      version:
        type: "integer"
        format: "int64"
    title: "LibraryElementDTO is the frontend DTO for entities."
    example:
      uid: "uid"
      folderUid: "folderUid"
      kind: 1
      meta:
        folderUid: "folderUid"
        updatedBy:
          avatarUrl: "avatarUrl"
          name: "name"
          id: 5
        createdBy:
          avatarUrl: "avatarUrl"
          name: "name"
          id: 5
        created: "2000-01-23T04:56:07.000+00:00"
        folderName: "folderName"
        connectedDashboards: 5
        updated: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      description: "description"
      model: "{}"
      id: 6
      type: "type"
      version: 7
      folderId: 0
      orgId: 2
  LibraryElementDTOMeta:
    type: "object"
    properties:
      connectedDashboards:
        type: "integer"
        format: "int64"
      created:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/LibraryElementDTOMetaUser"
      folderName:
        type: "string"
      folderUid:
        type: "string"
      updated:
        type: "string"
        format: "date-time"
      updatedBy:
        $ref: "#/definitions/LibraryElementDTOMetaUser"
    title: "LibraryElementDTOMeta is the meta information for LibraryElementDTO."
    example:
      folderUid: "folderUid"
      updatedBy:
        avatarUrl: "avatarUrl"
        name: "name"
        id: 5
      createdBy:
        avatarUrl: "avatarUrl"
        name: "name"
        id: 5
      created: "2000-01-23T04:56:07.000+00:00"
      folderName: "folderName"
      connectedDashboards: 5
      updated: "2000-01-23T04:56:07.000+00:00"
  LibraryElementDTOMetaUser:
    type: "object"
    properties:
      avatarUrl:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    title: "LibraryElementDTOMetaUser is the meta information for user that creates/changes\
      \ the library element."
    example:
      avatarUrl: "avatarUrl"
      name: "name"
      id: 5
  LibraryElementResponse:
    type: "object"
    properties:
      result:
        $ref: "#/definitions/LibraryElementDTO"
    title: "LibraryElementResponse is a response struct for LibraryElementDTO."
    example:
      result:
        uid: "uid"
        folderUid: "folderUid"
        kind: 1
        meta:
          folderUid: "folderUid"
          updatedBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          createdBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          created: "2000-01-23T04:56:07.000+00:00"
          folderName: "folderName"
          connectedDashboards: 5
          updated: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        description: "description"
        model: "{}"
        id: 6
        type: "type"
        version: 7
        folderId: 0
        orgId: 2
  LibraryElementSearchResponse:
    type: "object"
    properties:
      result:
        $ref: "#/definitions/LibraryElementSearchResult"
    title: "LibraryElementSearchResponse is a response struct for LibraryElementSearchResult."
    example:
      result:
        perPage: 3
        elements:
        - uid: "uid"
          folderUid: "folderUid"
          kind: 1
          meta:
            folderUid: "folderUid"
            updatedBy:
              avatarUrl: "avatarUrl"
              name: "name"
              id: 5
            createdBy:
              avatarUrl: "avatarUrl"
              name: "name"
              id: 5
            created: "2000-01-23T04:56:07.000+00:00"
            folderName: "folderName"
            connectedDashboards: 5
            updated: "2000-01-23T04:56:07.000+00:00"
          name: "name"
          description: "description"
          model: "{}"
          id: 6
          type: "type"
          version: 7
          folderId: 0
          orgId: 2
        - uid: "uid"
          folderUid: "folderUid"
          kind: 1
          meta:
            folderUid: "folderUid"
            updatedBy:
              avatarUrl: "avatarUrl"
              name: "name"
              id: 5
            createdBy:
              avatarUrl: "avatarUrl"
              name: "name"
              id: 5
            created: "2000-01-23T04:56:07.000+00:00"
            folderName: "folderName"
            connectedDashboards: 5
            updated: "2000-01-23T04:56:07.000+00:00"
          name: "name"
          description: "description"
          model: "{}"
          id: 6
          type: "type"
          version: 7
          folderId: 0
          orgId: 2
        page: 9
        totalCount: 2
  LibraryElementSearchResult:
    type: "object"
    properties:
      elements:
        type: "array"
        items:
          $ref: "#/definitions/LibraryElementDTO"
      page:
        type: "integer"
        format: "int64"
      perPage:
        type: "integer"
        format: "int64"
      totalCount:
        type: "integer"
        format: "int64"
    title: "LibraryElementSearchResult is the search result for entities."
    example:
      perPage: 3
      elements:
      - uid: "uid"
        folderUid: "folderUid"
        kind: 1
        meta:
          folderUid: "folderUid"
          updatedBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          createdBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          created: "2000-01-23T04:56:07.000+00:00"
          folderName: "folderName"
          connectedDashboards: 5
          updated: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        description: "description"
        model: "{}"
        id: 6
        type: "type"
        version: 7
        folderId: 0
        orgId: 2
      - uid: "uid"
        folderUid: "folderUid"
        kind: 1
        meta:
          folderUid: "folderUid"
          updatedBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          createdBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          created: "2000-01-23T04:56:07.000+00:00"
          folderName: "folderName"
          connectedDashboards: 5
          updated: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        description: "description"
        model: "{}"
        id: 6
        type: "type"
        version: 7
        folderId: 0
        orgId: 2
      page: 9
      totalCount: 2
  MassDeleteAnnotationsCmd:
    type: "object"
    properties:
      annotationId:
        type: "integer"
        format: "int64"
      dashboardId:
        type: "integer"
        format: "int64"
      dashboardUID:
        type: "string"
      panelId:
        type: "integer"
        format: "int64"
  MatchRegexps:
    type: "object"
    title: "MatchRegexps represents a map of Regexp."
    additionalProperties:
      $ref: "#/definitions/Regexp"
    x-go-package: "github.com/prometheus/alertmanager/config"
  MatchType:
    type: "integer"
    title: "MatchType is an enum for label matching types."
    format: "int64"
    x-go-package: "github.com/prometheus/alertmanager/pkg/labels"
  Matcher:
    type: "object"
    properties:
      Name:
        type: "string"
      Type:
        $ref: "#/definitions/MatchType"
      Value:
        type: "string"
    title: "Matcher models the matching of a label."
    x-go-package: "github.com/prometheus/alertmanager/pkg/labels"
  Matchers:
    type: "array"
    description: "Matchers is a slice of Matchers that is sortable, implements Stringer,\
      \ and\nprovides a Matches method to match a LabelSet against all Matchers in\
      \ the\nslice. Note that some users of Matchers might require it to be sorted."
    items:
      $ref: "#/definitions/Matcher"
  MessageTemplate:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
      provenance:
        $ref: "#/definitions/Provenance"
      template:
        type: "string"
        x-go-name: "Template"
    example:
      template: "template"
      provenance: {}
      name: "name"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  MessageTemplateContent:
    type: "object"
    properties:
      template:
        type: "string"
        x-go-name: "Template"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  MessageTemplates:
    type: "array"
    items:
      $ref: "#/definitions/MessageTemplate"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  Metadata:
    type: "object"
    description: "Metadata contains user accesses for a given resource\nEx: map[string]bool{\"\
      create\":true, \"delete\": true}"
    additionalProperties:
      type: "boolean"
  MetricRequest:
    type: "object"
    required:
    - "from"
    - "queries"
    - "to"
    properties:
      debug:
        type: "boolean"
      from:
        type: "string"
        example: "now-1h"
        description: "From Start time in epoch timestamps in milliseconds or relative\
          \ using Grafana time units."
      queries:
        type: "array"
        example:
        - datasource:
            uid: "PD8C576611E62080A"
          format: "table"
          intervalMs: 86400000
          maxDataPoints: 1092
          rawSql: "SELECT 1 as valueOne, 2 as valueTwo"
          refId: "A"
        description: "queries.refId – Specifies an identifier of the query. Is optional\
          \ and default to “A”.\nqueries.datasourceId – Specifies the data source\
          \ to be queried. Each query in the request must have an unique datasourceId.\n\
          queries.maxDataPoints - Species maximum amount of data points that dashboard\
          \ panel can render. Is optional and default to 100.\nqueries.intervalMs\
          \ - Specifies the time interval in milliseconds of time series. Is optional\
          \ and defaults to 1000."
        items:
          $ref: "#/definitions/Json"
      to:
        type: "string"
        example: "now"
        description: "To End time in epoch timestamps in milliseconds or relative\
          \ using Grafana time units."
  MigrateQueriesToQueryHistoryCommand:
    type: "object"
    properties:
      queries:
        type: "array"
        description: "Array of queries to store in query history."
        items:
          $ref: "#/definitions/QueryToMigrate"
    description: "MigrateQueriesToQueryHistoryCommand is the command used for migration\
      \ of old queries into query history"
  MonthRange:
    type: "object"
    properties:
      Begin:
        type: "integer"
        format: "int64"
      End:
        type: "integer"
        format: "int64"
    title: "A MonthRange is an inclusive range between [1, 12] where 1 = January."
    example:
      Begin: 1
      End: 5
    x-go-package: "github.com/prometheus/alertmanager/timeinterval"
  MultiStatus:
    type: "object"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  MuteTimeInterval:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
      time_intervals:
        type: "array"
        items:
          $ref: "#/definitions/TimeInterval"
        x-go-name: "TimeIntervals"
    title: "MuteTimeInterval represents a named set of time intervals for which a\
      \ route should be muted."
    example:
      time_intervals:
      - times:
        - StartMinute: 2
          EndMinute: 5
        - StartMinute: 2
          EndMinute: 5
        months:
        - Begin: 1
          End: 5
        - Begin: 1
          End: 5
        weekdays:
        - Begin: 7
          End: 9
        - Begin: 7
          End: 9
        days_of_month:
        - Begin: 0
          End: 6
        - Begin: 0
          End: 6
        years:
        - Begin: 3
          End: 2
        - Begin: 3
          End: 2
      - times:
        - StartMinute: 2
          EndMinute: 5
        - StartMinute: 2
          EndMinute: 5
        months:
        - Begin: 1
          End: 5
        - Begin: 1
          End: 5
        weekdays:
        - Begin: 7
          End: 9
        - Begin: 7
          End: 9
        days_of_month:
        - Begin: 0
          End: 6
        - Begin: 0
          End: 6
        years:
        - Begin: 3
          End: 2
        - Begin: 3
          End: 2
      name: "name"
    x-go-package: "github.com/prometheus/alertmanager/config"
  MuteTimings:
    type: "array"
    items:
      $ref: "#/definitions/MuteTimeInterval"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  NamespaceConfigResponse:
    type: "object"
    additionalProperties:
      type: "array"
      items:
        $ref: "#/definitions/GettableRuleGroupConfig"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  NavLink:
    type: "object"
    properties:
      id:
        type: "string"
      target:
        type: "string"
      text:
        type: "string"
      url:
        type: "string"
    example:
      id: "id"
      text: "text"
      url: "url"
      target: "target"
  NavbarPreference:
    type: "object"
    properties:
      savedItems:
        type: "array"
        items:
          $ref: "#/definitions/NavLink"
    example:
      savedItems:
      - id: "id"
        text: "text"
        url: "url"
        target: "target"
      - id: "id"
        text: "text"
        url: "url"
        target: "target"
  NewApiKeyResult:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      key:
        type: "string"
      name:
        type: "string"
    example:
      name: "name"
      id: 0
      key: "key"
  NotFound:
    type: "object"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  Notice:
    type: "object"
    properties:
      inspect:
        $ref: "#/definitions/InspectType"
      link:
        type: "string"
        description: "Link is an optional link for display in the user interface and\
          \ can be an\nabsolute URL or a path relative to Grafana's root url."
      severity:
        $ref: "#/definitions/NoticeSeverity"
      text:
        type: "string"
        description: "Text is freeform descriptive text for the notice."
    title: "Notice provides a structure for presenting notifications in Grafana's\
      \ user interface."
  NoticeSeverity:
    type: "integer"
    title: "NoticeSeverity is a type for the Severity property of a Notice."
    format: "int64"
  NotificationTestCommand:
    type: "object"
    properties:
      disableResolveMessage:
        type: "boolean"
      frequency:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      secureSettings:
        type: "object"
        additionalProperties:
          type: "string"
      sendReminder:
        type: "boolean"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
  NotifierConfig:
    type: "object"
    properties:
      send_resolved:
        type: "boolean"
        x-go-name: "VSendResolved"
    title: "NotifierConfig contains base options common across all notifier configurations."
    x-go-package: "github.com/prometheus/alertmanager/config"
  OAuth2:
    type: "object"
    properties:
      TLSConfig:
        $ref: "#/definitions/TLSConfig"
      client_id:
        type: "string"
        x-go-name: "ClientID"
      client_secret:
        $ref: "#/definitions/Secret"
      client_secret_file:
        type: "string"
        x-go-name: "ClientSecretFile"
      endpoint_params:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "EndpointParams"
      scopes:
        type: "array"
        items:
          type: "string"
        x-go-name: "Scopes"
      token_url:
        type: "string"
        x-go-name: "TokenURL"
    title: "OAuth2 is the oauth2 client configuration."
    x-go-package: "github.com/prometheus/common/config"
  ObjectMatchers:
    $ref: "#/definitions/Matchers"
  OpsGenieConfig:
    type: "object"
    properties:
      actions:
        type: "string"
        x-go-name: "Actions"
      api_key:
        $ref: "#/definitions/Secret"
      api_key_file:
        type: "string"
        x-go-name: "APIKeyFile"
      api_url:
        $ref: "#/definitions/URL"
      description:
        type: "string"
        x-go-name: "Description"
      details:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Details"
      entity:
        type: "string"
        x-go-name: "Entity"
      http_config:
        $ref: "#/definitions/HTTPClientConfig"
      message:
        type: "string"
        x-go-name: "Message"
      note:
        type: "string"
        x-go-name: "Note"
      priority:
        type: "string"
        x-go-name: "Priority"
      responders:
        type: "array"
        items:
          $ref: "#/definitions/OpsGenieConfigResponder"
        x-go-name: "Responders"
      send_resolved:
        type: "boolean"
        x-go-name: "VSendResolved"
      source:
        type: "string"
        x-go-name: "Source"
      tags:
        type: "string"
        x-go-name: "Tags"
      update_alerts:
        type: "boolean"
        x-go-name: "UpdateAlerts"
    title: "OpsGenieConfig configures notifications via OpsGenie."
    x-go-package: "github.com/prometheus/alertmanager/config"
  OpsGenieConfigResponder:
    type: "object"
    properties:
      id:
        type: "string"
        description: "One of those 3 should be filled."
        x-go-name: "ID"
      name:
        type: "string"
        x-go-name: "Name"
      type:
        type: "string"
        description: "team, user, escalation, schedule etc."
        x-go-name: "Type"
      username:
        type: "string"
        x-go-name: "Username"
    x-go-package: "github.com/prometheus/alertmanager/config"
  OrgDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    example:
      name: "name"
      id: 0
  OrgDetailsDTO:
    type: "object"
    properties:
      address:
        $ref: "#/definitions/Address"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    example:
      address:
        country: "country"
        zipCode: "zipCode"
        address2: "address2"
        city: "city"
        address1: "address1"
        state: "state"
      name: "name"
      id: 0
  OrgUserDTO:
    type: "object"
    properties:
      accessControl:
        type: "object"
        additionalProperties:
          type: "boolean"
      avatarUrl:
        type: "string"
      email:
        type: "string"
      lastSeenAt:
        type: "string"
        format: "date-time"
      lastSeenAtAge:
        type: "string"
      login:
        type: "string"
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      role:
        type: "string"
      userId:
        type: "integer"
        format: "int64"
    example:
      lastSeenAt: "2000-01-23T04:56:07.000+00:00"
      accessControl:
        key: true
      role: "role"
      avatarUrl: "avatarUrl"
      name: "name"
      login: "login"
      userId: 6
      email: "email"
      orgId: 0
      lastSeenAtAge: "lastSeenAtAge"
  PagerdutyConfig:
    type: "object"
    properties:
      class:
        type: "string"
        x-go-name: "Class"
      client:
        type: "string"
        x-go-name: "Client"
      client_url:
        type: "string"
        x-go-name: "ClientURL"
      component:
        type: "string"
        x-go-name: "Component"
      description:
        type: "string"
        x-go-name: "Description"
      details:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Details"
      group:
        type: "string"
        x-go-name: "Group"
      http_config:
        $ref: "#/definitions/HTTPClientConfig"
      images:
        type: "array"
        items:
          $ref: "#/definitions/PagerdutyImage"
        x-go-name: "Images"
      links:
        type: "array"
        items:
          $ref: "#/definitions/PagerdutyLink"
        x-go-name: "Links"
      routing_key:
        $ref: "#/definitions/Secret"
      send_resolved:
        type: "boolean"
        x-go-name: "VSendResolved"
      service_key:
        $ref: "#/definitions/Secret"
      severity:
        type: "string"
        x-go-name: "Severity"
      url:
        $ref: "#/definitions/URL"
    title: "PagerdutyConfig configures notifications via PagerDuty."
    x-go-package: "github.com/prometheus/alertmanager/config"
  PagerdutyImage:
    type: "object"
    properties:
      alt:
        type: "string"
        x-go-name: "Alt"
      href:
        type: "string"
        x-go-name: "Href"
      src:
        type: "string"
        x-go-name: "Src"
    description: "PagerdutyImage is an image"
    x-go-package: "github.com/prometheus/alertmanager/config"
  PagerdutyLink:
    type: "object"
    properties:
      href:
        type: "string"
        x-go-name: "Href"
      text:
        type: "string"
        x-go-name: "Text"
    description: "PagerdutyLink is a link"
    x-go-package: "github.com/prometheus/alertmanager/config"
  PatchAnnotationsCmd:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      tags:
        type: "array"
        items:
          type: "string"
      text:
        type: "string"
      time:
        type: "integer"
        format: "int64"
      timeEnd:
        type: "integer"
        format: "int64"
  PatchLibraryElementCommand:
    type: "object"
    properties:
      folderId:
        type: "integer"
        format: "int64"
        description: "ID of the folder where the library element is stored."
      folderUid:
        type: "string"
        description: "UID of the folder where the library element is stored."
      kind:
        type: "integer"
        format: "int64"
        description: "Kind of element to create, Use 1 for library panels or 2 for\
          \ c.\nDescription:\n1 - library panels\n2 - library variables"
        enum:
        - 1
        - 2
      model:
        type: "object"
        description: "The JSON model for the library element."
        properties: {}
      name:
        type: "string"
        description: "Name of the library element."
      uid:
        type: "string"
      version:
        type: "integer"
        format: "int64"
        description: "Version of the library element you are updating."
    description: "PatchLibraryElementCommand is the command for patching a LibraryElement"
  PatchPrefsCmd:
    type: "object"
    properties:
      homeDashboardId:
        type: "integer"
        format: "int64"
        description: "The numerical :id of a favorited dashboard"
        default: 0
      homeDashboardUID:
        type: "string"
      navbar:
        $ref: "#/definitions/NavbarPreference"
      queryHistory:
        $ref: "#/definitions/QueryHistoryPreference"
      theme:
        type: "string"
        enum:
        - "light"
        - "dark"
      timezone:
        type: "string"
        enum:
        - "utc"
        - "browser"
      weekStart:
        type: "string"
  PatchQueryCommentInQueryHistoryCommand:
    type: "object"
    properties:
      comment:
        type: "string"
        description: "Updated comment"
    description: "PatchQueryCommentInQueryHistoryCommand is the command for updating\
      \ comment for query in query history"
  PauseAlertCommand:
    type: "object"
    properties:
      alertId:
        type: "integer"
        format: "int64"
      paused:
        type: "boolean"
  PauseAllAlertsCommand:
    type: "object"
    properties:
      paused:
        type: "boolean"
  Permission:
    type: "object"
    properties:
      action:
        type: "string"
      created:
        type: "string"
        format: "date-time"
      scope:
        type: "string"
      updated:
        type: "string"
        format: "date-time"
    title: "Permission is the model for access control permissions."
    example:
      created: "2000-01-23T04:56:07.000+00:00"
      scope: "scope"
      action: "action"
      updated: "2000-01-23T04:56:07.000+00:00"
  PermissionDenied:
    type: "object"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  PermissionType:
    type: "integer"
    format: "int64"
  Point:
    type: "object"
    properties:
      T:
        type: "integer"
        format: "int64"
      V:
        type: "number"
        format: "double"
    title: "Point represents a single data point for a given timestamp."
    x-go-package: "github.com/prometheus/prometheus/promql"
  PostAnnotationsCmd:
    type: "object"
    properties:
      dashboardId:
        type: "integer"
        format: "int64"
      dashboardUID:
        type: "string"
      data:
        $ref: "#/definitions/Json"
      panelId:
        type: "integer"
        format: "int64"
      tags:
        type: "array"
        items:
          type: "string"
      text:
        type: "string"
      time:
        type: "integer"
        format: "int64"
      timeEnd:
        type: "integer"
        format: "int64"
  PostGraphiteAnnotationsCmd:
    type: "object"
    properties:
      data:
        type: "string"
      tags:
        type: "object"
        properties: {}
      what:
        type: "string"
      when:
        type: "integer"
        format: "int64"
  PostableApiAlertingConfig:
    type: "object"
    properties:
      global:
        $ref: "#/definitions/GlobalConfig"
      inhibit_rules:
        type: "array"
        items:
          $ref: "#/definitions/InhibitRule"
        x-go-name: "InhibitRules"
      mute_time_intervals:
        type: "array"
        items:
          $ref: "#/definitions/MuteTimeInterval"
        x-go-name: "MuteTimeIntervals"
      receivers:
        type: "array"
        description: "Override with our superset receiver type"
        items:
          $ref: "#/definitions/PostableApiReceiver"
        x-go-name: "Receivers"
      route:
        $ref: "#/definitions/Route"
      templates:
        type: "array"
        items:
          type: "string"
        x-go-name: "Templates"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  PostableApiReceiver:
    type: "object"
    properties:
      email_configs:
        type: "array"
        items:
          $ref: "#/definitions/EmailConfig"
        x-go-name: "EmailConfigs"
      grafana_managed_receiver_configs:
        type: "array"
        items:
          $ref: "#/definitions/PostableGrafanaReceiver"
        x-go-name: "GrafanaManagedReceivers"
      name:
        type: "string"
        description: "A unique identifier for this receiver."
        x-go-name: "Name"
      opsgenie_configs:
        type: "array"
        items:
          $ref: "#/definitions/OpsGenieConfig"
        x-go-name: "OpsGenieConfigs"
      pagerduty_configs:
        type: "array"
        items:
          $ref: "#/definitions/PagerdutyConfig"
        x-go-name: "PagerdutyConfigs"
      pushover_configs:
        type: "array"
        items:
          $ref: "#/definitions/PushoverConfig"
        x-go-name: "PushoverConfigs"
      slack_configs:
        type: "array"
        items:
          $ref: "#/definitions/SlackConfig"
        x-go-name: "SlackConfigs"
      sns_configs:
        type: "array"
        items:
          $ref: "#/definitions/SNSConfig"
        x-go-name: "SNSConfigs"
      victorops_configs:
        type: "array"
        items:
          $ref: "#/definitions/VictorOpsConfig"
        x-go-name: "VictorOpsConfigs"
      webhook_configs:
        type: "array"
        items:
          $ref: "#/definitions/WebhookConfig"
        x-go-name: "WebhookConfigs"
      wechat_configs:
        type: "array"
        items:
          $ref: "#/definitions/WechatConfig"
        x-go-name: "WechatConfigs"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  PostableExtendedRuleNode:
    type: "object"
    properties:
      alert:
        type: "string"
        x-go-name: "Alert"
      annotations:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Annotations"
      expr:
        type: "string"
        x-go-name: "Expr"
      for:
        $ref: "#/definitions/Duration"
      grafana_alert:
        $ref: "#/definitions/PostableGrafanaRule"
      labels:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Labels"
      record:
        type: "string"
        x-go-name: "Record"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  PostableGrafanaReceiver:
    type: "object"
    properties:
      disableResolveMessage:
        type: "boolean"
        x-go-name: "DisableResolveMessage"
      name:
        type: "string"
        x-go-name: "Name"
      secureSettings:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "SecureSettings"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
        x-go-name: "Type"
      uid:
        type: "string"
        x-go-name: "UID"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  PostableGrafanaReceivers:
    type: "object"
    properties:
      grafana_managed_receiver_configs:
        type: "array"
        items:
          $ref: "#/definitions/PostableGrafanaReceiver"
        x-go-name: "GrafanaManagedReceivers"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  PostableGrafanaRule:
    type: "object"
    properties:
      condition:
        type: "string"
        x-go-name: "Condition"
      data:
        type: "array"
        items:
          $ref: "#/definitions/AlertQuery"
        x-go-name: "Data"
      exec_err_state:
        type: "string"
        enum:
        - "OK"
        - "Alerting"
        - "Error"
        x-go-enum-desc: "OK OkErrState\nAlerting AlertingErrState\nError ErrorErrState"
        x-go-name: "ExecErrState"
      no_data_state:
        type: "string"
        enum:
        - "Alerting"
        - "NoData"
        - "OK"
        x-go-enum-desc: "Alerting Alerting\nNoData NoData\nOK OK"
        x-go-name: "NoDataState"
      title:
        type: "string"
        x-go-name: "Title"
      uid:
        type: "string"
        x-go-name: "UID"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  PostableNGalertConfig:
    type: "object"
    properties:
      alertmanagers:
        type: "array"
        items:
          type: "string"
        x-go-name: "Alertmanagers"
      alertmanagersChoice:
        type: "string"
        enum:
        - "all"
        - "internal"
        - "external"
        x-go-enum-desc: "all AllAlertmanagers\ninternal InternalAlertmanager\nexternal\
          \ ExternalAlertmanagers"
        x-go-name: "AlertmanagersChoice"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  PostableRuleGroupConfig:
    type: "object"
    properties:
      interval:
        $ref: "#/definitions/Duration"
      name:
        type: "string"
        x-go-name: "Name"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/PostableExtendedRuleNode"
        x-go-name: "Rules"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  PostableUserConfig:
    type: "object"
    properties:
      alertmanager_config:
        $ref: "#/definitions/PostableApiAlertingConfig"
      template_files:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "TemplateFiles"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  Prefs:
    type: "object"
    properties:
      homeDashboardId:
        type: "integer"
        format: "int64"
      homeDashboardUID:
        type: "string"
      navbar:
        $ref: "#/definitions/NavbarPreference"
      queryHistory:
        $ref: "#/definitions/QueryHistoryPreference"
      theme:
        type: "string"
      timezone:
        type: "string"
      weekStart:
        type: "string"
    example:
      homeDashboardId: 0
      homeDashboardUID: "homeDashboardUID"
      navbar:
        savedItems:
        - id: "id"
          text: "text"
          url: "url"
          target: "target"
        - id: "id"
          text: "text"
          url: "url"
          target: "target"
      weekStart: "weekStart"
      queryHistory:
        homeTab: "homeTab"
      timezone: "timezone"
      theme: "theme"
  PrometheusRemoteWriteTargetJSON:
    type: "object"
    properties:
      data_source_uid:
        type: "string"
      id:
        type: "string"
      remote_write_path:
        type: "string"
    example:
      data_source_uid: "data_source_uid"
      remote_write_path: "remote_write_path"
      id: "id"
  Provenance:
    type: "string"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/models"
  PushoverConfig:
    type: "object"
    properties:
      expire:
        $ref: "#/definitions/duration"
      html:
        type: "boolean"
        x-go-name: "HTML"
      http_config:
        $ref: "#/definitions/HTTPClientConfig"
      message:
        type: "string"
        x-go-name: "Message"
      priority:
        type: "string"
        x-go-name: "Priority"
      retry:
        $ref: "#/definitions/duration"
      send_resolved:
        type: "boolean"
        x-go-name: "VSendResolved"
      sound:
        type: "string"
        x-go-name: "Sound"
      title:
        type: "string"
        x-go-name: "Title"
      token:
        $ref: "#/definitions/Secret"
      url:
        type: "string"
        x-go-name: "URL"
      url_title:
        type: "string"
        x-go-name: "URLTitle"
      user_key:
        $ref: "#/definitions/Secret"
    x-go-package: "github.com/prometheus/alertmanager/config"
  QueryDataResponse:
    type: "object"
    properties:
      Responses:
        $ref: "#/definitions/Responses"
    title: "QueryDataResponse contains the results from a QueryDataRequest."
    description: "It is the return type of a QueryData call."
    example:
      Responses: {}
  QueryHistoryDTO:
    type: "object"
    properties:
      comment:
        type: "string"
      createdAt:
        type: "integer"
        format: "int64"
      createdBy:
        type: "integer"
        format: "int64"
      datasourceUid:
        type: "string"
      queries:
        $ref: "#/definitions/Json"
      starred:
        type: "boolean"
      uid:
        type: "string"
    example:
      createdAt: 1
      uid: "uid"
      starred: true
      createdBy: 5
      comment: "comment"
      datasourceUid: "datasourceUid"
      queries: {}
  QueryHistoryDeleteQueryResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      message:
        type: "string"
    description: "QueryHistoryDeleteQueryResponse is the response struct for deleting\
      \ a query from query history"
    example:
      id: 0
      message: "message"
  QueryHistoryMigrationResponse:
    type: "object"
    properties:
      message:
        type: "string"
      starredCount:
        type: "integer"
        format: "int64"
      totalCount:
        type: "integer"
        format: "int64"
    example:
      message: "message"
      totalCount: 6
      starredCount: 0
  QueryHistoryPreference:
    type: "object"
    properties:
      homeTab:
        type: "string"
    example:
      homeTab: "homeTab"
  QueryHistoryResponse:
    type: "object"
    properties:
      result:
        $ref: "#/definitions/QueryHistoryDTO"
    description: "QueryHistoryResponse is a response struct for QueryHistoryDTO"
    example:
      result:
        createdAt: 1
        uid: "uid"
        starred: true
        createdBy: 5
        comment: "comment"
        datasourceUid: "datasourceUid"
        queries: {}
  QueryHistorySearchResponse:
    type: "object"
    properties:
      result:
        $ref: "#/definitions/QueryHistorySearchResult"
    example:
      result:
        perPage: 6
        queryHistory:
        - createdAt: 1
          uid: "uid"
          starred: true
          createdBy: 5
          comment: "comment"
          datasourceUid: "datasourceUid"
          queries: {}
        - createdAt: 1
          uid: "uid"
          starred: true
          createdBy: 5
          comment: "comment"
          datasourceUid: "datasourceUid"
          queries: {}
        page: 0
        totalCount: 5
  QueryHistorySearchResult:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int64"
      perPage:
        type: "integer"
        format: "int64"
      queryHistory:
        type: "array"
        items:
          $ref: "#/definitions/QueryHistoryDTO"
      totalCount:
        type: "integer"
        format: "int64"
    example:
      perPage: 6
      queryHistory:
      - createdAt: 1
        uid: "uid"
        starred: true
        createdBy: 5
        comment: "comment"
        datasourceUid: "datasourceUid"
        queries: {}
      - createdAt: 1
        uid: "uid"
        starred: true
        createdBy: 5
        comment: "comment"
        datasourceUid: "datasourceUid"
        queries: {}
      page: 0
      totalCount: 5
  QueryStat:
    type: "object"
    properties:
      color:
        type: "object"
        description: "Map values to a display color\nNOTE: this interface is under\
          \ development in the frontend... so simple map for now"
        additionalProperties:
          type: "object"
          properties: {}
      custom:
        type: "object"
        description: "Panel Specific Values"
        additionalProperties:
          type: "object"
          properties: {}
      decimals:
        type: "integer"
        format: "uint16"
      description:
        type: "string"
        description: "Description is human readable field metadata"
      displayName:
        type: "string"
        description: "DisplayName overrides Grafana default naming, should not be\
          \ used from a data source"
      displayNameFromDS:
        type: "string"
        description: "DisplayNameFromDS overrides Grafana default naming in a better\
          \ way that allows users to override it easily."
      filterable:
        type: "boolean"
        description: "Filterable indicates if the Field's data can be filtered by\
          \ additional calls."
      interval:
        type: "number"
        format: "double"
        description: "Interval indicates the expected regular step between values\
          \ in the series.\nWhen an interval exists, consumers can identify \"missing\"\
          \ values when the expected value is not present.\nThe grafana timeseries\
          \ visualization will render disconnected values when missing values are\
          \ found it the time field.\nThe interval uses the same units as the values.\
          \  For time.Time, this is defined in milliseconds."
      links:
        type: "array"
        description: "The behavior when clicking on a result"
        items:
          $ref: "#/definitions/DataLink"
      mappings:
        $ref: "#/definitions/ValueMappings"
      max:
        $ref: "#/definitions/ConfFloat64"
      min:
        $ref: "#/definitions/ConfFloat64"
      noValue:
        type: "string"
        description: "Alternative to empty string"
      path:
        type: "string"
        description: "Path is an explicit path to the field in the datasource. When\
          \ the frame meta includes a path,\nthis will default to `${frame.meta.path}/${field.name}\n\
          \nWhen defined, this value can be used as an identifier within the datasource\
          \ scope, and\nmay be used as an identifier to update values in a subsequent\
          \ request"
      thresholds:
        $ref: "#/definitions/ThresholdsConfig"
      unit:
        type: "string"
        description: "Numeric Options"
      value:
        type: "number"
        format: "double"
      writeable:
        type: "boolean"
        description: "Writeable indicates that the datasource knows how to update\
          \ this value"
    title: "QueryStat is used for storing arbitrary statistics metadata related to\
      \ a query and its result, e.g. total request time, data processing time."
    description: "The embedded FieldConfig's display name must be set.\nIt corresponds\
      \ to the QueryResultMetaStat on the frontend (https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L53)."
  QueryToMigrate:
    type: "object"
    properties:
      comment:
        type: "string"
      createdAt:
        type: "integer"
        format: "int64"
      datasourceUid:
        type: "string"
      queries:
        $ref: "#/definitions/Json"
      starred:
        type: "boolean"
  Receiver:
    type: "object"
    properties:
      email_configs:
        type: "array"
        items:
          $ref: "#/definitions/EmailConfig"
        x-go-name: "EmailConfigs"
      name:
        type: "string"
        description: "A unique identifier for this receiver."
        x-go-name: "Name"
      opsgenie_configs:
        type: "array"
        items:
          $ref: "#/definitions/OpsGenieConfig"
        x-go-name: "OpsGenieConfigs"
      pagerduty_configs:
        type: "array"
        items:
          $ref: "#/definitions/PagerdutyConfig"
        x-go-name: "PagerdutyConfigs"
      pushover_configs:
        type: "array"
        items:
          $ref: "#/definitions/PushoverConfig"
        x-go-name: "PushoverConfigs"
      slack_configs:
        type: "array"
        items:
          $ref: "#/definitions/SlackConfig"
        x-go-name: "SlackConfigs"
      sns_configs:
        type: "array"
        items:
          $ref: "#/definitions/SNSConfig"
        x-go-name: "SNSConfigs"
      victorops_configs:
        type: "array"
        items:
          $ref: "#/definitions/VictorOpsConfig"
        x-go-name: "VictorOpsConfigs"
      webhook_configs:
        type: "array"
        items:
          $ref: "#/definitions/WebhookConfig"
        x-go-name: "WebhookConfigs"
      wechat_configs:
        type: "array"
        items:
          $ref: "#/definitions/WechatConfig"
        x-go-name: "WechatConfigs"
    title: "Receiver configuration provides configuration on how to contact a receiver."
    x-go-package: "github.com/prometheus/alertmanager/config"
  RecordingRuleJSON:
    type: "object"
    properties:
      active:
        type: "boolean"
      count:
        type: "boolean"
      description:
        type: "string"
      dest_data_source_uid:
        type: "string"
      id:
        type: "string"
      interval:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      prom_name:
        type: "string"
      queries:
        type: "array"
        items:
          type: "object"
          additionalProperties:
            type: "object"
            properties: {}
      range:
        type: "integer"
        format: "int64"
      target_ref_id:
        type: "string"
    description: "RecordingRuleJSON is the external representation of a recording\
      \ rule"
    example:
      dest_data_source_uid: "dest_data_source_uid"
      prom_name: "prom_name"
      target_ref_id: "target_ref_id"
      count: true
      name: "name"
      active: true
      description: "description"
      range: 6
      interval: 0
      id: "id"
      queries:
      - key: "{}"
      - key: "{}"
  Regexp:
    type: "object"
    title: "Regexp is the representation of a compiled regular expression."
    description: "A Regexp is safe for concurrent use by multiple goroutines,\nexcept\
      \ for configuration methods, such as Longest."
    x-go-package: "regexp"
  RelativeTimeRange:
    type: "object"
    properties:
      from:
        $ref: "#/definitions/Duration"
      to:
        $ref: "#/definitions/Duration"
    description: "RelativeTimeRange is the per query start and end time\nfor requests."
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/models"
  ReportEmailDTO:
    type: "object"
    properties:
      email:
        type: "string"
      emails:
        type: "string"
        description: "Comma-separated list of emails to which to send the report to."
      id:
        type: "string"
        format: "int64"
        description: "Send the report to the emails specified in the report. Required\
          \ if emails is not present."
      useEmailsFromReport:
        type: "boolean"
        description: "Send the report to the emails specified in the report. Required\
          \ if emails is not present."
  ReportOptionsDTO:
    type: "object"
    properties:
      layout:
        type: "string"
      orientation:
        type: "string"
      timeRange:
        $ref: "#/definitions/TimeRangeDTO"
    example:
      layout: "layout"
      orientation: "orientation"
      timeRange:
        from: "from"
        to: "to"
  ResponseDetails:
    type: "object"
    properties:
      msg:
        type: "string"
        x-go-name: "Msg"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  Responses:
    type: "object"
    title: "Responses is a map of RefIDs (Unique Query ID) to DataResponses."
    description: "The QueryData method the QueryDataHandler method will set the RefId\n\
      property on the DataRespones' frames based on these RefIDs."
    additionalProperties:
      $ref: "#/definitions/DataResponse"
  RestoreDashboardVersionCommand:
    type: "object"
    properties:
      version:
        type: "integer"
        format: "int64"
  RevokeAuthTokenCmd:
    type: "object"
    properties:
      authTokenId:
        type: "integer"
        format: "int64"
  RoleDTO:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
      delegatable:
        type: "boolean"
      description:
        type: "string"
      displayName:
        type: "string"
      group:
        type: "string"
      hidden:
        type: "boolean"
      name:
        type: "string"
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/Permission"
      uid:
        type: "string"
      updated:
        type: "string"
        format: "date-time"
      version:
        type: "integer"
        format: "int64"
    example:
      uid: "uid"
      hidden: true
      created: "2000-01-23T04:56:07.000+00:00"
      displayName: "displayName"
      permissions:
      - created: "2000-01-23T04:56:07.000+00:00"
        scope: "scope"
        action: "action"
        updated: "2000-01-23T04:56:07.000+00:00"
      - created: "2000-01-23T04:56:07.000+00:00"
        scope: "scope"
        action: "action"
        updated: "2000-01-23T04:56:07.000+00:00"
      delegatable: true
      name: "name"
      description: "description"
      updated: "2000-01-23T04:56:07.000+00:00"
      version: 0
      group: "group"
  Route:
    type: "object"
    properties:
      continue:
        type: "boolean"
        x-go-name: "Continue"
      group_by:
        type: "array"
        items:
          type: "string"
        x-go-name: "GroupByStr"
      group_interval:
        $ref: "#/definitions/Duration"
      group_wait:
        $ref: "#/definitions/Duration"
      match:
        type: "object"
        description: "Deprecated. Remove before v1.0 release."
        additionalProperties:
          type: "string"
        x-go-name: "Match"
      match_re:
        $ref: "#/definitions/MatchRegexps"
      matchers:
        $ref: "#/definitions/Matchers"
      mute_time_intervals:
        type: "array"
        items:
          type: "string"
        x-go-name: "MuteTimeIntervals"
      object_matchers:
        $ref: "#/definitions/ObjectMatchers"
      provenance:
        $ref: "#/definitions/Provenance"
      receiver:
        type: "string"
        x-go-name: "Receiver"
      repeat_interval:
        $ref: "#/definitions/Duration"
      routes:
        type: "array"
        items:
          $ref: "#/definitions/Route"
        x-go-name: "Routes"
    description: "A Route is a node that contains definitions of how to handle alerts.\
      \ This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers\
      \ property."
    example:
      mute_time_intervals:
      - "mute_time_intervals"
      - "mute_time_intervals"
      group_interval: {}
      receiver: "receiver"
      match:
        key: "match"
      object_matchers: ""
      routes:
      - null
      - null
      matchers: ""
      provenance: {}
      continue: true
      group_by:
      - "group_by"
      - "group_by"
      match_re: {}
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  Rule:
    type: "object"
    required:
    - "health"
    - "name"
    - "query"
    - "type"
    properties:
      evaluationTime:
        type: "number"
        format: "double"
        x-go-name: "EvaluationTime"
      health:
        type: "string"
        x-go-name: "Health"
      labels:
        $ref: "#/definitions/overrideLabels"
      lastError:
        type: "string"
        x-go-name: "LastError"
      lastEvaluation:
        type: "string"
        format: "date-time"
        x-go-name: "LastEvaluation"
      name:
        type: "string"
        x-go-name: "Name"
      query:
        type: "string"
        x-go-name: "Query"
      type:
        $ref: "#/definitions/RuleType"
    description: "adapted from cortex"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  RuleDiscovery:
    type: "object"
    required:
    - "groups"
    properties:
      groups:
        type: "array"
        items:
          $ref: "#/definitions/RuleGroup"
        x-go-name: "RuleGroups"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  RuleGroup:
    type: "object"
    required:
    - "file"
    - "interval"
    - "name"
    - "rules"
    properties:
      evaluationTime:
        type: "number"
        format: "double"
        x-go-name: "EvaluationTime"
      file:
        type: "string"
        x-go-name: "File"
      interval:
        type: "number"
        format: "double"
        x-go-name: "Interval"
      lastEvaluation:
        type: "string"
        format: "date-time"
        x-go-name: "LastEvaluation"
      name:
        type: "string"
        x-go-name: "Name"
      rules:
        type: "array"
        description: "In order to preserve rule ordering, while exposing type (alerting\
          \ or recording)\nspecific properties, both alerting and recording rules\
          \ are exposed in the\nsame array."
        items:
          $ref: "#/definitions/AlertingRule"
        x-go-name: "Rules"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  RuleGroupConfigResponse:
    type: "object"
    properties:
      interval:
        $ref: "#/definitions/Duration"
      name:
        type: "string"
        x-go-name: "Name"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/GettableExtendedRuleNode"
        x-go-name: "Rules"
      source_tenants:
        type: "array"
        items:
          type: "string"
        x-go-name: "SourceTenants"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  RuleResponse:
    type: "object"
    required:
    - "status"
    properties:
      data:
        $ref: "#/definitions/RuleDiscovery"
      error:
        type: "string"
        x-go-name: "Error"
      errorType:
        $ref: "#/definitions/ErrorType"
      status:
        type: "string"
        x-go-name: "Status"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  RuleType:
    type: "string"
    title: "RuleType models the type of a rule."
    x-go-package: "github.com/prometheus/client_golang/api/prometheus/v1"
  SNSConfig:
    type: "object"
    properties:
      api_url:
        type: "string"
        x-go-name: "APIUrl"
      attributes:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Attributes"
      http_config:
        $ref: "#/definitions/HTTPClientConfig"
      message:
        type: "string"
        x-go-name: "Message"
      phone_number:
        type: "string"
        x-go-name: "PhoneNumber"
      send_resolved:
        type: "boolean"
        x-go-name: "VSendResolved"
      sigv4:
        $ref: "#/definitions/SigV4Config"
      subject:
        type: "string"
        x-go-name: "Subject"
      target_arn:
        type: "string"
        x-go-name: "TargetARN"
      topic_arn:
        type: "string"
        x-go-name: "TopicARN"
    x-go-package: "github.com/prometheus/alertmanager/config"
  Sample:
    type: "object"
    properties:
      Metric:
        $ref: "#/definitions/Labels"
      T:
        type: "integer"
        format: "int64"
      V:
        type: "number"
        format: "double"
    title: "Sample is a single sample belonging to a metric."
    x-go-package: "github.com/prometheus/prometheus/promql"
  SaveDashboardCommand:
    type: "object"
    properties:
      UpdatedAt:
        type: "string"
        format: "date-time"
      dashboard:
        $ref: "#/definitions/Json"
      folderId:
        type: "integer"
        format: "int64"
      folderUid:
        type: "string"
      isFolder:
        type: "boolean"
      message:
        type: "string"
      overwrite:
        type: "boolean"
      userId:
        type: "integer"
        format: "int64"
  ScheduleDTO:
    type: "object"
    properties:
      day:
        type: "string"
      dayOfMonth:
        type: "string"
      endDate:
        type: "string"
        format: "date-time"
      frequency:
        type: "string"
      hour:
        type: "integer"
        format: "int64"
      intervalAmount:
        type: "integer"
        format: "int64"
      intervalFrequency:
        type: "string"
      minute:
        type: "integer"
        format: "int64"
      startDate:
        type: "string"
        format: "date-time"
      timeZone:
        type: "string"
      workdaysOnly:
        type: "boolean"
    example:
      intervalAmount: 2
      hour: 5
      dayOfMonth: "dayOfMonth"
      endDate: "2000-01-23T04:56:07.000+00:00"
      workdaysOnly: true
      timeZone: "timeZone"
      day: "day"
      intervalFrequency: "intervalFrequency"
      startDate: "2000-01-23T04:56:07.000+00:00"
      frequency: "frequency"
      minute: 7
  SearchTeamQueryResult:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int64"
      perPage:
        type: "integer"
        format: "int64"
      teams:
        type: "array"
        items:
          $ref: "#/definitions/TeamDTO"
      totalCount:
        type: "integer"
        format: "int64"
    example:
      perPage: 6
      teams:
      - accessControl:
          key: true
        avatarUrl: "avatarUrl"
        memberCount: 5
        name: "name"
        permission: {}
        id: 1
        email: "email"
        orgId: 5
      - accessControl:
          key: true
        avatarUrl: "avatarUrl"
        memberCount: 5
        name: "name"
        permission: {}
        id: 1
        email: "email"
        orgId: 5
      page: 0
      totalCount: 2
  SearchUserQueryResult:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int64"
      perPage:
        type: "integer"
        format: "int64"
      totalCount:
        type: "integer"
        format: "int64"
      users:
        type: "array"
        items:
          $ref: "#/definitions/UserSearchHitDTO"
    example:
      perPage: 6
      page: 0
      totalCount: 1
      users:
      - lastSeenAt: "2000-01-23T04:56:07.000+00:00"
        avatarUrl: "avatarUrl"
        authLabels:
        - "authLabels"
        - "authLabels"
        name: "name"
        id: 5
        isAdmin: true
        isDisabled: true
        login: "login"
        email: "email"
        lastSeenAtAge: "lastSeenAtAge"
      - lastSeenAt: "2000-01-23T04:56:07.000+00:00"
        avatarUrl: "avatarUrl"
        authLabels:
        - "authLabels"
        - "authLabels"
        name: "name"
        id: 5
        isAdmin: true
        isDisabled: true
        login: "login"
        email: "email"
        lastSeenAtAge: "lastSeenAtAge"
  Secret:
    type: "string"
    title: "Secret special type for storing secrets."
    x-go-package: "github.com/prometheus/common/config"
  SecretURL:
    $ref: "#/definitions/URL"
  SetUserRolesCommand:
    type: "object"
    properties:
      global:
        type: "boolean"
      includeHidden:
        type: "boolean"
      roleUids:
        type: "array"
        items:
          type: "string"
  SettingsBag:
    type: "object"
    additionalProperties:
      type: "object"
      additionalProperties:
        type: "string"
  SettingsDTO:
    type: "object"
    properties:
      branding:
        $ref: "#/definitions/BrandingOptionsDTO"
      id:
        type: "integer"
        format: "int64"
      orgId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
    example:
      branding:
        emailFooterMode: "emailFooterMode"
        emailLogoUrl: "emailLogoUrl"
        emailFooterLink: "emailFooterLink"
        reportLogoUrl: "reportLogoUrl"
        emailFooterText: "emailFooterText"
      id: 0
      userId: 1
      orgId: 6
  SigV4Config:
    type: "object"
    properties:
      AccessKey:
        type: "string"
      Profile:
        type: "string"
      Region:
        type: "string"
      RoleARN:
        type: "string"
      SecretKey:
        $ref: "#/definitions/Secret"
    description: "SigV4Config is the configuration for signing remote write requests\
      \ with\nAWS's SigV4 verification process. Empty values will be retrieved using\
      \ the\nAWS default credentials chain."
    x-go-package: "github.com/prometheus/common/sigv4"
  SlackAction:
    type: "object"
    properties:
      confirm:
        $ref: "#/definitions/SlackConfirmationField"
      name:
        type: "string"
        x-go-name: "Name"
      style:
        type: "string"
        x-go-name: "Style"
      text:
        type: "string"
        x-go-name: "Text"
      type:
        type: "string"
        x-go-name: "Type"
      url:
        type: "string"
        x-go-name: "URL"
      value:
        type: "string"
        x-go-name: "Value"
    title: "SlackAction configures a single Slack action that is sent with each notification."
    description: "See https://api.slack.com/docs/message-attachments#action_fields\
      \ and https://api.slack.com/docs/message-buttons\nfor more information."
    x-go-package: "github.com/prometheus/alertmanager/config"
  SlackConfig:
    type: "object"
    properties:
      actions:
        type: "array"
        items:
          $ref: "#/definitions/SlackAction"
        x-go-name: "Actions"
      api_url:
        $ref: "#/definitions/SecretURL"
      api_url_file:
        type: "string"
        x-go-name: "APIURLFile"
      callback_id:
        type: "string"
        x-go-name: "CallbackID"
      channel:
        type: "string"
        description: "Slack channel override, (like #other-channel or @username)."
        x-go-name: "Channel"
      color:
        type: "string"
        x-go-name: "Color"
      fallback:
        type: "string"
        x-go-name: "Fallback"
      fields:
        type: "array"
        items:
          $ref: "#/definitions/SlackField"
        x-go-name: "Fields"
      footer:
        type: "string"
        x-go-name: "Footer"
      http_config:
        $ref: "#/definitions/HTTPClientConfig"
      icon_emoji:
        type: "string"
        x-go-name: "IconEmoji"
      icon_url:
        type: "string"
        x-go-name: "IconURL"
      image_url:
        type: "string"
        x-go-name: "ImageURL"
      link_names:
        type: "boolean"
        x-go-name: "LinkNames"
      mrkdwn_in:
        type: "array"
        items:
          type: "string"
        x-go-name: "MrkdwnIn"
      pretext:
        type: "string"
        x-go-name: "Pretext"
      send_resolved:
        type: "boolean"
        x-go-name: "VSendResolved"
      short_fields:
        type: "boolean"
        x-go-name: "ShortFields"
      text:
        type: "string"
        x-go-name: "Text"
      thumb_url:
        type: "string"
        x-go-name: "ThumbURL"
      title:
        type: "string"
        x-go-name: "Title"
      title_link:
        type: "string"
        x-go-name: "TitleLink"
      username:
        type: "string"
        x-go-name: "Username"
    title: "SlackConfig configures notifications via Slack."
    x-go-package: "github.com/prometheus/alertmanager/config"
  SlackConfirmationField:
    type: "object"
    properties:
      dismiss_text:
        type: "string"
        x-go-name: "DismissText"
      ok_text:
        type: "string"
        x-go-name: "OkText"
      text:
        type: "string"
        x-go-name: "Text"
      title:
        type: "string"
        x-go-name: "Title"
    description: "SlackConfirmationField protect users from destructive actions or\
      \ particularly distinguished decisions\nby asking them to confirm their button\
      \ click one more time.\nSee https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields\
      \ for more information."
    x-go-package: "github.com/prometheus/alertmanager/config"
  SlackField:
    type: "object"
    properties:
      short:
        type: "boolean"
        x-go-name: "Short"
      title:
        type: "string"
        x-go-name: "Title"
      value:
        type: "string"
        x-go-name: "Value"
    title: "SlackField configures a single Slack field that is sent with each notification."
    description: "Each field must contain a title, value, and optionally, a boolean\
      \ value to indicate if the field\nis short enough to be displayed next to other\
      \ fields designated as short.\nSee https://api.slack.com/docs/message-attachments#fields\
      \ for more information."
    x-go-package: "github.com/prometheus/alertmanager/config"
  SmtpNotEnabled:
    $ref: "#/definitions/ResponseDetails"
  Status:
    type: "object"
    properties:
      enabled:
        type: "boolean"
    example:
      enabled: true
  Success:
    $ref: "#/definitions/ResponseDetails"
  SuccessResponseBody:
    type: "object"
    properties:
      message:
        type: "string"
    example:
      message: "message"
  SyncResult:
    type: "object"
    properties:
      Elapsed:
        $ref: "#/definitions/Duration"
      FailedUsers:
        type: "array"
        items:
          $ref: "#/definitions/FailedUser"
      MissingUserIds:
        type: "array"
        items:
          type: "integer"
          format: "int64"
      Started:
        type: "string"
        format: "date-time"
      UpdatedUserIds:
        type: "array"
        items:
          type: "integer"
          format: "int64"
    title: "SyncResult holds the result of a sync with LDAP. This gives us information\
      \ on which users were updated and how."
    example:
      UpdatedUserIds:
      - 6
      - 6
      FailedUsers:
      - Error: "Error"
        Login: "Login"
      - Error: "Error"
        Login: "Login"
      Started: "2000-01-23T04:56:07.000+00:00"
      MissingUserIds:
      - 0
      - 0
      Elapsed: {}
  TLSConfig:
    type: "object"
    properties:
      ca_file:
        type: "string"
        description: "The CA cert to use for the targets."
        x-go-name: "CAFile"
      cert_file:
        type: "string"
        description: "The client cert file for the targets."
        x-go-name: "CertFile"
      insecure_skip_verify:
        type: "boolean"
        description: "Disable target certificate validation."
        x-go-name: "InsecureSkipVerify"
      key_file:
        type: "string"
        description: "The client key file for the targets."
        x-go-name: "KeyFile"
      server_name:
        type: "string"
        description: "Used to verify the hostname for the targets."
        x-go-name: "ServerName"
    title: "TLSConfig configures the options for TLS connections."
    x-go-package: "github.com/prometheus/common/config"
  TagsDTO:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int64"
      tag:
        type: "string"
    title: "TagsDTO is the frontend DTO for Tag."
    example:
      count: 0
      tag: "tag"
  TeamDTO:
    type: "object"
    properties:
      accessControl:
        type: "object"
        additionalProperties:
          type: "boolean"
      avatarUrl:
        type: "string"
      email:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      memberCount:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      permission:
        $ref: "#/definitions/PermissionType"
    example:
      accessControl:
        key: true
      avatarUrl: "avatarUrl"
      memberCount: 5
      name: "name"
      permission: {}
      id: 1
      email: "email"
      orgId: 5
  TeamGroupDTO:
    type: "object"
    properties:
      groupId:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      teamId:
        type: "integer"
        format: "int64"
    example:
      groupId: "groupId"
      teamId: 6
      orgId: 0
  TeamGroupMapping:
    type: "object"
    properties:
      groupId:
        type: "string"
  TeamMemberDTO:
    type: "object"
    properties:
      auth_module:
        type: "string"
      avatarUrl:
        type: "string"
      email:
        type: "string"
      labels:
        type: "array"
        items:
          type: "string"
      login:
        type: "string"
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      permission:
        $ref: "#/definitions/PermissionType"
      teamId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
  TempUserDTO:
    type: "object"
    properties:
      code:
        type: "string"
      createdOn:
        type: "string"
        format: "date-time"
      email:
        type: "string"
      emailSent:
        type: "boolean"
      emailSentOn:
        type: "string"
        format: "date-time"
      id:
        type: "integer"
        format: "int64"
      invitedByEmail:
        type: "string"
      invitedByLogin:
        type: "string"
      invitedByName:
        type: "string"
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      role:
        type: "string"
        enum:
        - "Viewer"
        - "Editor"
        - "Admin"
      status:
        $ref: "#/definitions/TempUserStatus"
      url:
        type: "string"
    example:
      code: "code"
      role: "Viewer"
      createdOn: "2000-01-23T04:56:07.000+00:00"
      orgId: 6
      url: "url"
      invitedByEmail: "invitedByEmail"
      invitedByName: "invitedByName"
      emailSent: true
      name: "name"
      id: 0
      emailSentOn: "2000-01-23T04:56:07.000+00:00"
      email: "email"
      invitedByLogin: "invitedByLogin"
      status: {}
  TempUserStatus:
    type: "string"
  TestReceiverConfigResult:
    type: "object"
    properties:
      error:
        type: "string"
        x-go-name: "Error"
      name:
        type: "string"
        x-go-name: "Name"
      status:
        type: "string"
        x-go-name: "Status"
      uid:
        type: "string"
        x-go-name: "UID"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  TestReceiverResult:
    type: "object"
    properties:
      grafana_managed_receiver_configs:
        type: "array"
        items:
          $ref: "#/definitions/TestReceiverConfigResult"
        x-go-name: "Configs"
      name:
        type: "string"
        x-go-name: "Name"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  TestReceiversConfigAlertParams:
    type: "object"
    properties:
      annotations:
        $ref: "#/definitions/LabelSet"
      labels:
        $ref: "#/definitions/LabelSet"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  TestReceiversConfigBodyParams:
    type: "object"
    properties:
      alert:
        $ref: "#/definitions/TestReceiversConfigAlertParams"
      receivers:
        type: "array"
        items:
          $ref: "#/definitions/PostableApiReceiver"
        x-go-name: "Receivers"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  TestReceiversResult:
    type: "object"
    properties:
      alert:
        $ref: "#/definitions/TestReceiversConfigAlertParams"
      notified_at:
        type: "string"
        format: "date-time"
        x-go-name: "NotifiedAt"
      receivers:
        type: "array"
        items:
          $ref: "#/definitions/TestReceiverResult"
        x-go-name: "Receivers"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  TestRulePayload:
    type: "object"
    properties:
      expr:
        type: "string"
        example: "(node_filesystem_avail_bytes{fstype!=\"\",job=\"integrations/node_exporter\"\
          } node_filesystem_size_bytes{fstype!=\"\",job=\"integrations/node_exporter\"\
          } * 100 < 5 and node_filesystem_readonly{fstype!=\"\",job=\"integrations/node_exporter\"\
          } == 0)"
        x-go-name: "Expr"
      grafana_condition:
        $ref: "#/definitions/EvalAlertConditionCommand"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  TestRuleResponse:
    type: "object"
    properties:
      alerts:
        $ref: "#/definitions/Vector"
      grafana_alert_instances:
        $ref: "#/definitions/AlertInstancesResponse"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  Threshold:
    type: "object"
    properties:
      color:
        type: "string"
      state:
        type: "string"
      value:
        $ref: "#/definitions/ConfFloat64"
    description: "Threshold a single step on the threshold list"
  ThresholdsConfig:
    type: "object"
    properties:
      mode:
        $ref: "#/definitions/ThresholdsMode"
      steps:
        type: "array"
        description: "Must be sorted by 'value', first value is always -Infinity"
        items:
          $ref: "#/definitions/Threshold"
    description: "ThresholdsConfig setup thresholds"
  ThresholdsMode:
    type: "string"
    description: "ThresholdsMode absolute or percentage"
  TimeInterval:
    type: "object"
    properties:
      days_of_month:
        type: "array"
        items:
          $ref: "#/definitions/DayOfMonthRange"
        x-go-name: "DaysOfMonth"
      months:
        type: "array"
        items:
          $ref: "#/definitions/MonthRange"
        x-go-name: "Months"
      times:
        type: "array"
        items:
          $ref: "#/definitions/TimeRange"
        x-go-name: "Times"
      weekdays:
        type: "array"
        items:
          $ref: "#/definitions/WeekdayRange"
        x-go-name: "Weekdays"
      years:
        type: "array"
        items:
          $ref: "#/definitions/YearRange"
        x-go-name: "Years"
    description: "TimeInterval describes intervals of time. ContainsTime will tell\
      \ you if a golang time is contained\nwithin the interval."
    example:
      times:
      - StartMinute: 2
        EndMinute: 5
      - StartMinute: 2
        EndMinute: 5
      months:
      - Begin: 1
        End: 5
      - Begin: 1
        End: 5
      weekdays:
      - Begin: 7
        End: 9
      - Begin: 7
        End: 9
      days_of_month:
      - Begin: 0
        End: 6
      - Begin: 0
        End: 6
      years:
      - Begin: 3
        End: 2
      - Begin: 3
        End: 2
    x-go-package: "github.com/prometheus/alertmanager/timeinterval"
  TimeRange:
    type: "object"
    properties:
      EndMinute:
        type: "integer"
        format: "int64"
      StartMinute:
        type: "integer"
        format: "int64"
    title: "TimeRange represents a range of minutes within a 1440 minute day, exclusive\
      \ of the End minute. A day consists of 1440 minutes."
    description: "For example, 4:00PM to End of the day would Begin at 1020 and End\
      \ at 1440."
    example:
      StartMinute: 2
      EndMinute: 5
    x-go-package: "github.com/prometheus/alertmanager/timeinterval"
  TimeRangeDTO:
    type: "object"
    properties:
      from:
        type: "string"
      to:
        type: "string"
    example:
      from: "from"
      to: "to"
  Token:
    type: "object"
    properties:
      account:
        type: "string"
      company:
        type: "string"
      details_url:
        type: "string"
      exp:
        type: "integer"
        format: "int64"
      iat:
        type: "integer"
        format: "int64"
      included_users:
        type: "integer"
        format: "int64"
      iss:
        type: "string"
      jti:
        type: "string"
      lexp:
        type: "integer"
        format: "int64"
      lic_exp_warn_days:
        type: "integer"
        format: "int64"
      lid:
        type: "string"
      limit_by:
        type: "string"
      max_concurrent_user_sessions:
        type: "integer"
        format: "int64"
      nbf:
        type: "integer"
        format: "int64"
      prod:
        type: "array"
        items:
          type: "string"
      slug:
        type: "string"
      status:
        $ref: "#/definitions/TokenStatus"
      sub:
        type: "string"
      tok_exp_warn_days:
        type: "integer"
        format: "int64"
      trial:
        type: "boolean"
      trial_exp:
        type: "integer"
        format: "int64"
      update_days:
        type: "integer"
        format: "int64"
      usage_billing:
        type: "boolean"
    example:
      sub: "sub"
      included_users: 1
      lexp: 5
      prod:
      - "prod"
      - "prod"
      lid: "lid"
      lic_exp_warn_days: 5
      update_days: 2
      iss: "iss"
      details_url: "details_url"
      trial: true
      trial_exp: 3
      limit_by: "limit_by"
      nbf: 7
      tok_exp_warn_days: 9
      company: "company"
      usage_billing: true
      exp: 0
      max_concurrent_user_sessions: 2
      iat: 6
      account: "account"
      jti: "jti"
      slug: "slug"
      status: {}
  TokenStatus:
    type: "integer"
    format: "int64"
  TrimDashboardCommand:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/Json"
      meta:
        $ref: "#/definitions/Json"
  TrimDashboardFullWithMeta:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/Json"
      meta:
        $ref: "#/definitions/Json"
    example:
      dashboard: {}
  Type:
    type: "string"
  URL:
    type: "object"
    properties:
      ForceQuery:
        type: "boolean"
      Fragment:
        type: "string"
      Host:
        type: "string"
      Opaque:
        type: "string"
      Path:
        type: "string"
      RawFragment:
        type: "string"
      RawPath:
        type: "string"
      RawQuery:
        type: "string"
      Scheme:
        type: "string"
      User:
        $ref: "#/definitions/Userinfo"
    title: "URL is a custom URL type that allows validation at configuration load\
      \ time."
    x-go-package: "github.com/prometheus/common/config"
  UpdateAlertNotificationCommand:
    type: "object"
    properties:
      disableResolveMessage:
        type: "boolean"
      frequency:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      isDefault:
        type: "boolean"
      name:
        type: "string"
      secureSettings:
        type: "object"
        additionalProperties:
          type: "string"
      sendReminder:
        type: "boolean"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
      uid:
        type: "string"
  UpdateAlertNotificationWithUidCommand:
    type: "object"
    properties:
      disableResolveMessage:
        type: "boolean"
      frequency:
        type: "string"
      isDefault:
        type: "boolean"
      name:
        type: "string"
      secureSettings:
        type: "object"
        additionalProperties:
          type: "string"
      sendReminder:
        type: "boolean"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
      uid:
        type: "string"
  UpdateAnnotationsCmd:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      tags:
        type: "array"
        items:
          type: "string"
      text:
        type: "string"
      time:
        type: "integer"
        format: "int64"
      timeEnd:
        type: "integer"
        format: "int64"
  UpdateDashboardAclCommand:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/DashboardAclUpdateItem"
  UpdateDataSourceCommand:
    type: "object"
    properties:
      access:
        $ref: "#/definitions/DsAccess"
      basicAuth:
        type: "boolean"
      basicAuthUser:
        type: "string"
      database:
        type: "string"
      isDefault:
        type: "boolean"
      jsonData:
        $ref: "#/definitions/Json"
      name:
        type: "string"
      secureJsonData:
        type: "object"
        additionalProperties:
          type: "string"
      type:
        type: "string"
      uid:
        type: "string"
      url:
        type: "string"
      user:
        type: "string"
      version:
        type: "integer"
        format: "int64"
      withCredentials:
        type: "boolean"
    description: "Also acts as api DTO"
  UpdateFolderCommand:
    type: "object"
    properties:
      overwrite:
        type: "boolean"
      title:
        type: "string"
      uid:
        type: "string"
      version:
        type: "integer"
        format: "int64"
  UpdateOrgAddressForm:
    type: "object"
    properties:
      address1:
        type: "string"
      address2:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
      state:
        type: "string"
      zipcode:
        type: "string"
  UpdateOrgForm:
    type: "object"
    properties:
      name:
        type: "string"
  UpdateOrgQuotaCmd:
    type: "object"
    properties:
      limit:
        type: "integer"
        format: "int64"
      target:
        type: "string"
  UpdateOrgUserCommand:
    type: "object"
    properties:
      role:
        type: "string"
        enum:
        - "Viewer"
        - "Editor"
        - "Admin"
  UpdatePrefsCmd:
    type: "object"
    properties:
      homeDashboardId:
        type: "integer"
        format: "int64"
        description: "The numerical :id of a favorited dashboard"
        default: 0
      homeDashboardUID:
        type: "string"
      navbar:
        $ref: "#/definitions/NavbarPreference"
      queryHistory:
        $ref: "#/definitions/QueryHistoryPreference"
      theme:
        type: "string"
        enum:
        - "light"
        - "dark"
      timezone:
        type: "string"
        enum:
        - "utc"
        - "browser"
      weekStart:
        type: "string"
  UpdateRoleCommand:
    type: "object"
    properties:
      description:
        type: "string"
      displayName:
        type: "string"
      global:
        type: "boolean"
      group:
        type: "string"
      hidden:
        type: "boolean"
      name:
        type: "string"
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/Permission"
      version:
        type: "integer"
        format: "int64"
  UpdateTeamCommand:
    type: "object"
    properties:
      Email:
        type: "string"
      Id:
        type: "integer"
        format: "int64"
      Name:
        type: "string"
  UpdateTeamMemberCommand:
    type: "object"
    properties:
      permission:
        $ref: "#/definitions/PermissionType"
  UpdateUserCommand:
    type: "object"
    properties:
      email:
        type: "string"
      login:
        type: "string"
      name:
        type: "string"
      theme:
        type: "string"
  UpdateUserQuotaCmd:
    type: "object"
    properties:
      limit:
        type: "integer"
        format: "int64"
      target:
        type: "string"
  UserIdDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      message:
        type: "string"
    example:
      id: 0
      message: "message"
  UserLookupDTO:
    type: "object"
    properties:
      avatarUrl:
        type: "string"
      login:
        type: "string"
      userId:
        type: "integer"
        format: "int64"
    example:
      avatarUrl: "avatarUrl"
      login: "login"
      userId: 0
  UserOrgDTO:
    type: "object"
    properties:
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      role:
        type: "string"
        enum:
        - "Viewer"
        - "Editor"
        - "Admin"
    example:
      role: "Viewer"
      name: "name"
      orgId: 0
  UserProfileDTO:
    type: "object"
    properties:
      accessControl:
        type: "object"
        additionalProperties:
          type: "boolean"
      authLabels:
        type: "array"
        items:
          type: "string"
      avatarUrl:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      email:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      isDisabled:
        type: "boolean"
      isExternal:
        type: "boolean"
      isGrafanaAdmin:
        type: "boolean"
      login:
        type: "string"
      name:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      theme:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      accessControl:
        key: true
      isExternal: true
      avatarUrl: "avatarUrl"
      isGrafanaAdmin: true
      authLabels:
      - "authLabels"
      - "authLabels"
      login: "login"
      orgId: 6
      createdAt: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      theme: "theme"
      id: 0
      isDisabled: true
      email: "email"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
  UserQuotaDTO:
    type: "object"
    properties:
      limit:
        type: "integer"
        format: "int64"
      target:
        type: "string"
      used:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
    example:
      user_id: 1
      limit: 0
      used: 6
      target: "target"
  UserSearchHitDTO:
    type: "object"
    properties:
      authLabels:
        type: "array"
        items:
          type: "string"
      avatarUrl:
        type: "string"
      email:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      isAdmin:
        type: "boolean"
      isDisabled:
        type: "boolean"
      lastSeenAt:
        type: "string"
        format: "date-time"
      lastSeenAtAge:
        type: "string"
      login:
        type: "string"
      name:
        type: "string"
    example:
      lastSeenAt: "2000-01-23T04:56:07.000+00:00"
      avatarUrl: "avatarUrl"
      authLabels:
      - "authLabels"
      - "authLabels"
      name: "name"
      id: 5
      isAdmin: true
      isDisabled: true
      login: "login"
      email: "email"
      lastSeenAtAge: "lastSeenAtAge"
  UserToken:
    type: "object"
    properties:
      AuthToken:
        type: "string"
      AuthTokenSeen:
        type: "boolean"
      ClientIp:
        type: "string"
      CreatedAt:
        type: "integer"
        format: "int64"
      Id:
        type: "integer"
        format: "int64"
      PrevAuthToken:
        type: "string"
      RevokedAt:
        type: "integer"
        format: "int64"
      RotatedAt:
        type: "integer"
        format: "int64"
      SeenAt:
        type: "integer"
        format: "int64"
      UnhashedToken:
        type: "string"
      UpdatedAt:
        type: "integer"
        format: "int64"
      UserAgent:
        type: "string"
      UserId:
        type: "integer"
        format: "int64"
    description: "UserToken represents a user token"
    example:
      AuthTokenSeen: true
      RotatedAt: 5
      CreatedAt: 0
      UnhashedToken: "UnhashedToken"
      ClientIp: "ClientIp"
      UpdatedAt: 2
      RevokedAt: 1
      SeenAt: 5
      PrevAuthToken: "PrevAuthToken"
      UserId: 7
      UserAgent: "UserAgent"
      AuthToken: "AuthToken"
      Id: 6
  Userinfo:
    type: "object"
    description: "The Userinfo type is an immutable encapsulation of username and\n\
      password details for a URL. An existing Userinfo value is guaranteed\nto have\
      \ a username set (potentially empty, as allowed by RFC 2396),\nand optionally\
      \ a password."
    x-go-package: "net/url"
  ValidationError:
    type: "object"
    properties:
      msg:
        type: "string"
        example: "error message"
        x-go-name: "Msg"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  ValueMapping:
    type: "object"
    description: "ValueMapping allows mapping input values to text and color"
  ValueMappings:
    type: "array"
    items:
      $ref: "#/definitions/ValueMapping"
  Vector:
    type: "array"
    description: "Vector is basically only an alias for model.Samples, but the\ncontract\
      \ is that in a Vector, all Samples have the same timestamp."
    items:
      $ref: "#/definitions/Sample"
    x-go-package: "github.com/prometheus/prometheus/promql"
  VictorOpsConfig:
    type: "object"
    properties:
      api_key:
        $ref: "#/definitions/Secret"
      api_key_file:
        $ref: "#/definitions/Secret"
      api_url:
        $ref: "#/definitions/URL"
      custom_fields:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "CustomFields"
      entity_display_name:
        type: "string"
        x-go-name: "EntityDisplayName"
      http_config:
        $ref: "#/definitions/HTTPClientConfig"
      message_type:
        type: "string"
        x-go-name: "MessageType"
      monitoring_tool:
        type: "string"
        x-go-name: "MonitoringTool"
      routing_key:
        type: "string"
        x-go-name: "RoutingKey"
      send_resolved:
        type: "boolean"
        x-go-name: "VSendResolved"
      state_message:
        type: "string"
        x-go-name: "StateMessage"
    title: "VictorOpsConfig configures notifications via VictorOps."
    x-go-package: "github.com/prometheus/alertmanager/config"
  VisType:
    type: "string"
    title: "VisType is used to indicate how the data should be visualized in explore."
  WebhookConfig:
    type: "object"
    properties:
      http_config:
        $ref: "#/definitions/HTTPClientConfig"
      max_alerts:
        type: "integer"
        format: "uint64"
        description: "MaxAlerts is the maximum number of alerts to be sent per webhook\
          \ message.\nAlerts exceeding this threshold will be truncated. Setting this\
          \ to 0\nallows an unlimited number of alerts."
        x-go-name: "MaxAlerts"
      send_resolved:
        type: "boolean"
        x-go-name: "VSendResolved"
      url:
        $ref: "#/definitions/URL"
    title: "WebhookConfig configures notifications via a generic webhook."
    x-go-package: "github.com/prometheus/alertmanager/config"
  WechatConfig:
    type: "object"
    properties:
      agent_id:
        type: "string"
        x-go-name: "AgentID"
      api_secret:
        $ref: "#/definitions/Secret"
      api_url:
        $ref: "#/definitions/URL"
      corp_id:
        type: "string"
        x-go-name: "CorpID"
      http_config:
        $ref: "#/definitions/HTTPClientConfig"
      message:
        type: "string"
        x-go-name: "Message"
      message_type:
        type: "string"
        x-go-name: "MessageType"
      send_resolved:
        type: "boolean"
        x-go-name: "VSendResolved"
      to_party:
        type: "string"
        x-go-name: "ToParty"
      to_tag:
        type: "string"
        x-go-name: "ToTag"
      to_user:
        type: "string"
        x-go-name: "ToUser"
    title: "WechatConfig configures notifications via Wechat."
    x-go-package: "github.com/prometheus/alertmanager/config"
  WeekdayRange:
    type: "object"
    properties:
      Begin:
        type: "integer"
        format: "int64"
      End:
        type: "integer"
        format: "int64"
    title: "A WeekdayRange is an inclusive range between [0, 6] where 0 = Sunday."
    example:
      Begin: 7
      End: 9
    x-go-package: "github.com/prometheus/alertmanager/timeinterval"
  YearRange:
    type: "object"
    properties:
      Begin:
        type: "integer"
        format: "int64"
      End:
        type: "integer"
        format: "int64"
    title: "A YearRange is a positive inclusive range."
    example:
      Begin: 3
      End: 2
    x-go-package: "github.com/prometheus/alertmanager/timeinterval"
  alert:
    type: "object"
    required:
    - "labels"
    properties:
      generatorURL:
        type: "string"
        format: "uri"
        description: "generator URL\nFormat: uri"
        x-go-name: "GeneratorURL"
      labels:
        $ref: "#/definitions/labelSet"
    description: "Alert alert"
    x-go-name: "Alert"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  alertGroup:
    type: "object"
    required:
    - "alerts"
    - "labels"
    - "receiver"
    properties:
      alerts:
        type: "array"
        description: "alerts"
        items:
          $ref: "#/definitions/gettableAlert"
        x-go-name: "Alerts"
      labels:
        $ref: "#/definitions/labelSet"
      receiver:
        $ref: "#/definitions/receiver"
    x-go-name: "AlertGroup"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  alertGroups:
    type: "array"
    items:
      $ref: "#/definitions/alertGroup"
    x-go-name: "AlertGroups"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  alertStatus:
    type: "object"
    required:
    - "inhibitedBy"
    - "silencedBy"
    - "state"
    properties:
      inhibitedBy:
        type: "array"
        description: "inhibited by"
        items:
          type: "string"
        x-go-name: "InhibitedBy"
      silencedBy:
        type: "array"
        description: "silenced by"
        items:
          type: "string"
        x-go-name: "SilencedBy"
      state:
        type: "string"
        description: "state"
        enum:
        - "[unprocessed active suppressed]"
        x-go-name: "State"
    description: "AlertStatus alert status"
    x-go-name: "AlertStatus"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  alertmanagerConfig:
    type: "object"
    required:
    - "original"
    properties:
      original:
        type: "string"
        description: "original"
        x-go-name: "Original"
    description: "AlertmanagerConfig alertmanager config"
    x-go-name: "AlertmanagerConfig"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  alertmanagerStatus:
    type: "object"
    required:
    - "cluster"
    - "config"
    - "uptime"
    - "versionInfo"
    properties:
      cluster:
        $ref: "#/definitions/clusterStatus"
      config:
        $ref: "#/definitions/alertmanagerConfig"
      uptime:
        type: "string"
        format: "date-time"
        description: "uptime"
        x-go-name: "Uptime"
      versionInfo:
        $ref: "#/definitions/versionInfo"
    description: "AlertmanagerStatus alertmanager status"
    x-go-name: "AlertmanagerStatus"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  clusterStatus:
    type: "object"
    required:
    - "status"
    properties:
      name:
        type: "string"
        description: "name"
        x-go-name: "Name"
      peers:
        type: "array"
        description: "peers"
        items:
          $ref: "#/definitions/peerStatus"
        x-go-name: "Peers"
      status:
        type: "string"
        description: "status"
        enum:
        - "[ready settling disabled]"
        x-go-name: "Status"
    description: "ClusterStatus cluster status"
    x-go-name: "ClusterStatus"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  duration:
    $ref: "#/definitions/Duration"
  gettableAlert:
    type: "object"
    required:
    - "annotations"
    - "endsAt"
    - "fingerprint"
    - "labels"
    - "receivers"
    - "startsAt"
    - "status"
    - "updatedAt"
    properties:
      annotations:
        $ref: "#/definitions/labelSet"
      endsAt:
        type: "string"
        format: "date-time"
        description: "ends at"
        x-go-name: "EndsAt"
      fingerprint:
        type: "string"
        description: "fingerprint"
        x-go-name: "Fingerprint"
      generatorURL:
        type: "string"
        format: "uri"
        description: "generator URL\nFormat: uri"
        x-go-name: "GeneratorURL"
      labels:
        $ref: "#/definitions/labelSet"
      receivers:
        type: "array"
        description: "receivers"
        items:
          $ref: "#/definitions/receiver"
        x-go-name: "Receivers"
      startsAt:
        type: "string"
        format: "date-time"
        description: "starts at"
        x-go-name: "StartsAt"
      status:
        $ref: "#/definitions/alertStatus"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "updated at"
        x-go-name: "UpdatedAt"
    x-go-name: "GettableAlert"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  gettableAlerts:
    type: "array"
    items:
      $ref: "#/definitions/gettableAlert"
    x-go-name: "GettableAlerts"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  gettableSilence:
    type: "object"
    required:
    - "comment"
    - "createdBy"
    - "endsAt"
    - "id"
    - "matchers"
    - "startsAt"
    - "status"
    - "updatedAt"
    properties:
      comment:
        type: "string"
        description: "comment"
        x-go-name: "Comment"
      createdBy:
        type: "string"
        description: "created by"
        x-go-name: "CreatedBy"
      endsAt:
        type: "string"
        format: "date-time"
        description: "ends at"
        x-go-name: "EndsAt"
      id:
        type: "string"
        description: "id"
        x-go-name: "ID"
      matchers:
        $ref: "#/definitions/matchers"
      startsAt:
        type: "string"
        format: "date-time"
        description: "starts at"
        x-go-name: "StartsAt"
      status:
        $ref: "#/definitions/silenceStatus"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "updated at"
        x-go-name: "UpdatedAt"
    description: "GettableSilence gettable silence"
  gettableSilences:
    type: "array"
    description: "GettableSilences gettable silences"
    items:
      $ref: "#/definitions/gettableSilence"
  labelSet:
    type: "object"
    description: "LabelSet label set"
    additionalProperties:
      type: "string"
    x-go-name: "LabelSet"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  matcher:
    type: "object"
    required:
    - "isRegex"
    - "name"
    - "value"
    properties:
      isEqual:
        type: "boolean"
        description: "is equal"
        x-go-name: "IsEqual"
      isRegex:
        type: "boolean"
        description: "is regex"
        x-go-name: "IsRegex"
      name:
        type: "string"
        description: "name"
        x-go-name: "Name"
      value:
        type: "string"
        description: "value"
        x-go-name: "Value"
    description: "Matcher matcher"
    x-go-name: "Matcher"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  matchers:
    type: "array"
    description: "Matchers matchers"
    items:
      $ref: "#/definitions/matcher"
    x-go-name: "Matchers"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  overrideLabels:
    type: "object"
    title: "override the labels type with a map for generation."
    description: "The custom marshaling for labels.Labels ends up doing this anyways."
    additionalProperties:
      type: "string"
    x-go-package: "github.com/grafana/grafana/pkg/services/ngalert/api/tooling/definitions"
  peerStatus:
    type: "object"
    required:
    - "address"
    - "name"
    properties:
      address:
        type: "string"
        description: "address"
        x-go-name: "Address"
      name:
        type: "string"
        description: "name"
        x-go-name: "Name"
    description: "PeerStatus peer status"
    x-go-name: "PeerStatus"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  postableAlert:
    type: "object"
    required:
    - "labels"
    properties:
      annotations:
        $ref: "#/definitions/labelSet"
      endsAt:
        type: "string"
        format: "date-time"
        description: "ends at\nFormat: date-time"
        x-go-name: "EndsAt"
      generatorURL:
        type: "string"
        format: "uri"
        description: "generator URL\nFormat: uri"
        x-go-name: "GeneratorURL"
      labels:
        $ref: "#/definitions/labelSet"
      startsAt:
        type: "string"
        format: "date-time"
        description: "starts at\nFormat: date-time"
        x-go-name: "StartsAt"
    description: "PostableAlert postable alert"
    x-go-name: "PostableAlert"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  postableAlerts:
    type: "array"
    description: "PostableAlerts postable alerts"
    items:
      $ref: "#/definitions/postableAlert"
    x-go-name: "PostableAlerts"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  postableSilence:
    type: "object"
    required:
    - "comment"
    - "createdBy"
    - "endsAt"
    - "matchers"
    - "startsAt"
    properties:
      comment:
        type: "string"
        description: "comment"
        x-go-name: "Comment"
      createdBy:
        type: "string"
        description: "created by"
        x-go-name: "CreatedBy"
      endsAt:
        type: "string"
        format: "date-time"
        description: "ends at"
        x-go-name: "EndsAt"
      id:
        type: "string"
        description: "id"
        x-go-name: "ID"
      matchers:
        $ref: "#/definitions/matchers"
      startsAt:
        type: "string"
        format: "date-time"
        description: "starts at"
        x-go-name: "StartsAt"
    x-go-name: "PostableSilence"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  receiver:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "name"
        x-go-name: "Name"
    x-go-name: "Receiver"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  silence:
    type: "object"
    required:
    - "comment"
    - "createdBy"
    - "endsAt"
    - "matchers"
    - "startsAt"
    properties:
      comment:
        type: "string"
        description: "comment"
        x-go-name: "Comment"
      createdBy:
        type: "string"
        description: "created by"
        x-go-name: "CreatedBy"
      endsAt:
        type: "string"
        format: "date-time"
        description: "ends at"
        x-go-name: "EndsAt"
      matchers:
        $ref: "#/definitions/matchers"
      startsAt:
        type: "string"
        format: "date-time"
        description: "starts at"
        x-go-name: "StartsAt"
    description: "Silence silence"
    x-go-name: "Silence"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  silenceStatus:
    type: "object"
    required:
    - "state"
    properties:
      state:
        type: "string"
        description: "state"
        enum:
        - "[expired active pending]"
        x-go-name: "State"
    description: "SilenceStatus silence status"
    x-go-name: "SilenceStatus"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  versionInfo:
    type: "object"
    required:
    - "branch"
    - "buildDate"
    - "buildUser"
    - "goVersion"
    - "revision"
    - "version"
    properties:
      branch:
        type: "string"
        description: "branch"
        x-go-name: "Branch"
      buildDate:
        type: "string"
        description: "build date"
        x-go-name: "BuildDate"
      buildUser:
        type: "string"
        description: "build user"
        x-go-name: "BuildUser"
      goVersion:
        type: "string"
        description: "go version"
        x-go-name: "GoVersion"
      revision:
        type: "string"
        description: "revision"
        x-go-name: "Revision"
      version:
        type: "string"
        description: "version"
        x-go-name: "Version"
    description: "VersionInfo version info"
    x-go-name: "VersionInfo"
    x-go-package: "github.com/prometheus/alertmanager/api/v2/models"
  inline_response_200:
    type: "object"
    required:
    - "alertsAffected"
    - "message"
    properties:
      alertsAffected:
        type: "integer"
        format: "int64"
        description: "AlertsAffected is the number of the affected alerts."
      message:
        type: "string"
      state:
        type: "string"
        description: "Alert result state\nrequired true"
    example:
      state: "state"
      alertsAffected: 0
      message: "message"
  inline_response_200_1:
    type: "object"
    required:
    - "id"
    - "message"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the deleted notification channel."
      message:
        type: "string"
        description: "Message Message of the deleted notificatiton channel."
    example:
      id: 65
      message: "message"
  inline_response_200_2:
    type: "object"
    required:
    - "alertId"
    - "message"
    properties:
      alertId:
        type: "integer"
        format: "int64"
      message:
        type: "string"
      state:
        type: "string"
        description: "Alert result state\nrequired true"
    example:
      alertId: 0
      state: "state"
      message: "message"
  inline_response_200_3:
    type: "object"
    required:
    - "id"
    - "message"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the created annotation."
      message:
        type: "string"
        description: "Message Message of the created annotation."
    example:
      id: 65
      message: "message"
  Body:
    type: "object"
    properties:
      base:
        $ref: "#/definitions/CalculateDiffTarget"
      diffType:
        type: "string"
        description: "The type of diff to return\nDescription:\n`basic`\n`json`"
        enum:
        - "basic"
        - "json"
      new:
        $ref: "#/definitions/CalculateDiffTarget"
  inline_response_200_4:
    type: "object"
    required:
    - "id"
    - "status"
    - "title"
    - "uid"
    - "url"
    - "version"
    properties:
      id:
        type: "string"
        example: "1"
        description: "ID The unique identifier (id) of the created/updated dashboard."
      status:
        type: "string"
        example: "success"
        description: "Status status of the response."
      title:
        type: "string"
        example: "my-dashboard"
        description: "Slug The slug of the dashboard."
      uid:
        type: "string"
        example: "nHz3SXiiz"
        description: "UID The unique identifier (uid) of the created/updated dashboard."
      url:
        type: "string"
        example: "/d/nHz3SXiiz/my-dashboard"
        description: "URL The relative URL for accessing the created/updated dashboard."
      version:
        type: "integer"
        format: "int64"
        example: 2
        description: "Version The version of the dashboard."
    example:
      uid: "nHz3SXiiz"
      id: "1"
      title: "my-dashboard"
      version: 2
      url: "/d/nHz3SXiiz/my-dashboard"
      status: "success"
  inline_response_200_5:
    type: "object"
    required:
    - "id"
    - "message"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the deleted dashboard."
      message:
        type: "string"
        example: "Dashboard My Dashboard deleted"
        description: "Message Message of the deleted dashboard."
      title:
        type: "string"
        example: "My Dashboard"
        description: "Title Title of the deleted dashboard."
    example:
      id: 65
      message: "Dashboard My Dashboard deleted"
      title: "My Dashboard"
  inline_response_200_6:
    type: "object"
    required:
    - "datasource"
    - "id"
    - "message"
    - "name"
    properties:
      datasource:
        $ref: "#/definitions/DataSource"
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the new data source."
      message:
        type: "string"
        example: "Data source added"
        description: "Message Message of the deleted dashboard."
      name:
        type: "string"
        example: "My Data source"
        description: "Name of the new data source."
    example:
      datasource:
        accessControl: {}
        access: {}
        basicAuthUser: "basicAuthUser"
        basicAuth: true
        readOnly: true
        typeLogoUrl: "typeLogoUrl"
        type: "type"
        version: 1
        orgId: 6
        url: "url"
        uid: "uid"
        database: "database"
        isDefault: true
        jsonData: {}
        withCredentials: true
        name: "name"
        id: 0
        user: "user"
        secureJsonFields:
          key: true
      name: "My Data source"
      id: 65
      message: "Data source added"
  inline_response_200_7:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the data source."
    example:
      id: 65
  inline_response_200_8:
    type: "object"
    required:
    - "id"
    - "message"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the deleted data source."
      message:
        type: "string"
        example: "Dashboard My Dashboard deleted"
        description: "Message Message of the deleted dashboard."
    example:
      id: 65
      message: "Dashboard My Dashboard deleted"
  inline_response_200_9:
    type: "object"
    required:
    - "id"
    - "message"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the deleted folder."
      message:
        type: "string"
        example: "Folder My Folder deleted"
        description: "Message Message of the deleted folder."
      title:
        type: "string"
        example: "My Folder"
        description: "Title of the deleted folder."
    example:
      id: 65
      message: "Folder My Folder deleted"
      title: "My Folder"
  inline_response_200_10:
    type: "object"
    required:
    - "id"
    - "message"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the added user."
      message:
        type: "string"
        example: "Data source added"
        description: "Message Message of the added user."
    example:
      id: 65
      message: "Data source added"
  inline_response_200_11:
    type: "object"
    required:
    - "message"
    - "orgId"
    properties:
      message:
        type: "string"
        example: "Data source added"
        description: "Message Message of the created org."
      orgId:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the created org."
    example:
      message: "Data source added"
      orgId: 65
  inline_response_200_12:
    type: "object"
    properties:
      description:
        type: "string"
      displayName:
        type: "string"
      meta:
        type: "string"
      name:
        type: "string"
    example:
      displayName: "displayName"
      meta: "meta"
      name: "name"
      description: "description"
  inline_response_200_13:
    type: "object"
    properties:
      externalEnabled:
        type: "boolean"
      externalSnapshotName:
        type: "string"
      externalSnapshotURL:
        type: "string"
    example:
      externalEnabled: true
      externalSnapshotURL: "externalSnapshotURL"
      externalSnapshotName: "externalSnapshotName"
  inline_response_200_14:
    type: "object"
    properties:
      deleteKey:
        type: "string"
        description: "Unique key used to delete the snapshot. It is different from\
          \ the key so that only the creator can delete the snapshot."
      deleteUrl:
        type: "string"
      id:
        type: "integer"
        format: "int64"
        description: "Snapshot id"
      key:
        type: "string"
        description: "Unique key"
      url:
        type: "string"
    example:
      deleteKey: "deleteKey"
      deleteUrl: "deleteUrl"
      id: 0
      key: "key"
      url: "url"
  inline_response_200_15:
    type: "object"
    properties:
      message:
        type: "string"
      teamId:
        type: "integer"
        format: "int64"
    example:
      teamId: 0
      message: "message"
  inline_response_200_16:
    type: "object"
    properties:
      helpFlags1:
        type: "integer"
        format: "int64"
      message:
        type: "string"
    example:
      helpFlags1: 0
      message: "message"
responses:
  SMTPNotEnabledError:
    description: ""
  acceptedResponse:
    description: "AcceptedResponse"
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  addOrgUser:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_10"
  badRequestError:
    description: "BadRequestError is returned when the request is invalid and it cannot\
      \ be processed."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  conflictError:
    description: "ConflictError"
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  contentResponse:
    description: ""
    schema:
      type: "array"
      items:
        type: "integer"
        format: "uint8"
  createAnnotationResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_3"
  createOrUpdateDatasourceResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_6"
  createOrgResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_11"
  createReportResponse:
    description: ""
    schema:
      type: "object"
  createSnapshotResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_14"
  createTeamResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_15"
  createUserResponse:
    description: ""
    schema:
      $ref: "#/definitions/UserIdDTO"
  dashboardDiffResponse:
    description: "Calculate dashboard diff response."
    schema:
      type: "array"
      items:
        type: "integer"
        format: "uint8"
  dashboardResponse:
    description: ""
    schema:
      $ref: "#/definitions/DashboardFullWithMeta"
  dashboardVersionResponse:
    description: ""
    schema:
      $ref: "#/definitions/DashboardVersionMeta"
  dashboardVersionsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/DashboardVersionDTO"
  dashboardsTagsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/DashboardTagCloudItem"
  deleteAlertNotificationChannelResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_1"
  deleteDashboardResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_5"
  deleteDatasourceByNameResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_8"
  deleteFolderResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_9"
  folderResponse:
    description: ""
    schema:
      $ref: "#/definitions/Folder"
  forbiddenError:
    description: "ForbiddenError is returned if the user/token has insufficient permissions\
      \ to access the requested resource."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  genericError:
    description: "A GenericError is the default error message that is generated.\n\
      For certain status codes there are more appropriate error structures."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  getAPIkeyResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/ApiKeyDTO"
  getAccessControlStatusResponse:
    description: ""
    schema:
      $ref: "#/definitions/Status"
  getAlertNotificationChannelResponse:
    description: ""
    schema:
      $ref: "#/definitions/AlertNotification"
  getAlertNotificationChannelsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/AlertNotification"
  getAlertResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/Alert"
  getAlertsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/AlertListItemDTO"
  getAllRolesResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/RoleDTO"
  getAnnotationResponse:
    description: ""
    schema:
      $ref: "#/definitions/ItemDTO"
  getAnnotationTagsResponse:
    description: ""
    schema:
      $ref: "#/definitions/GetAnnotationTagsResponse"
  getAnnotationsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/ItemDTO"
  getAuthTokensResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/UserToken"
  getCustomPermissionsReportResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/CustomPermissionsRecordDTO"
  getDashboardPermissionsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/DashboardAclInfoDTO"
  getDashboardStatesResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/AlertStateInfoDTO"
  getDatasourceIDresponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_7"
  getDatasourceResponse:
    description: ""
    schema:
      $ref: "#/definitions/DataSource"
  getDatasourcesResponse:
    description: ""
    schema:
      $ref: "#/definitions/DataSourceList"
  getFoldersResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/FolderSearchHit"
  getHomeDashboardResponse:
    description: "Home dashboard response."
    schema:
      $ref: "#/definitions/GetHomeDashboardResponse"
  getInvitesResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/TempUserDTO"
  getLDAPSyncStatusResponse:
    description: ""
    schema:
      $ref: "#/definitions/ActiveSyncStatusDTO"
  getLibraryElementConnectionsResponse:
    description: ""
    schema:
      $ref: "#/definitions/LibraryElementConnectionsResponse"
  getLibraryElementResponse:
    description: ""
    schema:
      $ref: "#/definitions/LibraryElementResponse"
  getLibraryElementsResponse:
    description: ""
    schema:
      $ref: "#/definitions/LibraryElementSearchResponse"
  getLicenseStatusResponse:
    description: ""
  getLicenseTokenResponse:
    description: ""
    schema:
      $ref: "#/definitions/Token"
  getOrgResponse:
    description: ""
    schema:
      $ref: "#/definitions/OrgDetailsDTO"
  getOrgUsersResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/OrgUserDTO"
  getPermissionseResponse:
    description: ""
    schema:
      $ref: "#/definitions/AddPermissionDTO"
  getPreferencesResponse:
    description: ""
    schema:
      $ref: "#/definitions/Prefs"
  getQueryHistoryDeleteQueryResponse:
    description: ""
    schema:
      $ref: "#/definitions/QueryHistoryDeleteQueryResponse"
  getQueryHistoryMigrationResponse:
    description: ""
    schema:
      $ref: "#/definitions/QueryHistoryMigrationResponse"
  getQueryHistoryResponse:
    description: ""
    schema:
      $ref: "#/definitions/QueryHistoryResponse"
  getQueryHistorySearchResponse:
    description: ""
    schema:
      $ref: "#/definitions/QueryHistorySearchResponse"
  getQuotaResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/UserQuotaDTO"
  getReportResponse:
    description: ""
    schema:
      $ref: "#/definitions/ConfigDTO"
  getReportSettingsResponse:
    description: ""
    schema:
      $ref: "#/definitions/SettingsDTO"
  getReportsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/ConfigDTO"
  getRoleResponse:
    description: ""
    schema:
      $ref: "#/definitions/RoleDTO"
  getSettingsResponse:
    description: ""
    schema:
      $ref: "#/definitions/SettingsBag"
  getSnapshotSharingOptionsResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_13"
  getSnapshotsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/DashboardSnapshotDTO"
  getStatsResponse:
    description: ""
    schema:
      $ref: "#/definitions/AdminStats"
  getTeamGroupsApiResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/TeamGroupDTO"
  getTeamMembersResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/TeamMemberDTO"
  getTeamResponse:
    description: ""
    schema:
      $ref: "#/definitions/TeamDTO"
  getUserOrgListResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/UserOrgDTO"
  getUserTeamsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/TeamDTO"
  helpFlagResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_16"
  importDashboardResponse:
    description: ""
    schema:
      $ref: "#/definitions/ImportDashboardResponse"
  internalServerError:
    description: "InternalServerError is a general error indicating something went\
      \ wrong internally."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  listBuiltinRolesResponse:
    description: ""
    schema:
      type: "object"
      additionalProperties:
        type: "array"
        items:
          $ref: "#/definitions/RoleDTO"
  listRecordingRulesResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/RecordingRuleJSON"
  lookupAlertNotificationChannelsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/AlertNotificationLookup"
  lookupOrgUsersResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/UserLookupDTO"
  notFoundError:
    description: "NotFoundError is returned when the requested resource was not found."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  okResponse:
    description: "An OKResponse is returned if the request was successful."
    schema:
      $ref: "#/definitions/SuccessResponseBody"
  pauseAlertResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_2"
  pauseAlertsResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200"
  postAPIkeyResponse:
    description: ""
    schema:
      $ref: "#/definitions/NewApiKeyResult"
  postDashboardResponse:
    description: "Create/update dashboard response."
    schema:
      $ref: "#/definitions/inline_response_200_4"
  postRenewLicenseTokenResponse:
    description: ""
  preconditionFailedError:
    description: "PreconditionFailedError"
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  queryDataResponse:
    description: ""
    schema:
      $ref: "#/definitions/QueryDataResponse"
  recordingRuleResponse:
    description: ""
    schema:
      $ref: "#/definitions/RecordingRuleJSON"
  recordingRuleWriteTargetResponse:
    description: ""
    schema:
      $ref: "#/definitions/PrometheusRemoteWriteTargetJSON"
  refreshLicenseStatsResponse:
    description: ""
    schema:
      $ref: "#/definitions/ActiveUserStats"
  searchOrgResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/OrgDTO"
  searchResponse:
    description: ""
    schema:
      $ref: "#/definitions/HitList"
  searchSortingResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_12"
  searchTeamsResponse:
    description: ""
    schema:
      $ref: "#/definitions/SearchTeamQueryResult"
  searchUsersResponse:
    description: ""
    schema:
      $ref: "#/definitions/SearchUserQueryResult"
  snapshotResponse:
    description: ""
  testAlertResponse:
    description: ""
    schema:
      $ref: "#/definitions/AlertTestResult"
  trimDashboardResponse:
    description: "Trimmed dashboard response."
    schema:
      $ref: "#/definitions/TrimDashboardFullWithMeta"
  unauthorisedError:
    description: "UnauthorizedError is returned when the request is not authenticated."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  unprocessableEntityError:
    description: "UnprocessableEntityError"
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  userResponse:
    description: ""
    schema:
      $ref: "#/definitions/UserProfileDTO"
